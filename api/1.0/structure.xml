<?xml version="1.0" encoding="utf-8"?>
<project title="MailMimeParser 1.0" version="2.8.5">
  <partials/>
  <file path="Message.php" generated-path="Message.html" hash="7edd809aa8541f9d12bcbec0e517a887" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Psr7">\GuzzleHttp\Psr7</namespace-alias>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="MessageHelperService">\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\Part\MimePart</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <namespace-alias name="PartStreamFilterManager">\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</namespace-alias>
    <namespace-alias name="PartFilter">\ZBateson\MailMimeParser\Message\PartFilter</namespace-alias>
    <namespace-alias name="PartFilterFactory">\ZBateson\MailMimeParser\Message\PartFilterFactory</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser" line="27" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\MimePart</extends>
      <name>Message</name>
      <full_name>\ZBateson\MailMimeParser\Message</full_name>
      <docblock line="27">
        <description>A parsed mime message with optional mime parts depending on its type.</description>
        <long-description>A mime message may have any number of mime parts, and each part may have any
number of sub-parts, etc...</long-description>
        <tag name="author" line="27" description="Zaahid Bateson"/>
        <tag name="package" line="27" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MimePart" refers="\ZBateson\MailMimeParser\Message\Part\MimePart" link="/classes/ZBateson.MailMimeParser.Message.Part.MimePart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="33" package="MailMimeParser">
        <name>$messageHelperService</name>
        <full_name>\ZBateson\MailMimeParser\Message::messageHelperService</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;helper class with various message manipulation&#10;     routines.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="25" package="MailMimeParser">
        <name>$headerContainer</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::headerContainer</full_name>
        <default></default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="" type="\ZBateson\MailMimeParser\Header\HeaderContainer" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderContainer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="24" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::partFilterFactory</full_name>
        <default></default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;factory object responsible for create PartFilters&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="29" package="MailMimeParser">
        <name>$children</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::children</full_name>
        <default>array()</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;array of child parts&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="28" package="MailMimeParser">
        <name>$partStreamFilterManager</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::partStreamFilterManager</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;manages attached filters to $contentHandle&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="33" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::streamFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;for creating MessagePartStream objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="38" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::parent</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentPart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentPart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="44" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::stream</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;a Psr7 stream containing this part's headers,&#10;content and children&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="49" package="MailMimeParser">
        <name>$contentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::contentStream</full_name>
        <default></default>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;a Psr7 stream containing this part's content&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="55" package="MailMimeParser">
        <name>$charsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::charsetOverride</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="55" description="&lt;p&gt;can be used to set an override for content's charset in cases&#10;where a user wants to set a default other than ISO-8859-1.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="62" package="MailMimeParser">
        <name>$ignoreTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::ignoreTransferEncoding</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true when a user attaches a stream manually, it's&#10;assumed to already be decoded or to have relevant transfer encoding&#10;decorators attached already.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message::__construct()</full_name>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$partFilterFactory">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$messageHelperService">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
          <tag name="param" line="44" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="44" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFilterFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageHelperService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser" line="71" package="MailMimeParser">
        <name>from</name>
        <full_name>\ZBateson\MailMimeParser\Message::from()</full_name>
        <docblock line="71">
          <description>Convenience method to parse a handle or string into a Message without
requiring including MailMimeParser, instantiating it, and calling parse.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="&lt;p&gt;the resource handle to the input&#10;       stream of the mime message, or a string containing a mime message&lt;/p&gt;" type="resource|string" variable="$handleOrString">
            <type>resource</type>
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handleOrString</name>
          <default></default>
          <type>resource|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="83" package="MailMimeParser">
        <name>getTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextPart()</full_name>
        <docblock line="83">
          <description>Returns the text/plain part at the given index (or null if not found.)</description>
          <long-description></long-description>
          <tag name="param" line="83" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="83" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="96" package="MailMimeParser">
        <name>getTextPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextPartCount()</full_name>
        <docblock line="96">
          <description>Returns the number of text/plain parts in this message.</description>
          <long-description></long-description>
          <tag name="return" line="96" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="109" package="MailMimeParser">
        <name>getHtmlPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlPart()</full_name>
        <docblock line="109">
          <description>Returns the text/html part at the given index (or null if not found.)</description>
          <long-description></long-description>
          <tag name="param" line="109" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="109" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="122" package="MailMimeParser">
        <name>getHtmlPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlPartCount()</full_name>
        <docblock line="122">
          <description>Returns the number of text/html parts in this message.</description>
          <long-description></long-description>
          <tag name="return" line="122" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="136" package="MailMimeParser">
        <name>getAttachmentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getAttachmentPart()</full_name>
        <docblock line="136">
          <description>Returns the attachment part at the given 0-based index, or null if none
is set.</description>
          <long-description></long-description>
          <tag name="param" line="136" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="136" description="" type="\ZBateson\MailMimeParser\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="153" package="MailMimeParser">
        <name>getAllAttachmentParts</name>
        <full_name>\ZBateson\MailMimeParser\Message::getAllAttachmentParts()</full_name>
        <docblock line="153">
          <description>Returns all attachment parts.</description>
          <long-description>"Attachments" are any non-multipart, non-signature and any text or html
html part witha Content-Disposition set to  'attachment'.</long-description>
          <tag name="return" line="153" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\MessagePart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="176" package="MailMimeParser">
        <name>getAttachmentCount</name>
        <full_name>\ZBateson\MailMimeParser\Message::getAttachmentCount()</full_name>
        <docblock line="176">
          <description>Returns the number of attachments available.</description>
          <long-description></long-description>
          <tag name="return" line="176" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="189" package="MailMimeParser">
        <name>getTextStream</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextStream()</full_name>
        <docblock line="189">
          <description>Returns a Psr7 Stream for the 'inline' text/plain content at the passed
$index, or null if unavailable.</description>
          <long-description></long-description>
          <tag name="param" line="189" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="189" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="189" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="206" package="MailMimeParser">
        <name>getTextResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextResourceHandle()</full_name>
        <docblock line="206">
          <description>Returns a resource handle for the 'inline' text/plain content at the
passed $index, or null if unavailable.</description>
          <long-description></long-description>
          <tag name="param" line="206" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="206" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="206" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="225" package="MailMimeParser">
        <name>getTextContent</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextContent()</full_name>
        <docblock line="225">
          <description>Returns the content of the inline text/plain part at the given index.</description>
          <long-description>Reads the entire stream content into a string and returns it.  Returns
null if the message doesn't have an inline text part.</long-description>
          <tag name="param" line="225" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="225" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="225" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="242" package="MailMimeParser">
        <name>getHtmlStream</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlStream()</full_name>
        <docblock line="242">
          <description>Returns a Psr7 Stream for the 'inline' text/html content at the passed
$index, or null if unavailable.</description>
          <long-description></long-description>
          <tag name="param" line="242" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="242" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="242" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="259" package="MailMimeParser">
        <name>getHtmlResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlResourceHandle()</full_name>
        <docblock line="259">
          <description>Returns a resource handle for the 'inline' text/html content at the
passed $index, or null if unavailable.</description>
          <long-description></long-description>
          <tag name="param" line="259" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="259" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="259" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="278" package="MailMimeParser">
        <name>getHtmlContent</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlContent()</full_name>
        <docblock line="278">
          <description>Returns the content of the inline text/html part at the given index.</description>
          <long-description>Reads the entire stream content into a string and returns it.  Returns
null if the message doesn't have an inline html part.</long-description>
          <tag name="param" line="278" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="278" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="278" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="293" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message::isMime()</full_name>
        <docblock line="293">
          <description>Returns true if either a Content-Type or Mime-Version header are defined
in this Message.</description>
          <long-description></long-description>
          <tag name="return" line="293" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MimePart::isMime()" refers="\ZBateson\MailMimeParser\Message\Part\MimePart::isMime()" link="/classes/ZBateson.MailMimeParser.Message.Part.MimePart.html#method_isMime"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="312" package="MailMimeParser">
        <name>setTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::setTextPart()</full_name>
        <docblock line="312">
          <description>Sets the text/plain part of the message to the passed $stringOrHandle,
either creating a new part if one doesn't exist for text/plain, or
assigning the value of $stringOrHandle to an existing text/plain part.</description>
          <long-description>The optional $charset parameter is the charset for saving to.
$stringOrHandle is expected to be in UTF-8 regardless of the target
charset.</long-description>
          <tag name="param" line="312" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="312" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>'UTF-8'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="333" package="MailMimeParser">
        <name>setHtmlPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::setHtmlPart()</full_name>
        <docblock line="333">
          <description>Sets the text/html part of the message to the passed $stringOrHandle,
either creating a new part if one doesn't exist for text/html, or
assigning the value of $stringOrHandle to an existing text/html part.</description>
          <long-description>The optional $charset parameter is the charset for saving to.
$stringOrHandle is expected to be in UTF-8 regardless of the target
charset.</long-description>
          <tag name="param" line="333" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="333" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>'UTF-8'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="348" package="MailMimeParser">
        <name>removeTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeTextPart()</full_name>
        <docblock line="348">
          <description>Removes the text/plain part of the message at the passed index if one
exists.  Returns true on success.</description>
          <long-description></long-description>
          <tag name="return" line="348" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="365" package="MailMimeParser">
        <name>removeAllTextParts</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAllTextParts()</full_name>
        <docblock line="365">
          <description>Removes all text/plain inline parts in this message, optionally keeping
other inline parts as attachments on the main message (defaults to
keeping them).</description>
          <long-description></long-description>
          <tag name="param" line="365" description="" type="boolean" variable="$keepOtherPartsAsAttachments">
            <type>boolean</type>
          </tag>
          <tag name="return" line="365" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$keepOtherPartsAsAttachments</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="380" package="MailMimeParser">
        <name>removeHtmlPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeHtmlPart()</full_name>
        <docblock line="380">
          <description>Removes the html part of the message if one exists.  Returns true on
success.</description>
          <long-description></long-description>
          <tag name="return" line="380" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="397" package="MailMimeParser">
        <name>removeAllHtmlParts</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAllHtmlParts()</full_name>
        <docblock line="397">
          <description>Removes all text/html inline parts in this message, optionally keeping
other inline parts as attachments on the main message (defaults to
keeping them).</description>
          <long-description></long-description>
          <tag name="param" line="397" description="" type="boolean" variable="$keepOtherPartsAsAttachments">
            <type>boolean</type>
          </tag>
          <tag name="return" line="397" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$keepOtherPartsAsAttachments</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="415" package="MailMimeParser">
        <name>addAttachmentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::addAttachmentPart()</full_name>
        <docblock line="415">
          <description>Adds an attachment part for the passed raw data string or handle and
given parameters.</description>
          <long-description></long-description>
          <tag name="param" line="415" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="415" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="415" description="" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="415" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default>'attachment'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="432" package="MailMimeParser">
        <name>addAttachmentPartFromFile</name>
        <full_name>\ZBateson\MailMimeParser\Message::addAttachmentPartFromFile()</full_name>
        <docblock line="432">
          <description>Adds an attachment part using the passed file.</description>
          <long-description>Essentially creates a file stream and uses it.</long-description>
          <tag name="param" line="432" description="" type="string" variable="$filePath">
            <type>string</type>
          </tag>
          <tag name="param" line="432" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="432" description="" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="432" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filePath</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default>'attachment'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="446" package="MailMimeParser">
        <name>removeAttachmentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAttachmentPart()</full_name>
        <docblock line="446">
          <description>Removes the attachment with the given index</description>
          <long-description></long-description>
          <tag name="param" line="446" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="465" package="MailMimeParser">
        <name>getSignedMessageStream</name>
        <full_name>\ZBateson\MailMimeParser\Message::getSignedMessageStream()</full_name>
        <docblock line="465">
          <description>Returns a stream that can be used to read the content part of a signed
message, which can be used to sign an email or verify a signature.</description>
          <long-description>The method simply returns the stream for the first child.  No
verification of whether the message is in fact a signed message is
performed.

Note that unlike getSignedMessageAsString, getSignedMessageStream doesn't
replace new lines.</long-description>
          <tag name="return" line="465" description="or null if the message doesn't have any children" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="481" package="MailMimeParser">
        <name>getSignedMessageAsString</name>
        <full_name>\ZBateson\MailMimeParser\Message::getSignedMessageAsString()</full_name>
        <docblock line="481">
          <description>Returns a string containing the entire body of a signed message for
verification or calculating a signature.</description>
          <long-description>Non-CRLF new lines are replaced to always be CRLF.</long-description>
          <tag name="return" line="481" description="or null if the message doesn't have any children" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="501" package="MailMimeParser">
        <name>getSignaturePart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getSignaturePart()</full_name>
        <docblock line="501">
          <description>Returns the signature part of a multipart/signed message or null.</description>
          <long-description>The signature part is determined to always be the 2nd child of a
multipart/signed message, the first being the 'body'.

Using the 'protocol' parameter of the Content-Type header is unreliable
in some instances (for instance a difference of x-pgp-signature versus
pgp-signature).</long-description>
          <tag name="return" line="501" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="520" package="MailMimeParser">
        <name>setAsMultipartSigned</name>
        <full_name>\ZBateson\MailMimeParser\Message::setAsMultipartSigned()</full_name>
        <docblock line="520">
          <description>Turns the message into a multipart/signed message, moving the actual
message into a child part, sets the content-type of the main message to
multipart/signed and adds an empty signature part as well.</description>
          <long-description>After calling setAsMultipartSigned, call getSignedMessageAsString to
return a</long-description>
          <tag name="param" line="520" description="&lt;p&gt;The Message Integrity Check algorithm being used&lt;/p&gt;" type="string" variable="$micalg">
            <type>string</type>
          </tag>
          <tag name="param" line="520" description="&lt;p&gt;The mime-type of the signature body&lt;/p&gt;" type="string" variable="$protocol">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$micalg</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$protocol</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="534" package="MailMimeParser">
        <name>setSignature</name>
        <full_name>\ZBateson\MailMimeParser\Message::setSignature()</full_name>
        <docblock line="534">
          <description>Sets the signature body of the message to the passed $body for a
multipart/signed message.</description>
          <long-description></long-description>
          <tag name="param" line="534" description="" type="string" variable="$body">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$body</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="27" package="MailMimeParser">
        <name>isMultiPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::isMultiPart()</full_name>
        <docblock line="27">
          <description>Returns true if this part's mime type is multipart/*</description>
          <long-description></long-description>
          <tag name="return" line="27" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="188" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getFilename()</full_name>
        <docblock line="188">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="198" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()</full_name>
        <docblock line="198">
          <description>Returns true if the current part is a mime part.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="153" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()</full_name>
        <docblock line="153">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="153" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="160" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()</full_name>
        <docblock line="160">
          <description>Returns the mime type of the content.</description>
          <long-description></long-description>
          <tag name="return" line="160" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="167" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()</full_name>
        <docblock line="167">
          <description>Returns the charset of the content, or null if not applicable/defined.</description>
          <long-description></long-description>
          <tag name="return" line="167" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="174" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()</full_name>
        <docblock line="174">
          <description>Returns the content's disposition.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="181" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()</full_name>
        <docblock line="181">
          <description>Returns the content-transfer-encoding used for this part.</description>
          <long-description></long-description>
          <tag name="return" line="181" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="70" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()</full_name>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="62" package="MailMimeParser">
        <name>getHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeader()</full_name>
        <docblock line="62">
          <description>Returns the AbstractHeader object for the header with the given $name</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="73" package="MailMimeParser">
        <name>getAllHeadersByName</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getAllHeadersByName()</full_name>
        <docblock line="73">
          <description>Returns an array of headers that match the passed name.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="84" package="MailMimeParser">
        <name>getRawHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getRawHeaders()</full_name>
        <docblock line="84">
          <description>Returns an array of all headers for the mime part with the first element
holding the name, and the second its value.</description>
          <long-description></long-description>
          <tag name="return" line="84" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="98" package="MailMimeParser">
        <name>getRawHeaderIterator</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getRawHeaderIterator()</full_name>
        <docblock line="98">
          <description>Returns an iterator to the headers in this collection.  Each returned
element is an array with its first element set to the header's name, and
the second to its raw value:</description>
          <long-description>[ 'Header-Name', 'Header Value' ]</long-description>
          <tag name="return" line="98" description="" type="\Iterator">
            <type>\Iterator</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="112" package="MailMimeParser">
        <name>getHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeaderValue()</full_name>
        <docblock line="112">
          <description>Returns the string value for the header with the given $name.</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="112" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="112" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="112" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="135" package="MailMimeParser">
        <name>getHeaderParameter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeaderParameter()</full_name>
        <docblock line="135">
          <description>Returns a parameter of the header $header, given the parameter named
$param.</description>
          <long-description>Only headers of type
\ZBateson\MailMimeParser\Header\ParameterHeader have parameters.
Content-Type and Content-Disposition are examples of headers with
parameters. "Charset" is a common parameter of Content-Type.</long-description>
          <tag name="param" line="135" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="" type="string" variable="$param">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="135" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="153" package="MailMimeParser">
        <name>setRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::setRawHeader()</full_name>
        <docblock line="153">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="153" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="153" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="168" package="MailMimeParser">
        <name>addRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::addRawHeader()</full_name>
        <docblock line="168">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="168" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="168" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="179" package="MailMimeParser">
        <name>removeHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::removeHeader()</full_name>
        <docblock line="179">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="179" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="190" package="MailMimeParser">
        <name>removeSingleHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::removeSingleHeader()</full_name>
        <docblock line="190">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="190" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="66" package="MailMimeParser">
        <name>getAllNonFilteredParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllNonFilteredParts()</full_name>
        <docblock line="66">
          <description>Returns all parts, including the current object, and all children below
it (including children of children, etc.</description>
          <long-description>..)</long-description>
          <tag name="return" line="66" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="94" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPart()</full_name>
        <docblock line="94">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MessagePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="94" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="94" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="94" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="113" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllParts()</full_name>
        <docblock line="113">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="113" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="113" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="134" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartCount()</full_name>
        <docblock line="134">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="134" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="134" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="147" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChild()</full_name>
        <docblock line="147">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="147" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="147" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="147" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="164" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildParts()</full_name>
        <docblock line="164">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="164" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="164" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="178" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildCount()</full_name>
        <docblock line="178">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="178" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="178" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="189" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartByMimeType()</full_name>
        <docblock line="189">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="189" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="189" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart|null">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="202" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllPartsByMimeType()</full_name>
        <docblock line="202">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="214" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getCountOfPartsByMimeType()</full_name>
        <docblock line="214">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="214" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="214" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="229" package="MailMimeParser">
        <name>addChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::addChild()</full_name>
        <docblock line="229">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="229" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="param" line="229" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="254" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removePart()</full_name>
        <docblock line="254">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="254" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="254" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="280" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removeAllParts()</full_name>
        <docblock line="280">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description>Note: the current part will not be removed.  Although the function naming
matches getAllParts, which returns the current part, it also doesn't only
remove direct children like getChildParts.  Internally this function uses
getAllParts but the current part is filtered out if returned.</long-description>
          <tag name="param" line="280" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="91" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__destruct()</full_name>
        <docblock line="91">
          <description>Overridden to close streams.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="108" package="MailMimeParser">
        <name>onChange</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::onChange()</full_name>
        <docblock line="108">
          <description>Called when operations change the content of the MessagePart.</description>
          <long-description>The function causes calls to getStream() to return a dynamic
MessagePartStream instead of the read stream for this MessagePart and all
parent MessageParts.</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="130" package="MailMimeParser">
        <name>markAsChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::markAsChanged()</full_name>
        <docblock line="130">
          <description>Marks the part as changed, forcing the part to be rewritten when saved.</description>
          <long-description>Normal operations to a MessagePart automatically mark the part as
changed and markAsChanged() doesn't need to be called in those cases.

The function can be called to indicate an external change that requires
rewriting this part, for instance changing a message from a non-mime
message to a mime one, would require rewriting non-mime children to
insure suitable headers are written.

Internally, the function discards the part's stream, forcing a stream to
be created when calling getStream().</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="142" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::hasContent()</full_name>
        <docblock line="142">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="142" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="205" package="MailMimeParser">
        <name>getResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getResourceHandle()</full_name>
        <docblock line="205">
          <description>Rewrite me</description>
          <long-description></long-description>
          <tag name="return" line="205" description="the resource handle" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="215" package="MailMimeParser">
        <name>getStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getStream()</full_name>
        <docblock line="215">
          <description>Write me</description>
          <long-description></long-description>
          <tag name="return" line="215" description="the resource handle" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="241" package="MailMimeParser">
        <name>setCharsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setCharsetOverride()</full_name>
        <docblock line="241">
          <description>Overrides the default character set used for reading content from content
streams in cases where a user knows the source charset is not what is
specified.</description>
          <long-description>If set, the returned value from MessagePart::getCharset is ignored.

Note that setting an override on a Message and calling getTextStream,
getTextContent, getHtmlStream or getHtmlContent will not be applied to
those sub-parts, unless the text/html part is the Message itself.
Instead, Message:getTextPart() should be called, and setCharsetOverride
called on the returned MessagePart.</long-description>
          <tag name="param" line="241" description="" type="string" variable="$charsetOverride">
            <type>string</type>
          </tag>
          <tag name="param" line="241" description="&lt;p&gt;if true, $charsetOverride is used only if&#10;getCharset returns null.&lt;/p&gt;" type="boolean" variable="$onlyIfNoCharset">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetOverride</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$onlyIfNoCharset</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="267" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentResourceHandle()</full_name>
        <docblock line="267">
          <description>Returns a new resource stream handle for the part's content or null if
the part doesn't have a content section.</description>
          <long-description>The returned resource handle is a resource stream with decoding filters
appended to it.  The attached filters are determined by looking at the
part's Content-Transfer-Encoding and Content-Type headers unless a
charset override is set.  The following transfer encodings are supported:

- quoted-printable
- base64
- x-uuencode

In addition, the charset of the underlying stream is converted to the
passed $charset if the content is known to be text.</long-description>
          <tag name="param" line="267" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="291" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentStream()</full_name>
        <docblock line="291">
          <description>Returns the StreamInterface for the part's content or null if the part
doesn't have a content section.</description>
          <long-description>Because the returned stream may be a shared object if called multiple
times, the function isn't exposed publicly.  If called multiple times
with the same $charset, and the value of the part's
Content-Transfer-Encoding header not having changed, the returned stream
is the same instance and may need to be rewound.

Note that PartStreamFilterManager rewinds the stream before returning it.</long-description>
          <tag name="param" line="291" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="291" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="314" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContent()</full_name>
        <docblock line="314">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description>The returned string is encoded to the passed $charset character encoding,
defaulting to UTF-8.</long-description>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="328" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getParent()</full_name>
        <docblock line="328">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="328" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="341" package="MailMimeParser">
        <name>attachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::attachContentStream()</full_name>
        <docblock line="341">
          <description>Attaches the stream or resource handle for the part's content.  The
stream is closed when another stream is attached, or the MimePart is
destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="341" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="341" description="" type="string" variable="$streamCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamCharset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="359" package="MailMimeParser">
        <name>detachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::detachContentStream()</full_name>
        <docblock line="359">
          <description>Detaches and closes the content stream.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="372" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setContent()</full_name>
        <docblock line="372">
          <description>Sets the content of the part to the passed resource.</description>
          <long-description></long-description>
          <tag name="param" line="372" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="372" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="384" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::save()</full_name>
        <docblock line="384">
          <description>Saves the message/part as to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="384" description="" type="resource|\Psr\Http\Message\StreamInterface" variable="$streamOrHandle">
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamOrHandle</name>
          <default></default>
          <type>resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="401" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__toString()</full_name>
        <docblock line="401">
          <description>Returns the message/part as a string.</description>
          <long-description>Convenience method for calling getStream()-&gt;getContents().</long-description>
          <tag name="return" line="401" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="44" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="348" code="PPC:ERR-50015">Argument $index is missing from the Docblock of removeTextPart</error>
      <error line="380" code="PPC:ERR-50015">Argument $index is missing from the Docblock of removeHtmlPart</error>
    </parse_markers>
    <source>eJztW+tv2zgS/56/gl0Ea6ewk8V92UN6yZ2bJtsCTVsk6eKwTREwEm3rqteJVFLvtv/7zfAlinpY3iZNe1h/SCyTHA5nfvPgkPrHP/NlvrX3+PEWeUwulhEn8yhmBP7ntBAkmxOxZOS3p1QwnqWXpzSKT6OEvaEFZwXJi+w/LBC7MBjH/yuOApZyRpZC5Pt7e1kOT1lZBGw3KxZ7upXvXfNwqh92YXry9PwZDN/bSmnCeE6DzgmfbG2VQP6X8vffY/YcJrl8w4ufn8gf4dul/OmUcU4X7PJcFIwmL1LBijnQVL06CNtBz1mcV4/q6ZwVN9FQAvAoLvXvYoMh+OdpGcUhrnKjUWqdJ1EMCz2lKbRtQEEN27T/CQ1EVqz6hym+9D87wmBthgDjLCQJjCCJmoLcRmJJslxEWUpj1YQ45CRkgKUwShckS0kEP4hVzgzuZnUiCV2RJb1hhKYrkpbJNSAVgFxRm0BLSBgNlgrl7gCkV43h5fVUD2Ei2N21SKelWGYF+Y3SZRQSLQEJ4iCmnBMtM8I+CuAbnjUitv7YIvCRQsAPkLqhBWnDG1nKJ6IISslA1ygrubPSNMrLmKK8DD35KbJSRCnju/rXPfkfzFWAuYLQt5NWgDd4g7XThHSgjGzn7Q3e8BoCyDZ3H1tmqkFMzVH7qWWINhzVWT943Vol3CqGVu6tGzH8r+sVZPA91dKpa6G8BudH5mUaoN7I1RX0BaJlIMaqI3w2FfnEjuyT9qRGf52g673bZFz1GC5en9OGZMkBGGAc9/SryVZ3l713yB92FLAJffb3W8WLn/WilL06BGgpdIjMtjdE5VD1fmzBDC7qif26LSBCTw/bxApi6DBqHPi5YdpHWXrD0oilATpOcGYhEZnyyYSCN0xDSAPAwwGj6HWjFFqpdWvojcDFGGIF+28Z6X5BXEo/XY8GE2jhgqYiAmeF/YRywgGNY3yWExtv5dlWwVQS8Unzsq24e12cq2fMUEwfwzlwiz9HaV5xqT8aZTq1cSPHBBdMzZJRGzRK8SutdWuzZlibcI16XmTJ2GN0Rw6oELqdJDmil916who7Ki+YKItU9p0eSik1yHap+EwO5XKZAgLRXh7DelTIo0L+vIgABCClkH0kY1g8WhKJ5iTNBJlnZRru7rTrBPBAtuU426A5vdwoQ+r1jAsmLoBv7DdWk4G4fvLFaCSkbAPGyP51y5KDPWtT/RsmPD0EhehfQIkvUsAnO1KWeQFJx3hUyXK041tpvxaqxMLTBweBEmTIYKxhCnqVIPehIjsC/YnxIGmprg8uHjlyKZL4+8Loc+D4m8QoivILIWq1cZcINQJ7UIT+GeFQIWDTkAChFoT+NL2muKFReiQ1pKY2qwQBciY6Il03YocBVj0MwezMrsRBbiNAVevlmF9YjcziuE6AuyELVjx+FHFY5til8E5N8n7HzdIchaO0KiKfG3hoIbVOZ5Bc+Drjvuh/qFbCfyCQNKptY5ZOkzIWEY6ZyEceLVIKdJlMXLAT4gj1jFAy5Cr3hTkSJRp402cRzzMeSfmDZDBBIaOKt1GXOTk6ffd+rVZb9OLrVBmzp03V98+Y16wo6Gr8rjYUPyMrvRE5OHT2G/v7Jy9eXhyfXR3/++jl22fHtZHvGwbpIIDiVFc3NC4ZH6uHuSTZktfzuiO1QhrLVh+BziSPxo0WS3R6GHGbkOy09vvxR9MVBKt176h+vEMODg7IKJJOadQg4SwaP5UR7GzovF3LpTfgM+h1/CUuu4JVr9MOZGO/o1i7Eoq1vJ/1tg9CfCHXZmTmpk56w2T8cE7B6YSG3HbTEZdptyw6PbBqMHuPYImOV/gi9PaoQ3I0NcRJGiaWOjzV/fz+/rPjk9nblxdXR89nZ+fHFw2zFhqXNcv2smfPR1djHh2oTXSHZ7YdXVQb9jXLOz2uu/LsfUr3t3DDFW9oKf1/XcUbrodo/Ez3fS4X+N1q3l/GHSEAdW30qjfnSvMDNq++Us8YDRVFoBZByNabfkNflzO0bjGeF5qLSOwSw5KhZlAk6wW6AhJmjKcjYerGLquSyTuGmWoeAjKtpLtCV74hsvIhqPIj5B16kfWhQ2Zo307kGOpAcNN0tyFjqbdhNfV6m1lfvXbMOhWbjt9AyGhR+PcQMVAT9xMxvrriHyZi9FWSvpmAYZl8kICBSr/vgLEGWA8bMERRMuSDwWadYfHf7NexUoT+AJc+/ZUVHCW2BJRgL8BHyOagPhsyTHHstL84dp1lca9OIo4TNnftQVW/qgtXcvQr7onHI5f3kXtshKcXZg2do92Vjpq773GNB6Mw8ulTnbzVZJfkz5loP5LI6vaiT3CMh1Z4fl0oFzIx1LTeAjBWoU5q8DhF0gOtZmlld+xjxIWKEHZi9PiGEswTLVJzniSrDMiSNzGyBcYricm+9UX4er8AUvY6gzUqacAMtopYDZROTDcgd5zeSMKZodVgAQaxj7k6yAd2rtHrkbcXJ9O/g64WtIA+nBtxClosKu+gJ+rwNWqeT/a8rXHw6oWuflfUDnDuZpCGXs3hjORSRs19TufZZ81lSGCfmuKT6ucVa6aH3HoSWZjKCgS/LA7XOtp5J8Q91piQFs5rAweiv4pQXxf8OO8dYb8zfv0F/RboV7Hwu4O+PC/5AuSfsSS7YYNcf21Tpk/+FKAt8hGDvEq8VBxHGZdBAFT64q/ft1dnheR641Pou1GVmhwnfrra1EE5KeNQzeBpiaMZnaC2Hv5NrGnHK/KBsbzKNUkmnVJtNOW1gnSWKnXjLEbnY0ioKMgDVJkZSpowdk52OgxXanQbe77GeWWNecadM507gsAsjg0K+LhvPgAHUv96+ADOHIPmm0NlrfCGAgiV2hnSdETqslxD634MeOMj+gczYONmv8R+pQ7+Ml/PfA0G/k/M1wDli613FoYc8zr/coMppukwXNBbElJhayB47q2SMvhraKkKi03ymmZ8N9lWokXU0YyvMOC7BB3NYXUe24scGob+NQkn+TE8TKr5zM3V2hSY1jnn/Pea28mdAJulIehUZ3fVCsYaPh2LcFh2lrQxakputhEaN0jJh8ExtOBVUHQ/imes5so3T3TdDStsJWeyvNaHIcXpGyqW3xZU8GrESYS1TsPfHUJG292BPOy4VBK7AnMdz/GNG3fKUTHa8Qtu1dQdRTeXObzShF8roq0VN43iFotRvLYvvr7qQemFAzf5RoRX1m2HSqOG2hspBt2MalQ524c1rm5XGYG+ibL+kENbhFjCtigAi4NNb8nV/hcawloV3CReMAo29FV50sb922UULH0y2Ffu7CGkx+jYb1gRzVeairzz1La719fGeZTkYMeFU5Tn9fO3eVRw4H0ZxSEkfq9sgiCniQL5+gpyfbtkMvmopY0yeYGoIOyinDZDCZwhTJaw0OfzVSaYEl0JGc0HhkXvc0lFV2pnXN2injRa9CGiLqEYggWDvBlCFFZaYvcVGz9R8WOac7bUcyywUmIqWL+/aee19yqlFyqGBZw3RXRDg1VHuOngQk43DNjePXvn/OU6C1cukq3A5lXZqo6fAl8mCOTbULIW1ondV1k6PTp7eVLpUFb0tWalRdD4lq442gh27FJxlQndn2YNPh9at5aPYdqVXsBemKzckr0VuOepVQuxzc94dCJ8GxCsKsHzl7qycNa/4VslKGk5oXWAHfNOHAd1zQwGR4i+xpXMtza1GeGbdFmQxSOnoKn3u7UDJH1gBCyXacHiCI+TDTlwazxLmH4xBvYxZIwO0zyCsMJoPmeFfEUHiH+c5ovcuYUK6Odl5QHdtuZuy9wmHXil/dxQcq46fm3oVfP3Q+7CAs7GBXVY261ziMFGlRBYSmpv73oUFI5yeQWYm8q9jrVTIU8I5829cLUDbnAgbw7rzJkluVj54Iat9i1rmsFsjggzL0sBKzNu9wLKTCeytdN9OEyZ27T9aXUCfjVeSPszL31hLFsUETB9tGTBB7C7RQaPy0RbTulcofGoGXtReQMeNLrSq2SAdteLzbaljzWzk2qe1l3WPUAV2LGCbnClt1tN5tYeDtUFsuZwSHZBz7HW2a3ZSQ0RvjXMsey+wW52mDQd+lp8chojsc9b/wMRkcTJ</source>
  </file>
  <file path="Container.php" generated-path="Container.html" hash="8d5b15c40261b2e7ad31a4de3da4a77f" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="HeaderPartFactory">\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</namespace-alias>
    <namespace-alias name="MimeLiteralPartFactory">\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</namespace-alias>
    <namespace-alias name="MessageHelperService">\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</namespace-alias>
    <namespace-alias name="MessageParser">\ZBateson\MailMimeParser\Message\MessageParser</namespace-alias>
    <namespace-alias name="PartBuilderFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</namespace-alias>
    <namespace-alias name="PartFactoryService">\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</namespace-alias>
    <namespace-alias name="PartStreamFilterManagerFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</namespace-alias>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser" line="28" package="MailMimeParser">
      <extends/>
      <name>Container</name>
      <full_name>\ZBateson\MailMimeParser\Container</full_name>
      <docblock line="28">
        <description>Dependency injection container for use by ZBateson\MailMimeParser - because a
more complex one seems like overkill.</description>
        <long-description>Constructs objects and whatever dependencies they require.</long-description>
        <tag name="author" line="28" description="Zaahid Bateson"/>
        <tag name="package" line="28" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="33" package="MailMimeParser">
        <name>$partBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::partBuilderFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="38" package="MailMimeParser">
        <name>$partFactoryService</name>
        <full_name>\ZBateson\MailMimeParser\Container::partFactoryService</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="43" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::partFilterFactory</full_name>
        <default></default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="" type="\ZBateson\MailMimeParser\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="48" package="MailMimeParser">
        <name>$partStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::partStreamFilterManagerFactory</full_name>
        <default></default>
        <docblock line="48">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="48" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="54" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::headerFactory</full_name>
        <default></default>
        <docblock line="54">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="54" description="&lt;p&gt;singleton 'service'&#10;instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="60" package="MailMimeParser">
        <name>$headerPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::headerPartFactory</full_name>
        <default></default>
        <docblock line="60">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="60" description="&lt;p&gt;singleton&#10;'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="66" package="MailMimeParser">
        <name>$mimeLiteralPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::mimeLiteralPartFactory</full_name>
        <default></default>
        <docblock line="66">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="66" description="&lt;p&gt;singleton 'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="72" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Container::consumerService</full_name>
        <default></default>
        <docblock line="72">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="72" description="&lt;p&gt;singleton&#10;'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="77" package="MailMimeParser">
        <name>$messageHelperService</name>
        <full_name>\ZBateson\MailMimeParser\Container::messageHelperService</full_name>
        <default></default>
        <docblock line="77">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="77" description="&lt;p&gt;Used to get MessageHelper singletons&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="82" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::streamFactory</full_name>
        <default></default>
        <docblock line="82">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="82" description="" type="\ZBateson\MailMimeParser\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="87" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Container::__construct()</full_name>
        <docblock line="87">
          <description>Constructs a Container - call singleton() to invoke</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="99" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Container::getInstance()</full_name>
        <docblock line="99">
          <description>Returns a singleton 'service' instance for the given service named $var
with a class type of $class.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;the name of the service&lt;/p&gt;" type="string" variable="$var">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;the name of the class&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="99" description="the service object" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="112" package="MailMimeParser">
        <name>newMessageParser</name>
        <full_name>\ZBateson\MailMimeParser\Container::newMessageParser()</full_name>
        <docblock line="112">
          <description>Constructs and returns a new MessageParser object.</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="\ZBateson\MailMimeParser\Message\MessageParser">
            <type>\ZBateson\MailMimeParser\Message\MessageParser</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="125" package="MailMimeParser">
        <name>getMessageHelperService</name>
        <full_name>\ZBateson\MailMimeParser\Container::getMessageHelperService()</full_name>
        <docblock line="125">
          <description>Returns a MessageHelperService instance.</description>
          <long-description></long-description>
          <tag name="return" line="125" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="143" package="MailMimeParser">
        <name>getPartFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::getPartFilterFactory()</full_name>
        <docblock line="143">
          <description>Returns a PartFilterFactory instance</description>
          <long-description></long-description>
          <tag name="return" line="143" description="" type="\ZBateson\MailMimeParser\PartFilterFactory">
            <type>\ZBateson\MailMimeParser\PartFilterFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="156" package="MailMimeParser">
        <name>getPartFactoryService</name>
        <full_name>\ZBateson\MailMimeParser\Container::getPartFactoryService()</full_name>
        <docblock line="156">
          <description>Returns a PartFactoryService singleton.</description>
          <long-description></long-description>
          <tag name="return" line="156" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="174" package="MailMimeParser">
        <name>getPartBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::getPartBuilderFactory()</full_name>
        <docblock line="174">
          <description>Returns a PartBuilderFactory instance.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="189" package="MailMimeParser">
        <name>getHeaderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::getHeaderFactory()</full_name>
        <docblock line="189">
          <description>Returns the header factory service instance.</description>
          <long-description></long-description>
          <tag name="return" line="189" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="202" package="MailMimeParser">
        <name>getStreamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::getStreamFactory()</full_name>
        <docblock line="202">
          <description>Returns a StreamFactory.</description>
          <long-description></long-description>
          <tag name="return" line="202" description="" type="\ZBateson\MailMimeParser\StreamFactory">
            <type>\ZBateson\MailMimeParser\StreamFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="215" package="MailMimeParser">
        <name>getPartStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::getPartStreamFilterManagerFactory()</full_name>
        <docblock line="215">
          <description>Returns a PartStreamFilterManagerFactory.</description>
          <long-description></long-description>
          <tag name="return" line="215" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="233" package="MailMimeParser">
        <name>getCharsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Container::getCharsetConverter()</full_name>
        <docblock line="233">
          <description>Returns a CharsetConverter.</description>
          <long-description></long-description>
          <tag name="return" line="233" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="243" package="MailMimeParser">
        <name>getHeaderPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::getHeaderPartFactory()</full_name>
        <docblock line="243">
          <description>Returns the part factory service</description>
          <long-description></long-description>
          <tag name="return" line="243" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="256" package="MailMimeParser">
        <name>getMimeLiteralPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Container::getMimeLiteralPartFactory()</full_name>
        <docblock line="256">
          <description>Returns the MimeLiteralPartFactory service</description>
          <long-description></long-description>
          <tag name="return" line="256" description="" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="269" package="MailMimeParser">
        <name>getConsumerService</name>
        <full_name>\ZBateson\MailMimeParser\Container::getConsumerService()</full_name>
        <docblock line="269">
          <description>Returns the header consumer service</description>
          <long-description></long-description>
          <tag name="return" line="269" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="33" code="PPC:ERR-50007">No summary for property $partBuilderFactory</error>
      <error line="38" code="PPC:ERR-50007">No summary for property $partFactoryService</error>
      <error line="43" code="PPC:ERR-50007">No summary for property $partFilterFactory</error>
      <error line="48" code="PPC:ERR-50007">No summary for property $partStreamFilterManagerFactory</error>
      <error line="82" code="PPC:ERR-50007">No summary for property $streamFactory</error>
    </parse_markers>
    <source>eJytWVlv4zYQfvevmIcAtoPEfm+abTfJLlqgLhZN92VhwKBl2mYjSypJOWsU+e9LStRBipedCggkWXNxjo8zzM+/FPtiNL++HsE1/L0nDLYkxSDuBaIc8i3wPYZvD4hjlmfLBSLpghzwF0QZplDQ/B+c8Jlglvy/piTBGcOw57z4aT7PC/GWlzTBs5zu5uorm6/Z5la9zIR6eHh+EuzzUYYOmBUocSq8G41K5vy6/A2jjbg95hkrD72HZ0yPQt1dDHN9+4wSntNTFId44+pZPp7NKn/+g3BMURrNv8CMoR0WctKie63folbbCFD3xr0xLJXRysrq5aEkaazPnELU81nGD4Q8c4rR4TNJhTcXKBM0Dqtqwiec5BSJz2z5lZN0+biX8rlImyOmvEo3VRlPWKTyBmfJCUgmU57kGSR5xhHJRB1scwpS/vrkLJVbWOMESSIkBR5yioWAQ5Hi75BnGBjGBwYpecGQC+0vJE1lWYH8k3nMaZlwBvlaameAsg287oUqQQubxjqCmazXE1D8b0kobgsTlXwvbPyG0J5sQJlY1VySIsakhnopo/9GIK5q2fISvEdEYRhm9Xle3QUOcGEW3sBVYUkISeIUqwfeJ9ZMEb/YKgkijNUIA0Ld+eXT4MtKp7rlOTgFjGS7FHORlGNWu2fcSCMid1Dm9uxeB7yLDbLDYGdZI6w1MNIyDRPfZ50daRs5Fh8GTTw4sPtiO11713v8mJjboNM62z4CX5kQwnPYYa4TdDYxp3+sG5NVt6oSfzmxPpF9IT2wRB2uCfxNUJp2Jk+mck0kO+YvhuPKtehNYFtmNcqvVkkjcTKtKGqIfBss4y/MS5pJtb5UqjYL2VTtyBFnoL6D7H3EAoUnGnGvhO+FrBqg+anAshu7ql5nDU3rQYEz6ADCTKG5klKpkEKbHo5pAGtyKC0GT/Vry0Gr9cGBfJcJ0YlUm5IjZq0jRf78rnwwkRbeKK19p8qLbGFyxUUrevuhWsj9/T1kZZpOezTy0mggw69K3mR619K9tU/K+B7T3aij8CWR2GlpG1mpRuuZ1OKHEVEKnQVv7cC8mSh0a8QT03NK5cDGic1vIhzD7XcyvfHQ6vu6Ui+vqc+XXVlY4aWpC6cHbVxePwlrbTwDd/USzYZTocSz8/S9r6vXZJzh3J6DIyy4/cCsgQ1oN9PApd1VUHagrzncCTFo1My9zMyFQGc3TIQBg6toOne0IKX5YDzoFcd6qaxWf35cfHr+8vHx02oFMxhrY4rOeW7hDCPUbTHOugk11w5n2RLBWjPDljxUMTaOql4uyFc9pjcecq2x8JP6e3w/rwdyjGh3EZeXnn+uOSdURTp6hEE1NNDZk8OKUc7kMGyKSA6To00OQ7EnDNpcdJn/beOrv0JlM1RPK7Bt5p7Y7e2sQS8UJNvqrfHRpr5QaAziKiq6ps7/xtwymUY43TKC+vJdK+jGr6ZbPePE0G0GRFy4Q2jDSXB3qHUuNdWWjcFf9m6w8lZ+7DmGHQV8COlHBDdnDDr4uFuk8BgXv0ecixr+rsFt0lktROCE86zcMU86ndliEobyw6T3zShD2lisrf43YSDtpfhqP7eKA9oeQxhs+6diUYCrMfRAt6+1B7wDb0Yj7+DoKhwB+1Ha/xIL7ymde+KzcnlnPvsSQlOfg6ue++xGvDNIvkPG6L6kOQR8b4hcB5RBYDD7AndgjPPKUEQG5DW4GPqCLaOWNd5G35dpzRURVuuxrIrn2+gHWJIN7w==</source>
  </file>
  <file path="Stream/MessagePartStream.php" generated-path="Stream.MessagePartStream.html" hash="15dd2c6357aac0dce91e4a4e09ac6851" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Psr7">\GuzzleHttp\Psr7</namespace-alias>
    <namespace-alias name="AppendStream">\GuzzleHttp\Psr7\AppendStream</namespace-alias>
    <namespace-alias name="StreamDecoratorTrait">\GuzzleHttp\Psr7\StreamDecoratorTrait</namespace-alias>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="MailMimeParser">\ZBateson\MailMimeParser\MailMimeParser</namespace-alias>
    <namespace-alias name="MessagePart">\ZBateson\MailMimeParser\Message\Part\MessagePart</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\Part\MimePart</namespace-alias>
    <namespace-alias name="ParentHeaderPart">\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="24" package="MailMimeParser">
      <extends/>
      <implements>\Psr\Http\Message\StreamInterface</implements>
      <name>MessagePartStream</name>
      <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream</full_name>
      <docblock line="24">
        <description>Provides a readable stream for a MessagePart.</description>
        <long-description></long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="31" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::streamFactory</full_name>
        <default></default>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="31" description="&lt;p&gt;For creating needed stream decorators.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="36" package="MailMimeParser">
        <name>$part</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::part</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;The part to read from.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="42" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::__construct()</full_name>
        <docblock line="42">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="42" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="42" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="56" package="MailMimeParser">
        <name>getCharsetDecoratorForStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::getCharsetDecoratorForStream()</full_name>
        <docblock line="56">
          <description>Attaches and returns a CharsetStream decorator to the passed $stream.</description>
          <long-description>If the current attached $part doesn't specify a $charset, $stream is
returned as-is.</long-description>
          <tag name="return" line="56" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="84" package="MailMimeParser">
        <name>getTransferEncodingDecoratorForStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::getTransferEncodingDecoratorForStream()</full_name>
        <docblock line="84">
          <description>Attaches and returns a transfer encoding stream decorator to the passed
$stream.</description>
          <long-description>The attached stream decorator is based on the attached part's returned
value from MessagePart::getContentTransferEncoding, using one of the
following stream decorators as appropriate:

o QuotedPrintableStream
o Base64Stream
o UUStream</long-description>
          <tag name="param" line="84" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="84" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="113" package="MailMimeParser">
        <name>writePartContentTo</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::writePartContentTo()</full_name>
        <docblock line="113">
          <description>Writes out the content portion of the attached mime part to the passed
$stream.</description>
          <long-description></long-description>
          <tag name="param" line="113" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="param" line="113" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="133" package="MailMimeParser">
        <name>getBoundaryAndChildStreams</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::getBoundaryAndChildStreams()</full_name>
        <docblock line="133">
          <description>Creates an array of streams based on the attached part's mime boundary
and child streams.</description>
          <long-description>ParentHeaderPart $part passed in because $this-&gt;part is declared as
                 MessagePart</long-description>
          <tag name="return" line="133" description="" type="array&lt;mixed,\Psr\Http\Message\StreamInterface&gt;">
            <type>array&lt;mixed,\Psr\Http\Message\StreamInterface&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="163" package="MailMimeParser">
        <name>getStreamsArray</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::getStreamsArray()</full_name>
        <docblock line="163">
          <description>Returns an array of Psr7 Streams representing the attached part and it's
direct children.</description>
          <long-description></long-description>
          <tag name="return" line="163" description="" type="array&lt;mixed,\Psr\Http\Message\StreamInterface&gt;">
            <type>array&lt;mixed,\Psr\Http\Message\StreamInterface&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="186" package="MailMimeParser">
        <name>createStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\MessagePartStream::createStream()</full_name>
        <docblock line="186">
          <description>Creates the underlying stream lazily when required.</description>
          <long-description></long-description>
          <tag name="return" line="186" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="42" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="56" code="PPC:ERR-50015">Argument $stream is missing from the Docblock of getCharsetDecoratorForStream</error>
      <error line="113" code="PPC:ERR-50014">Name of argument $stream does not match with the DocBlock's name $part in writePartContentTo()</error>
      <error line="113" code="PPC:ERR-50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $stream in writePartContentTo()</error>
      <notice line="113" code="PPC:ERR-50013">Parameter $part could not be found in writePartContentTo()</notice>
      <error line="133" code="PPC:ERR-50015">Argument $part is missing from the Docblock of getBoundaryAndChildStreams</error>
    </parse_markers>
    <source>eJylWFtv2zYUfvevYAujkQs73sOwAc6cNUmbtcA6ZE2KAa0Dg5boWJtMqiSVzF3z33d4kyhSapxWCGJbJL9z+85F+uXXclMOps+fD9BzdLXJBVrnBUHwWWIuEVsjuSHowymWRDC6eIvz4m2+JReYC8JRydnfJJWHcFidf1HkKaGCoI2U5Ww6ZSX8YhVPySHjN1O7KqYrkU3sj0MQj04vX8Lx6YDiLRElTnsFLi4lJ3h7NBhUIOW36vPngrwGWYsLwX8+6rq5OClBicyd69ph1l6SlHEsGb/iOJdmJywv9L63RAh8Q+zWN1QSvgY1za4+Xds/H9hrBcBP6X6o7485Ze4/5gj8I1S+Jjgj/OGjxnj7cY5T8NUOImG5c8HZbZ4RgTCC9QyvgEVCb0VrxuGuZ1XNF1zJDSx+wHiTZ8jK1VRICyyEf8aIRfm2LMgWtBYoCMbgvwGCS1nQHVG9rLVVF0i/xRy1rEHnoEwKN2RObxAlJCOZMyJzaOLQAkz1J6SAhBSAjUMReKZLnmcRpBsxWSaZ9hlac7btRS91gCJQuA3atc0YimwdbPDlaqi2mGoF+YjWFU1lzihaLlNGwZwqlUkMPY7RRhrGREBdQwmlZHLc8gia69NH4SbtgrkzUC3cR2aeSInTjWIXzcBXsuJUMe1so6jpuFGHSDlUaucK0QTGedZhvjG1La24ygKEjQjraZQxIuiBRKIkab7egbBhaqSNHSBUSYdlVILDWExyEUp6YZYjxrYjnd8C/5sY3BBpzauJDPQ0EEmA5DSKwmBVVu5tnD05brCTUROPfI2SJ2Rbyl3iDo5GHppGtKbPO0M8OabkrhWUpHXaQxjHC86/0Uq7EM1mL1+dn7z//Wp59vrk3eWrq9Z+z577+pv1vxXtSKb+70k0yTEVa+h4hKYsU9UhLAttzjm4HuqpzK/5FiFB811hRVxggfR3quAdiJpsDu0WFxXRxcNPzNlMRZkBRai8suq/stqPoUwqIxgltsU7rDUrCnbXZSC4Af5KqEhAVWDqLLCJoT8rKFbZBc+pVOXfEKBZPgWbfvoxvPv+fetOZ12LeP69iRX64zsyrCZER4p1O99PuWET9TmiVVE0S+Iul+kGJbWEMBVT8Cc6+KSdPimd1w9mcWL5QnrTtjN6iTP7KEJdwf1/jjo0Wuk4f7MePk3i6qFx+itPRf+5LItcBto/Rv1/J1WlXf7trnSc/or3GiAAIPIchm41/SYhh+qFPW3IyBpXhYw17yqB6oqLZK1ZXzP+i+cwqCFWSdNADc1RybjOL/vMUFetLVTues7Zu0Q+MLfsVyB6KsCdMkBBugxl+zdUc+Iy6IJhztv4B801OP1kbnI+6rEpK3ehhJhlfzB6VjBVx7/KtiGEqkbZr/Z5CoRgaRusf0IBscFZ/bClkJeSLUUtyfPIWOHHEifHKdhJkqi1x9Q8U8O77t4Ic453ioxG1AM9VZN0xSqaYb5zaGoGSDd54Xp0NNiFD1B2drRzZ07RiqRYPZH4oy60d0ixAo6qcdFBRZfH/Afa3cfrnmcGv+WdWttOaHamTDIYIuk2IeK9c40b1HX061NQoECX5MCyf3K1K8nBGFqBPXUQJkID15MD1lIdxOUWl3EnqI1TwyoYFCIESGaTVjtOzppWHVOpNzEDgHKRSEYPj5xDR7s5+njdbIBnYYJ1W+/EVTPWMEfzY9RtlHZerivHD+jLF6fdBgvr+iSa2H1lPl6DOjoPzY0lqJM8XfAFfRp4436w//nJpI5nF1Tr8FfDEHuvX2FP6GQSiu0Z/EVfR3vnBn2vbCipNtPUyF1yIsC/atKL6ocuFDmUEYeX5Rwy0NQOSK89nwf3ymOr0YlSM+lrTx1O84dOU4w6uqA772+2tybHnMBzQdYC8jje36dMlXBtoSmEo3Gj77V9s9GKi3WWem0SVilvw7RRx71JaGQEZcfUXyokpilRMQ6L37NnYcKfAck6ssoz3dYowm+Ia8Fi7PXIvsprCm2L/o/lrWt3ipEghPBi5z26FfhzXuzQ3YZQAPxUASmzb3s1ERFRvyRzzwghCy0khB75b1+TxiVtEo+cefeD/wHYb8k0</source>
  </file>
  <file path="Stream/StreamFactory.php" generated-path="Stream.StreamFactory.html" hash="b8dc1daf684dbf0db239bb8d6136b4c5" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="Base64Stream">\ZBateson\StreamDecorators\Base64Stream</namespace-alias>
    <namespace-alias name="CharsetStream">\ZBateson\StreamDecorators\CharsetStream</namespace-alias>
    <namespace-alias name="ChunkSplitStream">\ZBateson\StreamDecorators\ChunkSplitStream</namespace-alias>
    <namespace-alias name="SeekingLimitStream">\ZBateson\StreamDecorators\SeekingLimitStream</namespace-alias>
    <namespace-alias name="NonClosingStream">\ZBateson\StreamDecorators\NonClosingStream</namespace-alias>
    <namespace-alias name="PregReplaceFilterStream">\ZBateson\StreamDecorators\PregReplaceFilterStream</namespace-alias>
    <namespace-alias name="QuotedPrintableStream">\ZBateson\StreamDecorators\QuotedPrintableStream</namespace-alias>
    <namespace-alias name="UUStream">\ZBateson\StreamDecorators\UUStream</namespace-alias>
    <namespace-alias name="MessagePart">\ZBateson\MailMimeParser\Message\Part\MessagePart</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="26" package="MailMimeParser">
      <extends/>
      <name>StreamFactory</name>
      <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory</full_name>
      <docblock line="26">
        <description>Factory class for Psr7 stream decorators used in MailMimeParser.</description>
        <long-description></long-description>
        <tag name="author" line="26" description="Zaahid Bateson"/>
        <tag name="package" line="26" description="MailMimeParser"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="36" package="MailMimeParser">
        <name>getLimitedPartStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::getLimitedPartStream()</full_name>
        <docblock line="36">
          <description>Returns a SeekingLimitStream using $part-&gt;getStreamPartLength() and
$part-&gt;getStreamPartStartOffset()</description>
          <long-description></long-description>
          <tag name="param" line="36" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="36" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="return" line="36" description="" type="\ZBateson\StreamDecorators\SeekingLimitStream">
            <type>\ZBateson\StreamDecorators\SeekingLimitStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="53" package="MailMimeParser">
        <name>getLimitedContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::getLimitedContentStream()</full_name>
        <docblock line="53">
          <description>Returns a SeekingLimitStream using $part-&gt;getStreamContentLength() and
$part-&gt;getStreamContentStartOffset()</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="53" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="return" line="53" description="" type="\ZBateson\StreamDecorators\SeekingLimitStream">
            <type>\ZBateson\StreamDecorators\SeekingLimitStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="74" package="MailMimeParser">
        <name>newLimitStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newLimitStream()</full_name>
        <docblock line="74">
          <description>Creates and returns a SeekingLimitedStream.</description>
          <long-description></long-description>
          <tag name="param" line="74" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="74" description="" type="integer" variable="$length">
            <type>integer</type>
          </tag>
          <tag name="param" line="74" description="" type="integer" variable="$start">
            <type>integer</type>
          </tag>
          <tag name="return" line="74" description="" type="\ZBateson\StreamDecorators\SeekingLimitStream">
            <type>\ZBateson\StreamDecorators\SeekingLimitStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$length</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$start</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="90" package="MailMimeParser">
        <name>newNonClosingStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newNonClosingStream()</full_name>
        <docblock line="90">
          <description>Creates a non-closing stream that doesn't close it's internal stream when
closing/detaching.</description>
          <long-description></long-description>
          <tag name="param" line="90" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="90" description="" type="\ZBateson\StreamDecorators\NonClosingStream">
            <type>\ZBateson\StreamDecorators\NonClosingStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="101" package="MailMimeParser">
        <name>newChunkSplitStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newChunkSplitStream()</full_name>
        <docblock line="101">
          <description>Creates a ChunkSplitStream.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="101" description="" type="\ZBateson\StreamDecorators\ChunkSplitStream">
            <type>\ZBateson\StreamDecorators\ChunkSplitStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="113" package="MailMimeParser">
        <name>newBase64Stream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newBase64Stream()</full_name>
        <docblock line="113">
          <description>Creates and returns a Base64Stream with an internal
PregReplaceFilterStream that filters out non-base64 characters.</description>
          <long-description></long-description>
          <tag name="param" line="113" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="113" description="" type="\ZBateson\StreamDecorators\Base64Stream">
            <type>\ZBateson\StreamDecorators\Base64Stream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="126" package="MailMimeParser">
        <name>newQuotedPrintableStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newQuotedPrintableStream()</full_name>
        <docblock line="126">
          <description>Creates and returns a QuotedPrintableStream.</description>
          <long-description></long-description>
          <tag name="param" line="126" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="126" description="" type="\ZBateson\StreamDecorators\QuotedPrintableStream">
            <type>\ZBateson\StreamDecorators\QuotedPrintableStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="137" package="MailMimeParser">
        <name>newUUStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newUUStream()</full_name>
        <docblock line="137">
          <description>Creates and returns a UUStream</description>
          <long-description></long-description>
          <tag name="param" line="137" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="137" description="" type="\ZBateson\StreamDecorators\UUStream">
            <type>\ZBateson\StreamDecorators\UUStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="150" package="MailMimeParser">
        <name>newCharsetStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newCharsetStream()</full_name>
        <docblock line="150">
          <description>Creates and returns a CharsetStream</description>
          <long-description></long-description>
          <tag name="param" line="150" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="150" description="" type="string" variable="$fromCharset">
            <type>string</type>
          </tag>
          <tag name="param" line="150" description="" type="string" variable="$toCharset">
            <type>string</type>
          </tag>
          <tag name="return" line="150" description="" type="\ZBateson\StreamDecorators\CharsetStream">
            <type>\ZBateson\StreamDecorators\CharsetStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$fromCharset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toCharset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="161" package="MailMimeParser">
        <name>newMessagePartStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newMessagePartStream()</full_name>
        <docblock line="161">
          <description>Creates and returns a MessagePartStream</description>
          <long-description></long-description>
          <tag name="param" line="161" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="161" description="" type="\ZBateson\MailMimeParser\Stream\MessagePartStream">
            <type>\ZBateson\MailMimeParser\Stream\MessagePartStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="172" package="MailMimeParser">
        <name>newHeaderStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamFactory::newHeaderStream()</full_name>
        <docblock line="172">
          <description>Creates and returns a HeaderStream</description>
          <long-description></long-description>
          <tag name="param" line="172" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="172" description="" type="\ZBateson\MailMimeParser\Stream\HeaderStream">
            <type>\ZBateson\MailMimeParser\Stream\HeaderStream</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
    </class>
    <source>eJzVV11v0zAUfc+vuEiT2o112QMCwdgYG0IgMRgrexkFyUucxiy1I9thAsR/5yaxQ+omaZryQh7aJD7369yTG+f5izROPX9vz4M9+BQzBRFLKOB/SqQGEYGOKdycEU2V4LMLwpILtqCXRCoqIZXiGw30ARrn9qcJCyhXFGKt02e+L1K8EpkM6IGQc9+sKv9WhRNzcYDh4Wz6Cs19j5MFVSkJWgPOplpSsjjyvAyjXCo5e4ORZhdUKTKnZvUt11RG6OWoQFWuytVXNBCSaCHV7Iwo+viRddmNPY/zBHRfcMbvpmnCeuKnlN4xPn/HFn0t3gt+ngiFRv3wl5LOr2iaICuvWYL89DP7mAlNw0vJuCa3Ce1ndH3diHM6aXuGl9pe5OcbWOU/ZxlLQipREUbDr0mAWfyAICEKxSxkLpMnoIqUIKzSBAwTAuOwHKGSMsl0jMY3hMQsBJNOodLSc1mjieb98gCPIoX82IMrqjPJFRBYbS6Gxhuwkz9hk5O5VVVezjvK5zoe7wLhoXXVhJtq/PkQRSjJ8a4BWvwp4jGI8zDATkmBg6pxWAaq1mVRQUP6BuEX/2l2i08yRBkPNBMcMMsCiqop0swNxi2p7K9GL2sp2cwPk8SOxsk0OeH0vpbHuELlh/W5fLOD4vXIBpLx2D0qTn97/6Dl5wI54b26bqD/QeOrTLfs/U5S0ALH62g7qkxYBGNr9uD4GA53a/4201OrpprU4iTU26BZYTWVlUpzsudZkrSJ8By946jKlWTgriBpWKZwsI168IVg+9O0ovQAQUn2HVP/qyinO61CMnnsm7AtIwS9NWTgzJBKFu77dWyiuVPDhHYnUVU9dMyLqlXABZ8EZTj7otIx0RAKqvhIQ76GezI9Ujm9VHKSWNx9TLl1aFz4IdUkiPHMthg27LGhzCWh8/lvIq0lTkeHWnlfT6K76dqyeNfduuJd/IDiV1z0Ln7pYa9va+Ge4SgkvNKNNW3ZEJa6i4o7CkSmC23eFh4hwD0w7ndwZUtu6xmu47WOHcDpkvnSY5qvtrAwrmbLyP/8lUx+vpzcHE6ezvzZw+Mv/ghvj3rsB5q707ilHjiLTZ2NLtfx2mg0gOBmP8OUa78ctmLDcdJKgMUNqLkyHVbm0rfkNm9hvFnsKiMpFsZpC0ILd70ac6u5dMy4GrjjhVzLZ78Wu3P01T2v97QZ4bXPyy7Sa7DmLXGbn1bCVgzGKzE6SFm1LjYo+8ZwMw7eUBLa+Taw/AYXrZXXsRsVvWS4XOhv7w8P49db</source>
  </file>
  <file path="Stream/HeaderStream.php" generated-path="Stream.HeaderStream.html" hash="cdf7ab16991c495df703c9623fbb9120" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ArrayIterator">\ArrayIterator</namespace-alias>
    <namespace-alias name="Psr7">\GuzzleHttp\Psr7</namespace-alias>
    <namespace-alias name="StreamDecoratorTrait">\GuzzleHttp\Psr7\StreamDecoratorTrait</namespace-alias>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="ParentHeaderPart">\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</namespace-alias>
    <namespace-alias name="MessagePart">\ZBateson\MailMimeParser\Message\Part\MessagePart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="26" package="MailMimeParser">
      <extends/>
      <implements>\Psr\Http\Message\StreamInterface</implements>
      <name>HeaderStream</name>
      <full_name>\ZBateson\MailMimeParser\Stream\HeaderStream</full_name>
      <docblock line="26">
        <description>Psr7 stream decorator implementation providing a readable stream for a part's
headers.</description>
        <long-description>HeaderStream is only used by a MimePart parent.  It can accept any
MessagePart - for non-MimeParts, only type headers are generated based on
available information.</long-description>
        <tag name="author" line="26" description="Zaahid Bateson"/>
        <tag name="package" line="26" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="33" package="MailMimeParser">
        <name>$part</name>
        <full_name>\ZBateson\MailMimeParser\Stream\HeaderStream::part</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;the part to read from.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="38" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Stream\HeaderStream::__construct()</full_name>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="38" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="51" package="MailMimeParser">
        <name>getPartHeadersIterator</name>
        <full_name>\ZBateson\MailMimeParser\Stream\HeaderStream::getPartHeadersIterator()</full_name>
        <docblock line="51">
          <description>Returns a header array for the current part.</description>
          <long-description>If the part is not a MimePart, Content-Type, Content-Disposition and
Content-Transfer-Encoding headers are generated manually.</long-description>
          <tag name="return" line="51" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="70" package="MailMimeParser">
        <name>writePartHeadersTo</name>
        <full_name>\ZBateson\MailMimeParser\Stream\HeaderStream::writePartHeadersTo()</full_name>
        <docblock line="70">
          <description>Writes out headers for $this-&gt;part and follows them with an empty line.</description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="83" package="MailMimeParser">
        <name>createStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\HeaderStream::createStream()</full_name>
        <docblock line="83">
          <description>Creates the underlying stream lazily when required.</description>
          <long-description></long-description>
          <tag name="return" line="83" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="38" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJyVVt9v20YMfvdfwRVGYweRvT4NaJasazOseQhQtAEGNA4CRqKsG6Q77e4Uwyn8v4/3Q4os2Rmmhzh3Ij9+5EfS/vW3uqgny9PTCZzCbSEM5KIk4M8atQWVgy0Ivn9ES0bJ1Q2K8kZU9AW1IQ21Vn9Tahfs7Pw/lCIlaQgKa+v3y6Wq+aQandJC6fUyvjXLR5Ml8bDg8PDx2xW7LycSKzI1pkcDrr5ZTVidTyYNR/lda9xeW9JolT73V382z88lfebwqy9G/3LwMoJcUaq8561GYYMlv155uxsyBtcUTa8lB8mZV7A6Rq514qN1f0jaz4QZaXfxP1zjIXi12jjmYDwdyFrqIKq6pIoDoRVKOj2eRCbkGhDYMsNH1jI65WyOXtUT4wALT8202gWmIV8nv5LlFphyBo9b9otcrQPgcAuAawspSsA0pdoCyq1D6VGHxIeUSiatszkLsHZbUxsfGA/WJJ2KLhi6kEo6MHziIvkUhGSoyufY9Ro2tmD874iFyCDW1bdRWqIxg4TaOhkYSDr5MQF+nDiH+8K/9iK4hwM/od7L0w2IHxarfNEh16paRPOl/2RdLM8JZzatg6pDUL5mmn1Yb7mP0jzy1EDeyNSr/fCQKsnqNqmdjTzn3iUk556p5eFOLj3Ri5aGe7EbkflKttGSlYkasUQ8aF5Nl2vaaNcCPuc2zdb1On8pBzeRVLbXO2fwSXHZpU1uuQFeTlfC1MoInxPKrMXqjDVKk5NO/pCp8s19uHUqlA2W5XbI6YP2+YQsBrKIJ3Z9qeiarCMaWse0q2U2rKXIYdavp2AVUKbE23I49vOem3sil553cslRv+Im+LzEPO/8dkCloUFQ7xaizebw08UFyKYs4e3bEXZrlFwK46SYzY+QkrTZ36mzuz0z99zBSV/Ek7NRuPjavWVi92evQfSUP47UM/pPwFGvvEIwmraWDnsP+r4vQfff0VrNj43TX1rwbgLV2K5x3Sj1G4i7nu/KUm2Mm58KNsIWfAtU1XYLpZA06uqwMQbbDKZh27+6NzaOUK/Pb9XsCMyw8Zk3YVp0jXhsXgANTEOyw16LyMmlZzF7M/0R7O5+vt+9h+707n630iv55qAGQ4y+5bj+n9jWCeAWUyMZvNy6JRK/Fkt8FvyVtClIsrb/NEJTdmyDDL869orcrfiuzqkPHJxGOyTmwLvY/yYJp4d8f/JjmQ8I1gp0Pi6Kpo2QWR+mXTom/noKddpN/gUW8CJY</source>
  </file>
  <file path="Message/Part/MimePart.php" generated-path="Message.Part.MimePart.html" hash="b4e2df08aa07e7ea7c32e6d3dde23f36" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part" line="20" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</extends>
      <name>MimePart</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart</full_name>
      <docblock line="20">
        <description>Represents a single part of a multi-part mime message.</description>
        <long-description>A MimePart object may have any number of child parts, or may be a child
itself with its own parent or parents.

The content of the part can be read from its PartStream resource handle,
accessible via MessagePart::getContentResourceHandle.</long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" refers="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" link="/classes/ZBateson.MailMimeParser.Message.Part.ParentHeaderPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="25" package="MailMimeParser">
        <name>$headerContainer</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::headerContainer</full_name>
        <default></default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="" type="\ZBateson\MailMimeParser\Header\HeaderContainer" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderContainer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="24" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::partFilterFactory</full_name>
        <default></default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;factory object responsible for create PartFilters&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="29" package="MailMimeParser">
        <name>$children</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::children</full_name>
        <default>array()</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;array of child parts&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="28" package="MailMimeParser">
        <name>$partStreamFilterManager</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::partStreamFilterManager</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;manages attached filters to $contentHandle&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="33" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::streamFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;for creating MessagePartStream objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="38" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::parent</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentPart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentPart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="44" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::stream</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;a Psr7 stream containing this part's headers,&#10;content and children&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="49" package="MailMimeParser">
        <name>$contentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::contentStream</full_name>
        <default></default>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;a Psr7 stream containing this part's content&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="55" package="MailMimeParser">
        <name>$charsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::charsetOverride</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="55" description="&lt;p&gt;can be used to set an override for content's charset in cases&#10;where a user wants to set a default other than ISO-8859-1.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$ignoreTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::ignoreTransferEncoding</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true when a user attaches a stream manually, it's&#10;assumed to already be decoded or to have relevant transfer encoding&#10;decorators attached already.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="27" package="MailMimeParser">
        <name>isMultiPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::isMultiPart()</full_name>
        <docblock line="27">
          <description>Returns true if this part's mime type is multipart/*</description>
          <long-description></long-description>
          <tag name="return" line="27" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="41" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::getFilename()</full_name>
        <docblock line="41">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="41" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="58" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::isMime()</full_name>
        <docblock line="58">
          <description>Returns true.</description>
          <long-description></long-description>
          <tag name="return" line="58" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="69" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::isTextPart()</full_name>
        <docblock line="69">
          <description>Returns true if this part's mime type is text/plain, text/html or if the
Content-Type header defines a charset.</description>
          <long-description></long-description>
          <tag name="return" line="69" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="82" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::getContentType()</full_name>
        <docblock line="82">
          <description>Returns the lower-cased, trimmed value of the Content-Type header.</description>
          <long-description>Parses the Content-Type header, defaults to returning text/plain if not
defined.</long-description>
          <tag name="return" line="82" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>'text/plain'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="94" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::getCharset()</full_name>
        <docblock line="94">
          <description>Returns the upper-cased charset of the Content-Type header's charset
parameter if set, ISO-8859-1 if the Content-Type is text/plain or
text/html and the charset parameter isn't set, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="94" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="112" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::getContentDisposition()</full_name>
        <docblock line="112">
          <description>Returns the content's disposition, defaulting to 'inline' if not set.</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>'inline'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="123" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MimePart::getContentTransferEncoding()</full_name>
        <docblock line="123">
          <description>Returns the content-transfer-encoding used for this part, defaulting to
'7bit' if not set.</description>
          <long-description></long-description>
          <tag name="return" line="123" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>'7bit'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="70" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()</full_name>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>getHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeader()</full_name>
        <docblock line="62">
          <description>Returns the AbstractHeader object for the header with the given $name</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="73" package="MailMimeParser">
        <name>getAllHeadersByName</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getAllHeadersByName()</full_name>
        <docblock line="73">
          <description>Returns an array of headers that match the passed name.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="84" package="MailMimeParser">
        <name>getRawHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getRawHeaders()</full_name>
        <docblock line="84">
          <description>Returns an array of all headers for the mime part with the first element
holding the name, and the second its value.</description>
          <long-description></long-description>
          <tag name="return" line="84" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="98" package="MailMimeParser">
        <name>getRawHeaderIterator</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getRawHeaderIterator()</full_name>
        <docblock line="98">
          <description>Returns an iterator to the headers in this collection.  Each returned
element is an array with its first element set to the header's name, and
the second to its raw value:</description>
          <long-description>[ 'Header-Name', 'Header Value' ]</long-description>
          <tag name="return" line="98" description="" type="\Iterator">
            <type>\Iterator</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="112" package="MailMimeParser">
        <name>getHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeaderValue()</full_name>
        <docblock line="112">
          <description>Returns the string value for the header with the given $name.</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="112" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="112" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="112" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="135" package="MailMimeParser">
        <name>getHeaderParameter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeaderParameter()</full_name>
        <docblock line="135">
          <description>Returns a parameter of the header $header, given the parameter named
$param.</description>
          <long-description>Only headers of type
\ZBateson\MailMimeParser\Header\ParameterHeader have parameters.
Content-Type and Content-Disposition are examples of headers with
parameters. "Charset" is a common parameter of Content-Type.</long-description>
          <tag name="param" line="135" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="" type="string" variable="$param">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="135" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>setRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::setRawHeader()</full_name>
        <docblock line="153">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="153" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="153" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="168" package="MailMimeParser">
        <name>addRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::addRawHeader()</full_name>
        <docblock line="168">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="168" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="168" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="179" package="MailMimeParser">
        <name>removeHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::removeHeader()</full_name>
        <docblock line="179">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="179" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="190" package="MailMimeParser">
        <name>removeSingleHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::removeSingleHeader()</full_name>
        <docblock line="190">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="190" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="66" package="MailMimeParser">
        <name>getAllNonFilteredParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllNonFilteredParts()</full_name>
        <docblock line="66">
          <description>Returns all parts, including the current object, and all children below
it (including children of children, etc.</description>
          <long-description>..)</long-description>
          <tag name="return" line="66" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="94" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPart()</full_name>
        <docblock line="94">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MessagePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="94" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="94" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="94" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="113" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllParts()</full_name>
        <docblock line="113">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="113" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="113" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="134" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartCount()</full_name>
        <docblock line="134">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="134" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="134" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="147" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChild()</full_name>
        <docblock line="147">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="147" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="147" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="147" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="164" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildParts()</full_name>
        <docblock line="164">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="164" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="164" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="178" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildCount()</full_name>
        <docblock line="178">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="178" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="178" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="189" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartByMimeType()</full_name>
        <docblock line="189">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="189" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="189" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart|null">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="202" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllPartsByMimeType()</full_name>
        <docblock line="202">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="214" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getCountOfPartsByMimeType()</full_name>
        <docblock line="214">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="214" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="214" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="229" package="MailMimeParser">
        <name>addChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::addChild()</full_name>
        <docblock line="229">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="229" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="param" line="229" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="254" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removePart()</full_name>
        <docblock line="254">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="254" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="254" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="280" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removeAllParts()</full_name>
        <docblock line="280">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description>Note: the current part will not be removed.  Although the function naming
matches getAllParts, which returns the current part, it also doesn't only
remove direct children like getChildParts.  Internally this function uses
getAllParts but the current part is filtered out if returned.</long-description>
          <tag name="param" line="280" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="91" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__destruct()</full_name>
        <docblock line="91">
          <description>Overridden to close streams.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="108" package="MailMimeParser">
        <name>onChange</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::onChange()</full_name>
        <docblock line="108">
          <description>Called when operations change the content of the MessagePart.</description>
          <long-description>The function causes calls to getStream() to return a dynamic
MessagePartStream instead of the read stream for this MessagePart and all
parent MessageParts.</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="130" package="MailMimeParser">
        <name>markAsChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::markAsChanged()</full_name>
        <docblock line="130">
          <description>Marks the part as changed, forcing the part to be rewritten when saved.</description>
          <long-description>Normal operations to a MessagePart automatically mark the part as
changed and markAsChanged() doesn't need to be called in those cases.

The function can be called to indicate an external change that requires
rewriting this part, for instance changing a message from a non-mime
message to a mime one, would require rewriting non-mime children to
insure suitable headers are written.

Internally, the function discards the part's stream, forcing a stream to
be created when calling getStream().</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="142" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::hasContent()</full_name>
        <docblock line="142">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="142" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()</full_name>
        <docblock line="153">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="153" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="160" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()</full_name>
        <docblock line="160">
          <description>Returns the mime type of the content.</description>
          <long-description></long-description>
          <tag name="return" line="160" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="167" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()</full_name>
        <docblock line="167">
          <description>Returns the charset of the content, or null if not applicable/defined.</description>
          <long-description></long-description>
          <tag name="return" line="167" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="174" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()</full_name>
        <docblock line="174">
          <description>Returns the content's disposition.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="181" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()</full_name>
        <docblock line="181">
          <description>Returns the content-transfer-encoding used for this part.</description>
          <long-description></long-description>
          <tag name="return" line="181" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="188" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getFilename()</full_name>
        <docblock line="188">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="198" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()</full_name>
        <docblock line="198">
          <description>Returns true if the current part is a mime part.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="205" package="MailMimeParser">
        <name>getResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getResourceHandle()</full_name>
        <docblock line="205">
          <description>Rewrite me</description>
          <long-description></long-description>
          <tag name="return" line="205" description="the resource handle" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="215" package="MailMimeParser">
        <name>getStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getStream()</full_name>
        <docblock line="215">
          <description>Write me</description>
          <long-description></long-description>
          <tag name="return" line="215" description="the resource handle" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="241" package="MailMimeParser">
        <name>setCharsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setCharsetOverride()</full_name>
        <docblock line="241">
          <description>Overrides the default character set used for reading content from content
streams in cases where a user knows the source charset is not what is
specified.</description>
          <long-description>If set, the returned value from MessagePart::getCharset is ignored.

Note that setting an override on a Message and calling getTextStream,
getTextContent, getHtmlStream or getHtmlContent will not be applied to
those sub-parts, unless the text/html part is the Message itself.
Instead, Message:getTextPart() should be called, and setCharsetOverride
called on the returned MessagePart.</long-description>
          <tag name="param" line="241" description="" type="string" variable="$charsetOverride">
            <type>string</type>
          </tag>
          <tag name="param" line="241" description="&lt;p&gt;if true, $charsetOverride is used only if&#10;getCharset returns null.&lt;/p&gt;" type="boolean" variable="$onlyIfNoCharset">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetOverride</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$onlyIfNoCharset</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="267" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentResourceHandle()</full_name>
        <docblock line="267">
          <description>Returns a new resource stream handle for the part's content or null if
the part doesn't have a content section.</description>
          <long-description>The returned resource handle is a resource stream with decoding filters
appended to it.  The attached filters are determined by looking at the
part's Content-Transfer-Encoding and Content-Type headers unless a
charset override is set.  The following transfer encodings are supported:

- quoted-printable
- base64
- x-uuencode

In addition, the charset of the underlying stream is converted to the
passed $charset if the content is known to be text.</long-description>
          <tag name="param" line="267" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="291" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentStream()</full_name>
        <docblock line="291">
          <description>Returns the StreamInterface for the part's content or null if the part
doesn't have a content section.</description>
          <long-description>Because the returned stream may be a shared object if called multiple
times, the function isn't exposed publicly.  If called multiple times
with the same $charset, and the value of the part's
Content-Transfer-Encoding header not having changed, the returned stream
is the same instance and may need to be rewound.

Note that PartStreamFilterManager rewinds the stream before returning it.</long-description>
          <tag name="param" line="291" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="291" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="314" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContent()</full_name>
        <docblock line="314">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description>The returned string is encoded to the passed $charset character encoding,
defaulting to UTF-8.</long-description>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="328" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getParent()</full_name>
        <docblock line="328">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="328" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="341" package="MailMimeParser">
        <name>attachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::attachContentStream()</full_name>
        <docblock line="341">
          <description>Attaches the stream or resource handle for the part's content.  The
stream is closed when another stream is attached, or the MimePart is
destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="341" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="341" description="" type="string" variable="$streamCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamCharset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="359" package="MailMimeParser">
        <name>detachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::detachContentStream()</full_name>
        <docblock line="359">
          <description>Detaches and closes the content stream.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="372" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setContent()</full_name>
        <docblock line="372">
          <description>Sets the content of the part to the passed resource.</description>
          <long-description></long-description>
          <tag name="param" line="372" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="372" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="384" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::save()</full_name>
        <docblock line="384">
          <description>Saves the message/part as to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="384" description="" type="resource|\Psr\Http\Message\StreamInterface" variable="$streamOrHandle">
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamOrHandle</name>
          <default></default>
          <type>resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="401" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__toString()</full_name>
        <docblock line="401">
          <description>Returns the message/part as a string.</description>
          <long-description>Convenience method for calling getStream()-&gt;getContents().</long-description>
          <tag name="return" line="401" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="82" code="PPC:ERR-50015">Argument $default is missing from the Docblock of getContentType</error>
      <error line="112" code="PPC:ERR-50015">Argument $default is missing from the Docblock of getContentDisposition</error>
      <error line="123" code="PPC:ERR-50015">Argument $default is missing from the Docblock of getContentTransferEncoding</error>
    </parse_markers>
    <source>eJytVt9v2zYQfvdfcQMMSM7sCH0Y1iZz13Xd0D4EKxpjD22KgZZoi4NECiQVN1jTv313FKlfjQwHrR4SWTx+d/fd91H65dcqr2bJ2dkMzmCTCwM7UXDA/xXTFtQObM7h/UtmuVHy5oqJ4kqU/C3ThmuotPqXp/YcN9P+F4VIuTQccmuriyRRFf5StU75udL7xK+aZGuylf9xjunh5fUr3J7MJCu5qVg6mfDmihvD9vwGf9rLWaj7Ha80N1xaAwyMkHvsIJTPoKwLK1bud4lIUDYYoejfwONj+Ja6gZLdQc5uOTB5B7Iut9gpIqW5KDKHa5agtAvbYlCzQFDCGl7s4CBsTvegDpLisTCKb+5MyLtBXlMlrVttaHY1pkwSrOYsg51WpUOi8q4tPitxoaEUS5RZwZeExdIUmxJb7PtWMPAs0aaLiz23vzdp3vmdr93GdmistjmW956xXGTgiXfzSAtmTEcP/4QomSsG0V5jgVzTwuy/GeDlhkEXDcTWWhqwukYtUXNeUJFpZmDvKicyNxtaSMLeAPFCOwzYKlX4Z4n7X9Vb1A7saplaoSSiXBEIFRIvXERTjispQTqNRUWAVQ5qiZrl+39KZtMctC/zCeyQACq23emzx7RnAXG3KW5D6Iq+dB3cHH78IqLlYH1Ona+edzPYYOO+TLoWi0t3f+/+TtHInCnJHU2hQSrIrJKOx4zvhOSZ06WsiwIUBumDMDTmBmxMrLEaeTlKLZb9p0/8FbUepWuw1QNGW65HPPn2V6+EqZQRBD+iKgo9TlJ4NMMgC7E8gnHrDn7wuDeKUyZBGplk9BSpimkqCfvUGo6ayqJRk6pgQi6b+9yWBSnDbeIBr08W5I5bryPjDjU6ce23NLvB3A/aMpir544mW7yAH9Zrp+DTxoFOKNSB6xXanOSPmi5LnsEtK5Akf6w+0OhXbbn3i5kKXxIxDJ1u6BxpyneHSss0cSuVDXDej99ovv6ZMfcVwBqiLm00qSVRxpjEKkdPPDbR38RPPPILhByL044lIquuqsB+kMwR2lGpPihgVcHNRCA+X8Kb679WT5/+9Gz1xOt1CDTQN4o6AHVCx7eb2xbK6aUwMrJNlu99TrYCHs1jHqpYHznIxnOI/KbIj4Eu5CLuwIJJepmabJ1iBhkHb5/LwZ4GuL9vPZQYfP4MEwHEdzQuoifDqBtmNMx6P3sgnFrqwu6nRe1U19Jxulp9FyjDrHsPteb2nwmRkAWaN/KWhmOn4KN83Hv3Dezs801Y+XQXD96tPTM/kp2V1UyaHdqay1RlxEpN9m4+Pfw7Z0RagIt+3gr7/Znb+Ir+8AUN6HMpx+QZyyxizV0vBX7TZhj6YfjB8WlV1zjm9XN/S+Djz4botJDm+TiuDfvYqXpuG28+4nAO4wjdPzBcusjIwtAh1Ov6g8v3cTE2afv5No484j8XEMR0P/sfTJo04g==</source>
  </file>
  <file path="Message/Part/UUEncodedPart.php" generated-path="Message.Part.UUEncodedPart.html" hash="94c181a8b0415e1e7e564a548b0be868" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part" line="27" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\NonMimePart</extends>
      <name>UUEncodedPart</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart</full_name>
      <docblock line="27">
        <description>A specialized NonMimePart representing a uuencoded part.</description>
        <long-description>This represents part of a message that is not a mime message.  A multi-part
mime message may have a part with a Content-Transfer-Encoding of x-uuencode
but that would be represented by a normal MimePart.

UUEncodedPart extends NonMimePart to return a Content-Transfer-Encoding of
x-uuencode, a Content-Type of application-octet-stream, and a
Content-Disposition of 'attachment'.  It also expects a mode and filename to
initialize it, and adds 'filename' parts to the Content-Disposition and
'name' to Content-Type.</long-description>
        <tag name="author" line="27" description="Zaahid Bateson"/>
        <tag name="package" line="27" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\NonMimePart" refers="\ZBateson\MailMimeParser\Message\Part\NonMimePart" link="/classes/ZBateson.MailMimeParser.Message.Part.NonMimePart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="32" package="MailMimeParser">
        <name>$mode</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::mode</full_name>
        <default>null</default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the unix file permission&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="37" package="MailMimeParser">
        <name>$filename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::filename</full_name>
        <default>null</default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="37" description="&lt;p&gt;the name of the file in the uuencoding 'header'.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="28" package="MailMimeParser">
        <name>$partStreamFilterManager</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::partStreamFilterManager</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;manages attached filters to $contentHandle&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="33" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::streamFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;for creating MessagePartStream objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="38" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::parent</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentPart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentPart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="44" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::stream</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;a Psr7 stream containing this part's headers,&#10;content and children&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="49" package="MailMimeParser">
        <name>$contentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::contentStream</full_name>
        <default></default>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;a Psr7 stream containing this part's content&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="55" package="MailMimeParser">
        <name>$charsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::charsetOverride</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="55" description="&lt;p&gt;can be used to set an override for content's charset in cases&#10;where a user wants to set a default other than ISO-8859-1.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$ignoreTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::ignoreTransferEncoding</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true when a user attaches a stream manually, it's&#10;assumed to already be decoded or to have relevant transfer encoding&#10;decorators attached already.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="46" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::__construct()</full_name>
        <docblock line="46">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="46" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="46" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="63" package="MailMimeParser">
        <name>getUnixFileMode</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::getUnixFileMode()</full_name>
        <docblock line="63">
          <description>Returns the file mode included in the uuencoded header for this part.</description>
          <long-description></long-description>
          <tag name="return" line="63" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="73" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::getFilename()</full_name>
        <docblock line="73">
          <description>Returns the filename included in the uuencoded header for this part.</description>
          <long-description></long-description>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="83" package="MailMimeParser">
        <name>setUnixFileMode</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::setUnixFileMode()</full_name>
        <docblock line="83">
          <description>Sets the unix file mode for the uuencoded header.</description>
          <long-description></long-description>
          <tag name="param" line="83" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="94" package="MailMimeParser">
        <name>setFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::setFilename()</full_name>
        <docblock line="94">
          <description>Sets the filename included in the uuencoded header.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="string" variable="$filename">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="105" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::isTextPart()</full_name>
        <docblock line="105">
          <description>Returns false.</description>
          <long-description></long-description>
          <tag name="return" line="105" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\NonMimePart::isTextPart()" refers="\ZBateson\MailMimeParser\Message\Part\NonMimePart::isTextPart()" link="/classes/ZBateson.MailMimeParser.Message.Part.NonMimePart.html#method_isTextPart"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="115" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::getContentType()</full_name>
        <docblock line="115">
          <description>Returns text/plain</description>
          <long-description></long-description>
          <tag name="return" line="115" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentType()" refers="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentType()" link="/classes/ZBateson.MailMimeParser.Message.Part.NonMimePart.html#method_getContentType"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="125" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::getCharset()</full_name>
        <docblock line="125">
          <description>Returns null</description>
          <long-description></long-description>
          <tag name="return" line="125" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getCharset()" refers="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getCharset()" link="/classes/ZBateson.MailMimeParser.Message.Part.NonMimePart.html#method_getCharset"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="135" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::getContentDisposition()</full_name>
        <docblock line="135">
          <description>Returns 'inline'.</description>
          <long-description></long-description>
          <tag name="return" line="135" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentDisposition()" refers="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentDisposition()" link="/classes/ZBateson.MailMimeParser.Message.Part.NonMimePart.html#method_getContentDisposition"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="145" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\UUEncodedPart::getContentTransferEncoding()</full_name>
        <docblock line="145">
          <description>Returns 'x-uuencode'.</description>
          <long-description></long-description>
          <tag name="return" line="145" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentTransferEncoding()" refers="\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentTransferEncoding()" link="/classes/ZBateson.MailMimeParser.Message.Part.NonMimePart.html#method_getContentTransferEncoding"/>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()</full_name>
        <docblock line="153">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="153" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="160" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()</full_name>
        <docblock line="160">
          <description>Returns the mime type of the content.</description>
          <long-description></long-description>
          <tag name="return" line="160" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="167" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()</full_name>
        <docblock line="167">
          <description>Returns the charset of the content, or null if not applicable/defined.</description>
          <long-description></long-description>
          <tag name="return" line="167" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="174" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()</full_name>
        <docblock line="174">
          <description>Returns the content's disposition.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="181" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()</full_name>
        <docblock line="181">
          <description>Returns the content-transfer-encoding used for this part.</description>
          <long-description></long-description>
          <tag name="return" line="181" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="198" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()</full_name>
        <docblock line="198">
          <description>Returns true if the current part is a mime part.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="70" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()</full_name>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="91" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__destruct()</full_name>
        <docblock line="91">
          <description>Overridden to close streams.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="108" package="MailMimeParser">
        <name>onChange</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::onChange()</full_name>
        <docblock line="108">
          <description>Called when operations change the content of the MessagePart.</description>
          <long-description>The function causes calls to getStream() to return a dynamic
MessagePartStream instead of the read stream for this MessagePart and all
parent MessageParts.</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="130" package="MailMimeParser">
        <name>markAsChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::markAsChanged()</full_name>
        <docblock line="130">
          <description>Marks the part as changed, forcing the part to be rewritten when saved.</description>
          <long-description>Normal operations to a MessagePart automatically mark the part as
changed and markAsChanged() doesn't need to be called in those cases.

The function can be called to indicate an external change that requires
rewriting this part, for instance changing a message from a non-mime
message to a mime one, would require rewriting non-mime children to
insure suitable headers are written.

Internally, the function discards the part's stream, forcing a stream to
be created when calling getStream().</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="142" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::hasContent()</full_name>
        <docblock line="142">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="142" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="188" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getFilename()</full_name>
        <docblock line="188">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="205" package="MailMimeParser">
        <name>getResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getResourceHandle()</full_name>
        <docblock line="205">
          <description>Rewrite me</description>
          <long-description></long-description>
          <tag name="return" line="205" description="the resource handle" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="215" package="MailMimeParser">
        <name>getStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getStream()</full_name>
        <docblock line="215">
          <description>Write me</description>
          <long-description></long-description>
          <tag name="return" line="215" description="the resource handle" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="241" package="MailMimeParser">
        <name>setCharsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setCharsetOverride()</full_name>
        <docblock line="241">
          <description>Overrides the default character set used for reading content from content
streams in cases where a user knows the source charset is not what is
specified.</description>
          <long-description>If set, the returned value from MessagePart::getCharset is ignored.

Note that setting an override on a Message and calling getTextStream,
getTextContent, getHtmlStream or getHtmlContent will not be applied to
those sub-parts, unless the text/html part is the Message itself.
Instead, Message:getTextPart() should be called, and setCharsetOverride
called on the returned MessagePart.</long-description>
          <tag name="param" line="241" description="" type="string" variable="$charsetOverride">
            <type>string</type>
          </tag>
          <tag name="param" line="241" description="&lt;p&gt;if true, $charsetOverride is used only if&#10;getCharset returns null.&lt;/p&gt;" type="boolean" variable="$onlyIfNoCharset">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetOverride</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$onlyIfNoCharset</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="267" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentResourceHandle()</full_name>
        <docblock line="267">
          <description>Returns a new resource stream handle for the part's content or null if
the part doesn't have a content section.</description>
          <long-description>The returned resource handle is a resource stream with decoding filters
appended to it.  The attached filters are determined by looking at the
part's Content-Transfer-Encoding and Content-Type headers unless a
charset override is set.  The following transfer encodings are supported:

- quoted-printable
- base64
- x-uuencode

In addition, the charset of the underlying stream is converted to the
passed $charset if the content is known to be text.</long-description>
          <tag name="param" line="267" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="291" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentStream()</full_name>
        <docblock line="291">
          <description>Returns the StreamInterface for the part's content or null if the part
doesn't have a content section.</description>
          <long-description>Because the returned stream may be a shared object if called multiple
times, the function isn't exposed publicly.  If called multiple times
with the same $charset, and the value of the part's
Content-Transfer-Encoding header not having changed, the returned stream
is the same instance and may need to be rewound.

Note that PartStreamFilterManager rewinds the stream before returning it.</long-description>
          <tag name="param" line="291" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="291" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="314" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContent()</full_name>
        <docblock line="314">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description>The returned string is encoded to the passed $charset character encoding,
defaulting to UTF-8.</long-description>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="328" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getParent()</full_name>
        <docblock line="328">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="328" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="341" package="MailMimeParser">
        <name>attachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::attachContentStream()</full_name>
        <docblock line="341">
          <description>Attaches the stream or resource handle for the part's content.  The
stream is closed when another stream is attached, or the MimePart is
destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="341" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="341" description="" type="string" variable="$streamCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamCharset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="359" package="MailMimeParser">
        <name>detachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::detachContentStream()</full_name>
        <docblock line="359">
          <description>Detaches and closes the content stream.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="372" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setContent()</full_name>
        <docblock line="372">
          <description>Sets the content of the part to the passed resource.</description>
          <long-description></long-description>
          <tag name="param" line="372" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="372" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="384" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::save()</full_name>
        <docblock line="384">
          <description>Saves the message/part as to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="384" description="" type="resource|\Psr\Http\Message\StreamInterface" variable="$streamOrHandle">
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamOrHandle</name>
          <default></default>
          <type>resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="401" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__toString()</full_name>
        <docblock line="401">
          <description>Returns the message/part as a string.</description>
          <long-description>Convenience method for calling getStream()-&gt;getContents().</long-description>
          <tag name="return" line="401" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="46" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJytVslu2zAQvfsreDCgJIise9I1XdAeXARNcikCFLQ0tlhQpECO0rhF/71DilqsWLK7+GLLnHkz780iPntZ5uUsOTubsTN2mwvL1kICo++SG2R6zTAH9uWKI1it7pdcyKUo4JobC4aVRn+DFBfk7PxfSZGCssByxPIiSXRJT7oyKSy02STh1CYrm8XhYUHh2dXNW3JPZooXYEuejga8X4K1fAP39IiXs1lFsa6tuf9A8dqzGzTAi48KwawJ69JbjQHWxuHrPU9Rmy0BB0FeM1tCKrgUPyBjn7QKnsgMlAYsKBRqwzirKlCpzsjIyeb0YK2grWmnKWdFnSypy9GprTS6fwm+OVowCl9UEkXs3Bxc/5gVfMty/gDk5mG/C8zp9xtNxBXGt4YruwYTv3OJuSwp7mPcJOrgVhXW8b/rSmZsBV2qRGS1JTSlTcEla2i3xO7u3tV8vRjwSCEzuyMQakLDyqgDOTm0Lq3zvvW2BC9WWVKzcBRaxTpFwNj6apGtyhh3AI3LW2FLbYUzdZ4RR+RpXtBRRHJ+JIml1ZQuFZWqQXpTSI/imt51H6Xt8IQiDF91JjDEyYhg1NhFXnPrWLr52BefnBxUVJuTYZ9XK+QrXmGuDfvCeS4yFrrUT0MqubWHlZ79nDH6+I51H8J84IYooE+tUuKxnukSTCGsFQ7eGyb+m2YYSQ6q+NzL8ZypSspLf7YXmdR3pXPgXrKwI+q9oeqgdTmdWZQDz8BEi7GgrfSTgUluXjDHN4yqkDTfS65oFAybl/sPBu47U87mtv+4J9JVJWTWoIeHvYjtrmkwD1mldSvc9I2DMNWKmp2tK5X6Lvr6lWwJtErxpDakz5/KcN56TilwvoO/j/wQ5wnvUMMJux3mwdxbn7KfrReFJJuLiz75UW5DFs3z+SDY6WWLP0fay/GL0O40KQ9cnvSJxi82gNeG3l8GtyeRM4xOnwL0WnfCu90ZAeDX3g7/7Jel7UbJZydUKiv3WtkdLPqjHiu2pt3hkmneOzVY239hBRPFyS6jfO9oT5CwsCT0k1Nv1RUkwPR0+xMqXqL/xKRePofIvA9RDxBpkmvIDIncANrBEvVVqVN9yqHJejD+bhX73TqZth3UwHsM89/t3HlXid6hVm9yrjZE/iCvo6szwiy8CtodfohgW5fWY4Rgf7J2qzRJdKob1/Tuh9G+WmktJ7MX9pZevm4zjjWVD3DUXBBQUkou1Fg2x3V5uFC4+8RYTlHv8pT0L0/RMYm2y/nvU8zdNXtUsu6FP51IJJQUCqJ/XAtBsN4tbVy37uZ4VILdFfY/JdnclZur8mimvchNpr9mvwEp4zbA</source>
  </file>
  <file path="Message/Part/Factory/MimePartFactory.php" generated-path="Message.Part.Factory.MimePartFactory.html" hash="7151fbd5f02a18a4de770241c3df4ec0" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <namespace-alias name="PartFilterFactory">\ZBateson\MailMimeParser\Message\PartFilterFactory</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\Part\MimePart</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="20" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</extends>
      <name>MimePartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</full_name>
      <docblock line="20">
        <description>Responsible for creating MimePart instances.</description>
        <long-description></long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MessagePartFactory.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="25" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::partFilterFactory</full_name>
        <default></default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;an instance used for creating MimePart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="27" package="MailMimeParser">
        <name>$partStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::partStreamFilterManagerFactory</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;responsible for creating&#10;     PartStreamFilterManager instances&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="32" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::streamFactory</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the StreamFactory instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="38" package="MailMimeParser">
        <name>$instances</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::instances</full_name>
        <default>null</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="static" line="38" description="MessagePartFactory[] cached instances of MessagePartFactory&#10;     sub-classes"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::__construct()</full_name>
        <docblock line="34">
          <description>Initializes dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="34" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="34" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::__construct()" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::__construct()" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MessagePartFactory.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="50" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::newInstance()</full_name>
        <docblock line="50">
          <description>Constructs a new MimePart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="50" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="50" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="50" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MessagePartFactory.html#method_newInstance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="46" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::__construct()</full_name>
        <docblock line="46">
          <description>Initializes class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="59" package="MailMimeParser">
        <name>setCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::setCachedInstance()</full_name>
        <docblock line="59">
          <description>Sets a cached singleton instance.</description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="$instance">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$instance</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="74" package="MailMimeParser">
        <name>getCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getCachedInstance()</full_name>
        <docblock line="74">
          <description>Returns a cached singleton instance if one exists, or null if one hasn't
been created yet.</description>
          <long-description></long-description>
          <tag name="return" line="74" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="92" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getInstance()</full_name>
        <docblock line="92">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$mhs">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
          <tag name="return" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mhs</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="119" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()</full_name>
        <docblock line="119">
          <description>Constructs a new MessagePart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="119" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
    </class>
    <source>eJyVVE1v2kAQvftXTCUOgAy+Q0MrUkVFKlLU9BRZihZ7DFuZtbU77lfEf+9gL4uNbRJ8iLPeN/PezJvh46d8l3vBeOzBGH7spIFEpgj8zoUmyBKgHcLzUhCaTIVrIdO13OOj0AY15Dr7iRFNOfgY/zmVESqDsCPKZ0GQ5XzKCh3hNNPbwN6aYGPiiT1MmR6WT184PPCU2KPJRdRLGK7RGLHFkI8UPoiIMv137nkFcz4aHX5lXod5Io1iv1KEOuGc8xLVl7gC25dLfC2iLuVBpsxyc1hov9MNIcc/y0KmMWou3Br3nduWKSM3bF2SaYi4CpJqCycCkMqQUBEa55UoaMfQZyF2MgZLXdoQpcIYF2qrAvxDqGL+XqmpXXmvHvBTajk+nPyX0NBqDAjldAAXHPdozTbHoTI2WVC+edKIP3LMIG83/JJ/pSRJkcp/aCBGnsIYVSTL4kuA08m5xB4arsPAxMkF4CjLgkritVDcAlfXIDddEc3iB3nSrKjY8A5AUqiIZKbg5SViC0kXEQ0rID9tZb67e4eoJrhbzwheHYq1o6LZrK6lJC2zjeYOOCD+qZgsWlbA3TFvhTu0bLk/JTUgQOHvS8t5QGLQSIVWBiSdwjpaazegGgZ76DTVrT8M9tXgVt8duKKD8KZ9vWokF7ayUz7s0+q/IY/7qIo0HZUEZ3/KFA1EzRK2jDe071omMLzg+HBnWWoMbRZrtalP4mSxRfom95IX8jyGF/n9RsW14elU+xbNfR3/XqaD+8/aXB+6YVPQeaL7l2qyqJs78rsyNCroRLS2xm+3/zQnfcb4V7rprkanRTx4/wHMS4jF</source>
  </file>
  <file path="Message/Part/Factory/PartFactoryService.php" generated-path="Message.Part.Factory.PartFactoryService.html" hash="73439b0b253846a346765239c3e7f672" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <namespace-alias name="MessageHelperService">\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</namespace-alias>
    <namespace-alias name="MessageFactory">\ZBateson\MailMimeParser\Message\MessageFactory</namespace-alias>
    <namespace-alias name="PartFilterFactory">\ZBateson\MailMimeParser\Message\PartFilterFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="20" package="MailMimeParser">
      <extends/>
      <name>PartFactoryService</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</full_name>
      <docblock line="20">
        <description>Responsible for creating singleton instances of MessagePartFactory and its
subclasses.</description>
        <long-description></long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="25" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::partFilterFactory</full_name>
        <default></default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;the PartFilterFactory instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="31" package="MailMimeParser">
        <name>$partStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::partStreamFilterManagerFactory</full_name>
        <default></default>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="31" description="&lt;p&gt;the PartStreamFilterManagerFactory&#10;     instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="36" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::streamFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the StreamFactory instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="41" package="MailMimeParser">
        <name>$messageHelperService</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::messageHelperService</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the MessageHelperService instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="49" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::__construct()</full_name>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$partFilterFactory">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="49" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="49" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$partStreamFilterManagerFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="49" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$messageHelperService">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partFilterFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManagerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageHelperService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="66" package="MailMimeParser">
        <name>getMessageFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::getMessageFactory()</full_name>
        <docblock line="66">
          <description>Returns the MessageFactory singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Message\MessageFactory">
            <type>\ZBateson\MailMimeParser\Message\MessageFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="81" package="MailMimeParser">
        <name>getMimePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::getMimePartFactory()</full_name>
        <docblock line="81">
          <description>Returns the MimePartFactory singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="81" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="95" package="MailMimeParser">
        <name>getNonMimePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::getNonMimePartFactory()</full_name>
        <docblock line="95">
          <description>Returns the NonMimePartFactory singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\NonMimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\NonMimePartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="108" package="MailMimeParser">
        <name>getUUEncodedPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService::getUUEncodedPartFactory()</full_name>
        <docblock line="108">
          <description>Returns the UUEncodedPartFactory singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="49" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJzNVcFu2zAMvfsreOihDdr4nq3rUGzFdsgwNOulCFAoshJrcCRDogsMRf99tOIklS3ZSYZh88GCbL5H8j3Kfn9T5mWSjkYJjOBHLi0sZSGA1pIZBL0EzAU83jIUVqv5lMliKtfiOzNWGCiN/ik4jglc4z8WkgtlBeSI5SRNdUk7XRkuxtqs0uatTRc2u2o2Y0oPt7NPBE8TxdbCloxHE86nwlq2EnPa4vyOcdTm17skqWwcMkMj2LpZdpA+xDbJF1GU++1mNxPmmSo/jKBZj0pad3YnCxRm315jzz2Jo5WVCzJoqQ1w6gilWoGlWyFQK5DKIlNc2Nq5htIxbriAqQwk2prNVgteMEt+7OxjFebE+8hYLjNoCnXOuEh4w9TokLwkQJcrsL6I5JkZ6DThpqj7dFtuA07dSkOFNFQig7MyIEYsX2Owi54yRY13ksdDtmzuOqSqOFWkRG/+XEX+k6Gk1p/fYI7QpLpUwRdDGdfBua+DOslJEbYO+Ns1sAXxNfCbDLD3eDzgSossKEiwY1+dakHfLVhWiqOk4/b0xOlAoqk4nm8C6TpEhstddJ8Clx7n6c3veY7s+wJedtAzpL/D1YdOK3AdPKctmNdXDWnNcyBLT7/Xw4ewRRhqsaaJD/lr54zdC6yMsm9P1Lag7hd4vEXtJs84eAvZO14rgX70+YWL25sS5JxMCPi1qWM/lzE3LkMRhw5U32QEo+JnrJ63rfT1vVf+zY8TT9Hfhw4a4IdHHfDD/hcLjlf2m1Z/IG4XPaRvFxGTuBv591U+Xr+Hh8+K60xkJyoYwg9pGMLEVAzF/gsdX5Pf2en39g==</source>
  </file>
  <file path="Message/Part/Factory/UUEncodedPartFactory.php" generated-path="Message.Part.Factory.UUEncodedPartFactory.html" hash="8439b1a1fdecaf10b3195ad7e62e652d" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="UUEncodedPart">\ZBateson\MailMimeParser\Message\Part\UUEncodedPart</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="18" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</extends>
      <name>UUEncodedPartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</full_name>
      <docblock line="18">
        <description>Responsible for creating UUEncodedPart instances.</description>
        <long-description></long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MessagePartFactory.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="27" package="MailMimeParser">
        <name>$partStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::partStreamFilterManagerFactory</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;responsible for creating&#10;     PartStreamFilterManager instances&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="32" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::streamFactory</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the StreamFactory instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="38" package="MailMimeParser">
        <name>$instances</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::instances</full_name>
        <default>null</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="static" line="38" description="MessagePartFactory[] cached instances of MessagePartFactory&#10;     sub-classes"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="27" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory::newInstance()</full_name>
        <docblock line="27">
          <description>Constructs a new UUEncodedPart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="27" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="27" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="27" description="" type="\ZBateson\MailMimeParser\Message\Part\NonMimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\NonMimePart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MessagePartFactory.html#method_newInstance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="46" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::__construct()</full_name>
        <docblock line="46">
          <description>Initializes class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="59" package="MailMimeParser">
        <name>setCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::setCachedInstance()</full_name>
        <docblock line="59">
          <description>Sets a cached singleton instance.</description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="$instance">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$instance</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="74" package="MailMimeParser">
        <name>getCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getCachedInstance()</full_name>
        <docblock line="74">
          <description>Returns a cached singleton instance if one exists, or null if one hasn't
been created yet.</description>
          <long-description></long-description>
          <tag name="return" line="74" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="92" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getInstance()</full_name>
        <docblock line="92">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$mhs">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
          <tag name="return" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mhs</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="119" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()</full_name>
        <docblock line="119">
          <description>Constructs a new MessagePart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="119" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
    </class>
    <source>eJyVU01vm0AQvfMrppIPtoXNvW7SyEmjRqqrqGkuEZf1MpitYBftDmqryv+9A6wx4Lpx9sAyzMd782b48LHMyiCazwOYw/dMOUhVjsB3KSyBSYEyhJe1IHRGxxuh8o0q8FFYhxZKa36gpCUn1/k3uZKoHUJGVL6PIlOyZSorcWnsLvJeF21dsvDGkuFh/XTH6VGgRYGuFPIsYLxB58QOYzYpvheSjP29CoKKMR+djT8zbhfzRBZF8aAJbco1V03URYWfnz9paRJMausNefVjXak8QcukvKjfuCWjndqyrKmxIJkVKb2DAQoo7Uhoia4TU1SUcfyLEJlKwOM3OslcODfM91oA/iLUiQPPq+cK/gTAp2FVnzncMi2ylSQHAjT+HDEy23q2IHQCFqmy2oGiQ+7hvuE1EQX0OodJeTRGYaORwKRoabbfu+AWDuKLRP9qtHcdyEXNXVZb3jFIKy1JGV03+OA1np6jG77CEK5AV3k+awBaPevTlBhErI4+abiYPudWKUxHGO+uPEoP4RRlQvyzLq5dY/sRL653SF9UoagdYRs8qh8OOp6thhhjtq/B3PbjL0Xad29+0ifLNx2yakkc+79XOQ9oIzRj2Y5Vf8Kz8F8VBm2Ep+oe1uCc7uF/xOpcvtF9sA/+AjXtvYg=</source>
  </file>
  <file path="Message/Part/Factory/NonMimePartFactory.php" generated-path="Message.Part.Factory.NonMimePartFactory.html" hash="fd212bd9aaf4dcc0e6823f8d4d199245" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="NonMimePart">\ZBateson\MailMimeParser\Message\Part\NonMimePart</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="18" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</extends>
      <name>NonMimePartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\NonMimePartFactory</full_name>
      <docblock line="18">
        <description>Responsible for creating NoneMimePart instances.</description>
        <long-description></long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MessagePartFactory.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="27" package="MailMimeParser">
        <name>$partStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::partStreamFilterManagerFactory</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;responsible for creating&#10;     PartStreamFilterManager instances&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="32" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::streamFactory</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the StreamFactory instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="38" package="MailMimeParser">
        <name>$instances</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::instances</full_name>
        <default>null</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="static" line="38" description="MessagePartFactory[] cached instances of MessagePartFactory&#10;     sub-classes"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="27" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\NonMimePartFactory::newInstance()</full_name>
        <docblock line="27">
          <description>Constructs a new NonMimePart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="27" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="27" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="27" description="" type="\ZBateson\MailMimeParser\Message\Part\NonMimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\NonMimePart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MessagePartFactory.html#method_newInstance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="46" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::__construct()</full_name>
        <docblock line="46">
          <description>Initializes class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="59" package="MailMimeParser">
        <name>setCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::setCachedInstance()</full_name>
        <docblock line="59">
          <description>Sets a cached singleton instance.</description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="$instance">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$instance</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="74" package="MailMimeParser">
        <name>getCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getCachedInstance()</full_name>
        <docblock line="74">
          <description>Returns a cached singleton instance if one exists, or null if one hasn't
been created yet.</description>
          <long-description></long-description>
          <tag name="return" line="74" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="92" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getInstance()</full_name>
        <docblock line="92">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$mhs">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
          <tag name="return" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mhs</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="119" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()</full_name>
        <docblock line="119">
          <description>Constructs a new MessagePart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="119" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
    </class>
    <source>eJyVU01v2zAMvftXcEAOSeDE92X9QDoUK7AUwbpT4Ysi07EKWzIkGlsx5L+PthXHdpt+6BCF4SPf46Py7arMyiCazwOYw+9MOUhVjsB3KSyBSYEyhMe1IHRGxxuh8o0qcCusQwulNU8oacnFdf11riRqh5ARlV+jyJQcmcpKXBq7j3zWRTuXLHywZHpYP3zn8ijQokBXCnmWMN6gc2KPMYcU3wpJxj6vgqBizq2z8Q/m7TAPZFEUd5rQptxz1aA+1PjeaJ+iT1TVH+tK5QlaluQt/cUDGe3Ujk1NjQXJmkjpPTAHHklAaUdCS3Sdk6KijOGPQmQqAU/fmCRz4Rz0JHobAP8S6sSBF9VLBf8C4NNIqs8cblgT2UqSAwEa//T7gdnVSwWhE7BIldUOFB0rj/c1vw9RQG9omJSnYAQb7QImRSuy/b0Dt3QQf3ZLvkHU3GW148cFaaUlKaPr8e68v9NzcsN3FMIF6CrPZw1B62Z9mhYDxOqUk4ab6XNplcJ0xPHlwrP0GF6yTIj/pYtL18R+wYvLPdJPVSjCZNuBR/3DwcSz1ZBjrPY9mps+/qNMh+6b3/To6U2HmloJp+lvVc7r2QjNTLbT1N/vLHytw2CI8Jy34RuGdCk/zCE4BP8BljO0SA==</source>
  </file>
  <file path="Message/Part/Factory/PartStreamFilterManagerFactory.php" generated-path="Message.Part.Factory.PartStreamFilterManagerFactory.html" hash="faebd42a4f9f15e3e7dba92cba4ca256" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <namespace-alias name="PartStreamFilterManager">\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="17" package="MailMimeParser">
      <extends/>
      <name>PartStreamFilterManagerFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</full_name>
      <docblock line="17">
        <description>Responsible for creating PartStreamFilterManager instances.</description>
        <long-description></long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="23" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory::streamFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;the StreamFactory needed to&#10;     initialize a new PartStreamFilterManager.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="30" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory::__construct()</full_name>
        <docblock line="30">
          <description>Initializes dependencies</description>
          <long-description></long-description>
          <tag name="param" line="30" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="39" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory::newInstance()</full_name>
        <docblock line="39">
          <description>Constructs a new PartStreamFilterManager object and returns it.</description>
          <long-description></long-description>
          <tag name="return" line="39" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJylU8Fu2zAMvfsreOghCdD43q3t0BYFeghQrDsVBgpGZmIWjmSI9IZt6L+PdhUXLmJfxoMFmXp85NPT1+umarJ8tcpgBT8qFthxTWBrg1Eh7EArgucbVJLgiw1yveEDPWIUitDE8EpO1wbu8N9qduSFoFJtLvI8NLYLbXS0DnGfp6zkWynP02Zt9HDzdGfwPPN4IGnQTRIWGxLBPRW21eIenYb4+0uWtTINedJIeEjLAJlDjEi6T8JyrRQ36C0XjTSJ9t1aDl54a7LtQgRnZ5X9HiaQwF4UvSMZZMNWK0M+I1ZcQuqqV8TVKDJVKQ2T/c3Aom+nCyv4EyOMBu5vcfzHE5VUgoYjqg/2rIw1/yFAO/JrinudUHm/mg/UfGDlzmSsc5f93N7DwCFQknmkJO+YJOWHKcyBePjU9bj+uIl2a6aCXeudcvDw8uLsXjS2ThdzRZbwLmAXZ2pP4PxqlIfLk1O9nZzt9kgp8/pB2HYvB9CXEEnb6AVYj6rCoMF7Dor/8eqsStbjQzLkYtmf+FAjkc+MsTgl2PIo0Fv2D8rKcCM=</source>
  </file>
  <file path="Message/Part/Factory/MessagePartFactory.php" generated-path="Message.Part.Factory.MessagePartFactory.html" hash="2b88b33dd83e55a5a35612d523e7a7b1" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ReflectionClass">\ReflectionClass</namespace-alias>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="MessageHelperService">\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</namespace-alias>
    <namespace-alias name="PartFilterFactory">\ZBateson\MailMimeParser\Message\PartFilterFactory</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="21" package="MailMimeParser">
      <extends/>
      <name>MessagePartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</full_name>
      <docblock line="21">
        <description>Abstract factory for subclasses of MessagePart.</description>
        <long-description></long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="27" package="MailMimeParser">
        <name>$partStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::partStreamFilterManagerFactory</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;responsible for creating&#10;     PartStreamFilterManager instances&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="32" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::streamFactory</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the StreamFactory instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="38" package="MailMimeParser">
        <name>$instances</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::instances</full_name>
        <default>null</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="static" line="38" description="MessagePartFactory[] cached instances of MessagePartFactory&#10;     sub-classes"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="46" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::__construct()</full_name>
        <docblock line="46">
          <description>Initializes class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="59" package="MailMimeParser">
        <name>setCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::setCachedInstance()</full_name>
        <docblock line="59">
          <description>Sets a cached singleton instance.</description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="$instance">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$instance</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="74" package="MailMimeParser">
        <name>getCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getCachedInstance()</full_name>
        <docblock line="74">
          <description>Returns a cached singleton instance if one exists, or null if one hasn't
been created yet.</description>
          <long-description></long-description>
          <tag name="return" line="74" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="92" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getInstance()</full_name>
        <docblock line="92">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$mhs">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
          <tag name="return" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mhs</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="119" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()</full_name>
        <docblock line="119">
          <description>Constructs a new MessagePart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="119" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="38" code="PPC:ERR-50007">No summary for property $instances</error>
    </parse_markers>
    <source>eJyVV8tu20oM3fsrWMDAtdMk7tppem/TomgWaYPmrhoHxliirCnkkTAzSh9p/r2ch14jyXa1iKERyUOeQ1LK63+LtJgsTk4mcAL/p1xBwjME+i2Y1JAnoFOEr1dMo8rF6obx7Ibv8JZJhRIKmX/DSJ+Ts/H/L+MRCoWQal0sF4u8oLu8lBGe53K78E/VYqPiM39zTvBwdfee3BcTwXaoChaNAq5uUCm2xRXd6tUHFulc/ryYTErC/IJJRrnwXLzLmFIX9vBWydVHSqZ2vNMS2e5aaJQJATmrQ2gfMSuaW3d3h/KRHxvApPuBZwRa53ysm/1zVfIsRrnfy5XmfxpuvLZvN0pLOoTEPYEkl6DKTWTIQmWU9rAGsFaUlTolw6+MpTwGj2zFYlVAG6Ht7LEnTxOgy+Kbi6I9MgnGwudoGblhgvwqYkBSB+RC8Q11oUkxIkvNxbaKYa+RGMCF0kxEqLz1wv5Sl2rqDIxhWuwFJ7aGMu4wauehe1KhjoGqQJEQg7w1jwYYvH+AiEUpxagLC3SqqG6TQ6KeeVWDjPgj6QcebtrEvARRZlk/s2vBNWcZ/0U2TuUYaaRjFBFHde7N6jqIXLYLuOkWH5geaIVpoZJuBeWG1gYkpbBzDut1RK2iZRnpmTOkax/+aW11LPQcnmqfqab9ePamE5G4C/UNzPe3nPEnLOf1bP+GKtyhVsCqTlA0Cxlqqr7Sb0SHfpc0ko90qu+Mml+F+p1FvfZ+s31B5zZaQxdPYKYwS5bLdqtdumZr82qbtmcI9w8Nl88Nq64RL2GLeh2xLMN4bY9m88Y8jHbvvB4M29VhRXlI9xfUpRR7GTel5QIBf3Cl1SnQmjI1VccpU+IfXcXbIAq3xSjWT9Q9uaQFHJ/qQypteyqFShzF2V654PdveMFppeieTcXtPJTU1+VWS19I/3gs3CF5zBoeUMa8MswjG+TIDRUngcHxe6nt0XnBk1FoM/T5ANNdqv62E9wWHGiDugFGl2Gc/NUK7Br3CvQvjsZqtERv2V+ptXCXvqDlcqCfu13achrZJlOJNjn8Hn4Wzvoj0IpufYXZEhTg7I3JpHrB5HI2tyefyt0G5efk1oiKREhnimwEJrfhAjOX6U1Knp68uqDK4TVhXcDLl1Me5l9HuTcry0i8NnnTCfkHaM9d7BahrggioSLyLUWc2bhBjIr6/sJvtvueGT64U2sWzVo1qrRaHPKN+R8CmIh9PAW83p4Dc+Y/ht3HnL8ZnPD6K59a0OG583DeVkd9h7dSHhrH+nO4HsgW8bOxvE8PpOrnhsh/nvwBl2FEmg==</source>
  </file>
  <file path="Message/Part/Factory/PartBuilderFactory.php" generated-path="Message.Part.Factory.PartBuilderFactory.html" hash="8169f3131bb7a1b55a2ff81cf9d6f988" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="21" package="MailMimeParser">
      <extends/>
      <name>PartBuilderFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</full_name>
      <docblock line="21">
        <description>Responsible for creating PartBuilder instances.</description>
        <long-description>The PartBuilder instance must be constructed with a MessagePartFactory
instance to construct a MessagePart sub-class after parsing a message into
PartBuilder instances.</long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="27" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory::headerFactory</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the HeaderFactory&#10;     instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory::__construct()</full_name>
        <docblock line="34">
          <description>Initializes dependencies</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part\Factory" line="46" package="MailMimeParser">
        <name>newPartBuilder</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory::newPartBuilder()</full_name>
        <docblock line="46">
          <description>Constructs a new PartBuilder object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="$messagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
          <tag name="return" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$messagePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
        </argument>
      </method>
    </class>
    <source>eJyVU02P0zAQvedXzGEPbUWbOx8LKgjBoRICTqtIq4kzaYwSO7InrADtf2ecr026SQU+xHI8782beePXb+uijuLdLoIdfC+0h1yXBLLX6BhsDlwQ3B2RyVuTnFCXJ13RF3SeHNTO/iDFBwEH/LtSKzKeoGCuX8axreVkG6foYN057m99nPps3x8Okh6O3z4IPI4MVuRrVKsJkxN5j2dK5MjJR1Rs3a9XUdT4dcgnwmzcRsg1xCxJ+BwbXQpYEvWN+ioyrfE6lVbl1oFyhKzNGSbRoI1nNIp8aA90/aXFCKgaz5ASKCFl1yimDB40F4DQiwmwXnxgGpFsn0DzaPBNulcleg+YczBLqgsaEaouSljYBrZV1a2p2HAhNd4hFjqDvmetXx37BD0o/BOBrLZZYQnJT3SQ/I9F7dzN/gxc7Rpk9j/jdpdxZGqbd1PM7Q63l5o+G80aS/2bPGQko5qRUZr8cD9ql8ZhNddykWCuoklluCFvjGJtDdzfjw5trpFsW3TXurBuWJ7j/nYWA28WS3tcLPD9kFYmAAw9zHy2aXi5gCYDR9w440HzSumrxi09x2RpYifOSWHVs4injJ2Yf0w5KeiqBVL8JHTzXOGSpks/emUXjdyM9yulvZgHLJi6vxXObjLEMkZthHY7wraDx4/RX9v12Mg=</source>
  </file>
  <file path="Message/Part/PartBuilder.php" generated-path="Message.Part.PartBuilder.html" hash="14838fbd57c57a1e834e527ee2675576" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="HeaderContainer">\ZBateson\MailMimeParser\Header\HeaderContainer</namespace-alias>
    <namespace-alias name="MessagePartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part" line="19" package="MailMimeParser">
      <extends/>
      <name>PartBuilder</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder</full_name>
      <docblock line="19">
        <description>Used by MessageParser to keep information about a parsed message as an
intermediary before creating a Message object and its MessagePart children.</description>
        <long-description></long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="25" package="MailMimeParser">
        <name>$streamPartStartPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::streamPartStartPos</full_name>
        <default>0</default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;The offset read start position for this part (beginning of&#10;headers) in the message's stream.&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="32" package="MailMimeParser">
        <name>$streamPartEndPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::streamPartEndPos</full_name>
        <default>0</default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;The offset read end position for this part.  If the part is a&#10;multipart mime part, the end position is after all of this parts&#10;children.&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="38" package="MailMimeParser">
        <name>$streamContentStartPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::streamContentStartPos</full_name>
        <default>0</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;The offset read start position in the message's stream for the&#10;beginning of this part's content (body).&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="44" package="MailMimeParser">
        <name>$streamContentEndPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::streamContentEndPos</full_name>
        <default>0</default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;The offset read end position in the message's stream for the&#10;end of this part's content (body).&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="50" package="MailMimeParser">
        <name>$messagePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::messagePartFactory</full_name>
        <default></default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;the factory&#10;     needed for creating the Message or MessagePart for the parsed part.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="56" package="MailMimeParser">
        <name>$endBoundaryFound</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::endBoundaryFound</full_name>
        <default>false</default>
        <docblock line="56">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="56" description="&lt;p&gt;set to true once the end boundary of the currently-parsed&#10;part is found.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$parentBoundaryFound</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::parentBoundaryFound</full_name>
        <default>false</default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true once a boundary belonging to this parent's part&#10;is found.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="70" package="MailMimeParser">
        <name>$mimeBoundary</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::mimeBoundary</full_name>
        <default>false</default>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="70" description="&lt;p&gt;false if not queried for in the content-type&#10;header of this part, null if the current part does not have a&#10;boundary, or the value of the boundary parameter of the content-type&#10;header if the part contains one.&lt;/p&gt;" type="boolean|null|string" variable="">
            <type>boolean</type>
            <type>null</type>
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="75" package="MailMimeParser">
        <name>$headerContainer</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::headerContainer</full_name>
        <default></default>
        <docblock line="75">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="75" description="&lt;p&gt;a container for found and parsed headers.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderContainer" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderContainer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="81" package="MailMimeParser">
        <name>$children</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::children</full_name>
        <default>array()</default>
        <docblock line="81">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="81" description="&lt;p&gt;an array of children found below this part for a mime&#10;     email&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\PartBuilder&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\PartBuilder&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="86" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::parent</full_name>
        <default>null</default>
        <docblock line="86">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="86" description="&lt;p&gt;the parent part.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="92" package="MailMimeParser">
        <name>$properties</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::properties</full_name>
        <default>array()</default>
        <docblock line="92">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="92" description="&lt;p&gt;key =&gt; value pairs of properties passed on to the&#10;$messagePartFactory when constructing the Message and its children.&lt;/p&gt;" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="100" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::__construct()</full_name>
        <docblock line="100">
          <description>Sets up class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="100" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="$mpf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
          <tag name="param" line="100" description="" type="\ZBateson\MailMimeParser\Header\HeaderContainer" variable="$headerContainer">
            <type>\ZBateson\MailMimeParser\Header\HeaderContainer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mpf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$headerContainer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderContainer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="119" package="MailMimeParser">
        <name>addHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::addHeader()</full_name>
        <docblock line="119">
          <description>Adds a header with the given $name and $value to the headers array.</description>
          <long-description>Removes non-alphanumeric characters from $name, and sets it to lower-case
to use as a key in the private headers array.  Sets the original $name
and $value as elements in the headers' array value for the calculated
key.</long-description>
          <tag name="param" line="119" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="119" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="129" package="MailMimeParser">
        <name>getHeaderContainer</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getHeaderContainer()</full_name>
        <docblock line="129">
          <description>Returns the HeaderContainer object containing parsed headers.</description>
          <long-description></long-description>
          <tag name="return" line="129" description="" type="\ZBateson\MailMimeParser\Header\HeaderContainer">
            <type>\ZBateson\MailMimeParser\Header\HeaderContainer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="140" package="MailMimeParser">
        <name>setProperty</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::setProperty()</full_name>
        <docblock line="140">
          <description>Sets the specified property denoted by $name to $value.</description>
          <long-description></long-description>
          <tag name="param" line="140" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="140" description="" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="151" package="MailMimeParser">
        <name>getProperty</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getProperty()</full_name>
        <docblock line="151">
          <description>Returns the value of the property with the given $name.</description>
          <long-description></long-description>
          <tag name="param" line="151" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="151" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="164" package="MailMimeParser">
        <name>addChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::addChild()</full_name>
        <docblock line="164">
          <description>Registers the passed PartBuilder as a child of the current PartBuilder.</description>
          <long-description></long-description>
          <tag name="param" line="164" description="" type="\ZBateson\MailMimeParser\Message\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\PartBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="178" package="MailMimeParser">
        <name>getChildren</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getChildren()</full_name>
        <docblock line="178">
          <description>Returns all children PartBuilder objects.</description>
          <long-description></long-description>
          <tag name="return" line="178" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\PartBuilder&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\PartBuilder&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="188" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getParent()</full_name>
        <docblock line="188">
          <description>Returns this PartBuilder's parent.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="199" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::isMime()</full_name>
        <docblock line="199">
          <description>Returns true if either a Content-Type or Mime-Version header are defined
in this PartBuilder's headers.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="211" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getContentType()</full_name>
        <docblock line="211">
          <description>Returns a ParameterHeader representing the parsed Content-Type header for
this PartBuilder.</description>
          <long-description></long-description>
          <tag name="return" line="211" description="" type="\ZBateson\MailMimeParser\Header\ParameterHeader">
            <type>\ZBateson\MailMimeParser\Header\ParameterHeader</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="222" package="MailMimeParser">
        <name>getMimeBoundary</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getMimeBoundary()</full_name>
        <docblock line="222">
          <description>Returns the parsed boundary parameter of the Content-Type header if set
for a multipart message part.</description>
          <long-description></long-description>
          <tag name="return" line="222" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="239" package="MailMimeParser">
        <name>isMultiPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::isMultiPart()</full_name>
        <docblock line="239">
          <description>Returns true if this part's content-type is multipart/*</description>
          <long-description></long-description>
          <tag name="return" line="239" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="263" package="MailMimeParser">
        <name>setEndBoundaryFound</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::setEndBoundaryFound()</full_name>
        <docblock line="263">
          <description>Returns true if the passed $line of read input matches this PartBuilder's
mime boundary, or any of its parent's mime boundaries for a multipart
message.</description>
          <long-description>If the passed $line is the ending boundary for the current PartBuilder,
$this-&gt;isEndBoundaryFound will return true after.</long-description>
          <tag name="param" line="263" description="" type="string" variable="$line">
            <type>string</type>
          </tag>
          <tag name="return" line="263" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$line</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="287" package="MailMimeParser">
        <name>isParentBoundaryFound</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::isParentBoundaryFound()</full_name>
        <docblock line="287">
          <description>Returns true if MessageParser passed an input line to setEndBoundary that
matches a parent's mime boundary, and the following input belongs to a
new part under its parent.</description>
          <long-description></long-description>
          <tag name="return" line="287" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="297" package="MailMimeParser">
        <name>setEof</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::setEof()</full_name>
        <docblock line="297">
          <description>Called once EOF is reached while reading content.  The method sets the
flag used by PartBuilder::isParentBoundaryFound to true on this part and
all parent PartBuilders.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="312" package="MailMimeParser">
        <name>canHaveHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::canHaveHeaders()</full_name>
        <docblock line="312">
          <description>Returns false if this part has a parent part in which endBoundaryFound is
set to true (i.e. this isn't a discardable part following the parent's
end boundary line).</description>
          <long-description></long-description>
          <tag name="return" line="312" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="322" package="MailMimeParser">
        <name>getStreamPartStartOffset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getStreamPartStartOffset()</full_name>
        <docblock line="322">
          <description>Returns the offset for this part's stream within its parent stream.</description>
          <long-description></long-description>
          <tag name="return" line="322" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="335" package="MailMimeParser">
        <name>getStreamPartLength</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getStreamPartLength()</full_name>
        <docblock line="335">
          <description>Returns the length of this part's stream.</description>
          <long-description></long-description>
          <tag name="return" line="335" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="345" package="MailMimeParser">
        <name>getStreamContentStartOffset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getStreamContentStartOffset()</full_name>
        <docblock line="345">
          <description>Returns the offset for this part's content within its part stream.</description>
          <long-description></long-description>
          <tag name="return" line="345" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="358" package="MailMimeParser">
        <name>getStreamContentLength</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::getStreamContentLength()</full_name>
        <docblock line="358">
          <description>Returns the length of this part's content stream.</description>
          <long-description></long-description>
          <tag name="return" line="358" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="368" package="MailMimeParser">
        <name>setStreamPartStartPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::setStreamPartStartPos()</full_name>
        <docblock line="368">
          <description>Sets the start position of the part in the input stream.</description>
          <long-description></long-description>
          <tag name="param" line="368" description="" type="integer" variable="$streamPartStartPos">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamPartStartPos</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="379" package="MailMimeParser">
        <name>setStreamPartEndPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::setStreamPartEndPos()</full_name>
        <docblock line="379">
          <description>Sets the end position of the part in the input stream, and also calls
parent-&gt;setParentStreamPartEndPos to expand to parent parts.</description>
          <long-description></long-description>
          <tag name="param" line="379" description="" type="integer" variable="$streamPartEndPos">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamPartEndPos</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="392" package="MailMimeParser">
        <name>setStreamContentStartPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::setStreamContentStartPos()</full_name>
        <docblock line="392">
          <description>Sets the start position of the content in the input stream.</description>
          <long-description></long-description>
          <tag name="param" line="392" description="" type="integer" variable="$streamContentStartPos">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamContentStartPos</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="402" package="MailMimeParser">
        <name>setStreamPartAndContentEndPos</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::setStreamPartAndContentEndPos()</full_name>
        <docblock line="402">
          <description>Sets the end position of the content and part in the input stream.</description>
          <long-description></long-description>
          <tag name="param" line="402" description="" type="integer" variable="$streamContentEndPos">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamContentEndPos</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="415" package="MailMimeParser">
        <name>createMessagePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartBuilder::createMessagePart()</full_name>
        <docblock line="415">
          <description>Creates a MessagePart and returns it using the PartBuilder's
MessagePartFactory passed in during construction.</description>
          <long-description></long-description>
          <tag name="param" line="415" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="415" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
    </class>
    <source>eJytWllz3DYSftevgFOqDMcranZfrZU2sdYuuyquqKJsHmK5XBgSnMGGQ3IJUrIqcn77duMgARA8JGteZM+gG318fQH457+qfXW0efnyiLwkv+65IBnPGYG/Fa0bUmak2TPy+2vaMFEWNx8ozz/wA7uitWA1qeryvyxpToEY6X/IecIKwci+aapXm01Zwf/Ktk7YaVnvNvpXsdmKNNb/OYXtyevrfwP55qigByYqmoxuePOBCUF37Ab+25wdHbWw15Wob97Bft1v103N6OF90bA6A15nctUYw3eMpt2fy7JoKC9YPU1jC3HzliZNWd+bL/E7/RXIp+36H8FSsr0n/Ro0XlOSPxirCC+ysj7QhpcFoduybQhF4yPNQREQKggtkBNHrQ4s5bS+J1sGhIwkoG7Dix2Q6Q1IuUW3AE1KeCOsfRuS7Hme1qzofEbbZl/W5HdK9zwlWmXpjiSnQhCket0CEauP/jwi8JFa4Qeob2mNQgF0YNcsE6whIE5KRIObVaXgUi8QFIBkUBVt2Y4XBcpcZobVXrpArIGdxJzWfSWAFzr0VC/cyL9VzW9BVHKsfkQhr3HLq1KQc/L3M7losbQMDBWW9ZSQ9yoGpOTwLTXcDm3ecPntAbAhfz+RKx1uSJGB0wjNcxVOmrMwfCyPTCv4pkifpp7njBEDa8WZYWc7qRcblicQJqxAN5bp/XpS7Eu19Llcs1BypPlmmW1rB6UdRrwULlP/Nkvlp2AshXBGMbtoxbVdvDrcjDomC0gchiU+BLLOqHm3ZZkzWhC0LSSfpm5h5wKyrQEtJJ8ixcyi037S1oDLJr+PlSSOTiYeMiQaEQ+YvtY83+JfsGZGc8GeIiTtxduyvCx20ohl52UQdKXc7Yg5I6EifKKQD0Wb5w+AGhRF0hCekaJsyP9aVnPtcQ1ajcC4ua+YI6FKfA5gTwhyRmaWG5TF05IJucWe3rI+GcmPMdAJ0QC6pTmaT7HpzAd8oNA2Zs950biVARNVIwU4hY2BEtKhsegCY3q1FxyddP9G+0n3yVqm40FXipHd934pH93YqmwfP8EGhNY1leA3KVnvjXi7s+oXSkVl1nesxQ7QJ4SF6hiek4+flolkTG48Pwlg4IuImeCsUAp6/sHAKRcaGhXltUCNoZOrWN1whioKtDKkWxldjDhKBlIOuduDZuA02KNNBsnNdCEzdc6SQBnJV+OaAZO2IqotSRk0lykrEiAwHDuFJcJDCfr4UGXeKh9+PoBcadstNK4ka4tEFqTPnzu1I7UQPiP7nnQLFm25Jn92BMeIvfgiYPpzyfrMX+kxxGXBuPgaBMyPaQpdi4n+O97spUN3/Bb8fIxdunTqscKQRomOShVEvkd+YYfyViauIqZ5tadFe4AMmQAowAlJg4RZXR4U9xPJXqC/uawCEH6sjhMquoCDL7FFx8ZYIlonWYMmVxiisIMLyppD4aC52shws7QBjixnB4gpYZhqZiudH9Q6U6MTmidtDnt21RHEGQGkrhTO1t5Pkvkk5GiaKvxE2laKZi0XDyDjeT2+AHKPcAoJv7CmrQtlOh+1esjQyRqlD+fnLn/8UEtuPqNJbXes8ZZHvqaaa1jhKeU6UIiKJTzDeq2T0D2kF6ixampTgAfAKXsN1Zp17oF/YekS3wLkr7QEi7zb58yPcvknDHRJsNSpTofQaR8K+UfprX0iFZ/zr6uxryn0HtELDhWpicaUXtup0kJEXxF7WwwBM2A3bbodFzJbqeosK6VdtGVCkpXOa6LtVWOmvFly4mB2wsrfDeZTJoaIv0SBojHqAbis38A+psGQ9urtudmQlIuE1mpAEbgPGEMNu/5E4bpTW96fDnw36mWmb/go0W3J5vt2Gu04f3dtmG0KlcfG09VjvPLx0xzaL7UIM2nMSLosjrlzTLMy89CoSlcLoYPRKTnNSKu2WyQrznMAAgYZRvb6etqOf4XZQ87BYN/4N4gw3F93IMAdEnIG+bwrsrI0D9Seqzx6bpvUmQsUYUzhaKyusi+QGES0svVZrcnDQwjSo9S29qv1otJM0QZqnlOVEkStaiZACNOJ67rsmFqbFtqYrqXy7Pn4gNCHqZ48sxGhxEKpHlfb4wug9i2+tPBpm4wPxSFrAXChEBl2egzsjwH1wGNPawPjqXI5Z5MP1gg9MArmUDMROKP2uR62RxKpN5e75VGuS3pXmIQvjey4yKWRwth0L84Va1+IcUFscrndb9iUvC3raGXcs/J27Yv5WFm393hMYgocGspzETxI6ly9MeRPTDDIByNt4NrHemCx9aFaw/jU6DMzFPME2j22+3ygTbLXthPkH2quqU2f6po2Qro1iXrCaODi1V+9lW7u/vYXX50MYRB0uDaG+azXE72bdaa01K1du3acQ/LAKJfny7yoWghdVIaFSqlhKM/4nQM2WsizIjza6I4f7VV4kuGliI6ZyhSDJPE+ICgXpptC53X5qps/h+3liWGn4cPFG/8c9o5DN6RtKU0k27a5Fh/leQriIWf6EkSS2QD+WysrdNh3k6EHfrsB6dBPvv/ebU3ii3EZRrJl+GQYjXUWig33h6+EAUClgJ1KY6EpV0lXYwL/Lo47kjj+biKLBg7Xh9KNSuhJGdw/uPs4t2cMV/emVMcDLXS0SmEhjbk+hXCgfYTpgKbh2LxXR0zyvqbM8/IO8a2Yq8sFgfy70/WC3amTXyDGNqCZ7bCXFYKrIcbmGs8ALCd7nkuYe+RpbsLIm5/fYjqBvAe2gSSwx6t+zIKovc7Jp0RewUErtC/1GZx1s5bldIcHb/JgxEo5r14FlbFucKzjc7C84YdDmY5di5t/tB9IJ2U2rJ3L43Y8c0wmg2XMlwyj3WVRb5U97dGqL9cKdBFU50Gk864s2ddkET9lp4ojF8UK3xHoCZ1uc2auLgza++uFvsg5l4AyOX4TwBNavKO3TI0BYhmyZRKSOfzhgbzwzD84MTDIn+r09W2yc63fXx3jURcYug9p77mBrzcvmkmdoV5du08Sfpb7T3XxauORUyy9JvDOIR7UuMGa+eOvMZppm+as2DV7/5L9GS33k9xgZh4cPI2Iv02rEaSYtwMuVJ4NKPYbiefEiv/24hnh4rF+OmKMaZ/XlI8Aj/vYI36Smv09gvvOprQfDqmrJNViuNr63Ta+ggk8a5oridcDiijAZaRoBl9RBchnTeA815kxgOrBoBKWeIuWd1XIatlVT3HtxzlUPPaloqrBsEpm4OQvaFPFZrlF1fpowGHWmt0jogHpMzQjy0QcNiaPxK+J0adB2IuhZTb3iKIwr0nrD1+ehZk8CdHGJPpRyjfa5rFo/LFIHcooxG6JcXx0Ol8P3hRMwM3decykl/j0Tc5k9mM3tKE5fuIwYQnTnAaPYQJvK/R0CC5I21pPMvolSlmMecF7JGws4Fcea7vpTleqZq2ORjbQ567TpWn4ziO+gBH0PahFYY6LhknBPWNzlIFP55GvR/8HZ47ocg==</source>
  </file>
  <file path="Message/Part/PartStreamFilterManager.php" generated-path="Message.Part.PartStreamFilterManager.html" hash="39f072693d82a25f3502821396b0e514" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="CachingStream">\GuzzleHttp\Psr7\CachingStream</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part" line="23" package="MailMimeParser">
      <extends/>
      <name>PartStreamFilterManager</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</full_name>
      <docblock line="23">
        <description>Manages attached stream filters for a MessagePart's content resource handle.</description>
        <long-description>The attached stream filters are:
 o Content-Transfer-Encoding filter to manage decoding from a supported
   encoding: quoted-printable, base64 and x-uuencode.
 o Charset conversion filter to convert to UTF-8</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="28" package="MailMimeParser">
        <name>$filteredStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::filteredStream</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;the content stream after attaching encoding filters&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="34" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::stream</full_name>
        <default></default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;the underlying content stream without filters&#10;     applied&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="39" package="MailMimeParser">
        <name>$encoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::encoding</full_name>
        <default>array('type' =&gt; null, 'filter' =&gt; null)</default>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="39" description="&lt;p&gt;map of the active encoding filter on the current handle.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="47" package="MailMimeParser">
        <name>$charset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::charset</full_name>
        <default>array('from' =&gt; null, 'to' =&gt; null, 'filter' =&gt; null)</default>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="47" description="&lt;p&gt;map of the active charset filter on the current handle.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="57" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::streamFactory</full_name>
        <default></default>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="57" description="&lt;p&gt;used to apply psr7 stream decorators to the&#10;     attached StreamInterface based on encoding.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$charsetConversionFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::charsetConversionFilter</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;name of stream filter handling character set conversion&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="69" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::__construct()</full_name>
        <docblock line="69">
          <description>Sets up filter names used for stream_filter_append</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="82" package="MailMimeParser">
        <name>setStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::setStream()</full_name>
        <docblock line="82">
          <description>Sets the URL used to open the content resource handle.</description>
          <long-description>The function also closes the currently attached handle if any.</long-description>
          <tag name="param" line="82" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="95" package="MailMimeParser">
        <name>isTransferEncodingFilterChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::isTransferEncodingFilterChanged()</full_name>
        <docblock line="95">
          <description>Returns true if the attached stream filter used for decoding the content
on the current handle is different from the one passed as an argument.</description>
          <long-description></long-description>
          <tag name="param" line="95" description="" type="string" variable="$transferEncoding">
            <type>string</type>
          </tag>
          <tag name="return" line="95" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transferEncoding</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Part" line="109" package="MailMimeParser">
        <name>isCharsetFilterChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::isCharsetFilterChanged()</full_name>
        <docblock line="109">
          <description>Returns true if the attached stream filter used for charset conversion on
the current handle is different from the one needed based on the passed
arguments.</description>
          <long-description></long-description>
          <tag name="param" line="109" description="" type="string" variable="$fromCharset">
            <type>string</type>
          </tag>
          <tag name="param" line="109" description="" type="string" variable="$toCharset">
            <type>string</type>
          </tag>
          <tag name="return" line="109" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fromCharset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toCharset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="121" package="MailMimeParser">
        <name>attachTransferEncodingFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::attachTransferEncodingFilter()</full_name>
        <docblock line="121">
          <description>Attaches a decoding filter to the attached content handle, for the passed
$transferEncoding.</description>
          <long-description></long-description>
          <tag name="param" line="121" description="" type="string" variable="$transferEncoding">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transferEncoding</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="150" package="MailMimeParser">
        <name>attachCharsetFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::attachCharsetFilter()</full_name>
        <docblock line="150">
          <description>Attaches a charset conversion filter to the attached content handle, for
the passed arguments.</description>
          <long-description></long-description>
          <tag name="param" line="150" description="&lt;p&gt;the character set the content is encoded in&lt;/p&gt;" type="string" variable="$fromCharset">
            <type>string</type>
          </tag>
          <tag name="param" line="150" description="&lt;p&gt;the target encoding to return&lt;/p&gt;" type="string" variable="$toCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fromCharset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toCharset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="180" package="MailMimeParser">
        <name>reset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::reset()</full_name>
        <docblock line="180">
          <description>Closes the attached resource handle, resets mapped encoding and charset
filters, and reopens the handle seeking back to the current position.</description>
          <long-description>Note that closing/reopening is done because of the following differences
discovered between hhvm (up to 3.18 at least) and php:

 o stream_filter_remove wasn't triggering php_user_filter's onClose
   callback
 o read operations performed after stream_filter_remove weren't calling
   filter on php_user_filter

It seems stream_filter_remove doesn't work on hhvm, or isn't implemented
in the same way -- so closing and reopening seems to solve that.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="206" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager::getContentStream()</full_name>
        <docblock line="206">
          <description>Checks what transfer-encoding decoder filters and charset conversion
filters are attached on the handle, closing/reopening the handle if
different, before attaching relevant filters for the passed
$transferEncoding and charset arguments, and returning a StreamInterface.</description>
          <long-description></long-description>
          <tag name="param" line="206" description="" type="string" variable="$transferEncoding">
            <type>string</type>
          </tag>
          <tag name="param" line="206" description="&lt;p&gt;the character set the content is encoded in&lt;/p&gt;" type="string" variable="$fromCharset">
            <type>string</type>
          </tag>
          <tag name="param" line="206" description="&lt;p&gt;the target encoding to return&lt;/p&gt;" type="string" variable="$toCharset">
            <type>string</type>
          </tag>
          <tag name="return" line="206" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$transferEncoding</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$fromCharset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toCharset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>eJzNWFlvGzcQftevmABGZBuShaJFG9i128Zt2gB1kSb2S2LDoHYpaevVcktypSqJ/3tneOzJlW01D90HHcvhzPCbm9//kC/yweTwcACHcLlIFMySlAN+50xqEDPQCw7vXzLNlciuL1iSXiRL/oZJxSXkUvzFI32Em2n/j2kS8UxxWGidH08mIsd/opARPxJyPnGrajJV8dj9OULx8PLdz7h9MsjYkqucRb0Cry+4UmzOr/GvPhkMCpT1Rsnr31BeufZOS86WrzPN5Qx5nRiqX4uPH1Nu6HDDd9fnLFok2dzSWpI+mZbGfb1ikRZyg7IdZhcsQ6EKmNbIksegDB3BiAognEICA6cbqT1UEAlULtMguUUHFiyLU04wgrUD7+XHJD8mGhBwbtmMLyXL1IzL8S9ZJGI8lSMGLWBp1IOY+xUplqiPKvJcSM1jwwqAu53H8Hch8PU4l0mm2TTlI5gyxb/9BlBF+GdcFIbU6ko6LAgkTUdaoXqJyGrC7UtNP68uX41feDdhhV4gLO8ZWyQxONiNB0QpUwoIJge34WUxloNPA9LVAE8PcloxCS17G4f1CDvw2Iw0spASCrwJlHL8JuYbnVqjUyP0e3aZx95NaPnROhRZzGW6ITEtddYJnr/QLenmE1iepwnZJayRekgTJiXboNlzH7vosMmKt48MaCgDVCElaVZ6YENsskLbwF659xQ+WAp8hnqT8yGcnkFWpOmoem8FlCtm4WYHjSPnWjso7Lc29CXXD+mrxRNOscX6LjUA5pKYXJ4suYEcs423O0WhZEikaB1P07S8j/i2M1EAxnR+b4eeU6tmhuoFHOnImJRtCfJGgrG4Gp9FDJEVvmrG91bEz0syG7lhLd5xraDIvUiT9i1slC2tPrd28RZR5JkPByjPgdUJdW4C3wSgqWcxxYIDsyJD30Ikb2/xQEheRHp/G5MDs/tT6RZ7Gkvk+KxBg14Wgr5G3gMObhwOLfF9x7EMRuTwV29/L12KCmojv3UrSBMnqiTloVmqMCenAktwPZTQSUvXs2wgmWG633S4NVCv/NOdfivgeHy7bb9nN4JBcbYV8ArpDsTNTO2YeWxDPviW60JmCIQszHl1b82tPLOsojUTeH7B9ER9VJzMsDbTO1N7iUhkHNsrRWwZVnS0jJwXSyTpQ9xF7J52ld4X+pJMmtPAVIiUs3CIlqZI1GWLjXVHLOXZnMf7HSltmzhhXUJ4dnrqDeJz1QdbJ24OvrQxom7nUSanp5ki4zxGpmWapffOPJ6fN5B6yELE2PVEfTYU7fWnGc/tbtmsJndUk9Fruhp93WoO1A+2WN6U++j5/LnGOLgJK+l2O/9kbYo+X+tIy3axYXWf4az1RsbklWE8w44L7hhB7T6ryplGn3DAPBwp6Mr74QRF8Jl8V6OupbN29FDmaws7aW5EXJJ51sh8/lHYcEaLQMC2pdMTYRjA0Db9w+POclNWqB6OzzK+fmn2u5QfhODgJMh7imt33SWrVTV/7K7Z1dWX1qo9Mu2u25+G0xvP6Msoet/4Z1zSadLnhEbbvrrK19AYnj23gz6p949LCIF8/vjUUM/7vrLukLJt3Wg0vvVuC0uI9b4YkqwvwYg6L41a4M9ygMKj2BT8uLzTyPWPTvJPzzq04xlf5nrTEHIAz5+Df1+J+4/u0uf8jr0jC4dQSMooTFoHq4dZsxLXnoNeZ65p0aqVFNc1mSdbt1ClNIlAdMi3hct51byX0dAaAUb0gmaHJU1OceV6dH8TNTsPd/8wMmuSm+s6w9y1TIrzO9o6ZdGdj0LfVeVCJeSpnej6A30ZKZk2owZun1jOxIh6MOq4pjxidOXmBv6ZSFOxJgLfoUW8vBWJExWJFZkbt+k1xwlosVgtYR8HSNTp66OvXiAYgK2TQoelk+SL/LitFYjWXCn5ErnCmqlsiLEqk/mcmwjG3beom3SEQ4UtocG9NqxHLE0JlBp35B3TfIbzPaKiAH9hXlpSIjKXT2HpdFYUT/xq7Tw+1aVHS5/2wV5rMtNShQXEgpvzrYW8I2aE3AiwlUrM62SZp5ySZNVRJbb/VXQ5sGYbGI/BTY3eiSpzWsFoBCXSlTV662qiNQUa19zvmfGCt0z09N00mbXQPQ09N31TeJd9z8WQFR26HHqiYGuZ8Znk6OPx/sHDw2tj47aG+nzBozsFawo339yNSyBNj41eVN4dVymge6FTv2Gusosbh3xu6YZ0LV0ksypm3aA1wpjFMOC1u1fJU75imW7ckD+is29oXxZ3n7uophqi9u3EziP1/6dJKCfE1tG2htrc3DeRRmXdbZ10BDs0FP4ipqeRcIo2R5D7EKO2zzuG3YnTUO94ZxFi9LT5uWc+c4ksWOSfODJu4fHI9i+EdBDlUApyFgvS+8xzP/gX0pGTgQ==</source>
  </file>
  <file path="Message/Part/NonMimePart.php" generated-path="Message.Part.NonMimePart.html" hash="c8f74da59c5e1b91a1de4a9d7ac24eb0" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Part" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\MessagePart</extends>
      <name>NonMimePart</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\NonMimePart</full_name>
      <docblock line="19">
        <description>Represents part of a non-mime message.  The part could either be a plain text
part or a uuencoded attachment and could be extended for other pre-mime
message encoding types.</description>
        <long-description>This allows clients to handle all messages as mime messages by providing a
Content-Type header.  NonMimePart returns text/plain.</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="28" package="MailMimeParser">
        <name>$partStreamFilterManager</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::partStreamFilterManager</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;manages attached filters to $contentHandle&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="33" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::streamFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;for creating MessagePartStream objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="38" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::parent</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentPart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentPart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="44" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::stream</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;a Psr7 stream containing this part's headers,&#10;content and children&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="49" package="MailMimeParser">
        <name>$contentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::contentStream</full_name>
        <default></default>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;a Psr7 stream containing this part's content&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="55" package="MailMimeParser">
        <name>$charsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::charsetOverride</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="55" description="&lt;p&gt;can be used to set an override for content's charset in cases&#10;where a user wants to set a default other than ISO-8859-1.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$ignoreTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::ignoreTransferEncoding</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true when a user attaches a stream manually, it's&#10;assumed to already be decoded or to have relevant transfer encoding&#10;decorators attached already.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="26" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\NonMimePart::isTextPart()</full_name>
        <docblock line="26">
          <description>Returns true.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html#method_isTextPart"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="36" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentType()</full_name>
        <docblock line="36">
          <description>Returns text/plain</description>
          <long-description></long-description>
          <tag name="return" line="36" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html#method_getContentType"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="46" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\NonMimePart::getCharset()</full_name>
        <docblock line="46">
          <description>Returns ISO-8859-1</description>
          <long-description></long-description>
          <tag name="return" line="46" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html#method_getCharset"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="56" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentDisposition()</full_name>
        <docblock line="56">
          <description>Returns 'inline'.</description>
          <long-description></long-description>
          <tag name="return" line="56" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html#method_getContentDisposition"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="66" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\NonMimePart::getContentTransferEncoding()</full_name>
        <docblock line="66">
          <description>Returns '7bit'.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html#method_getContentTransferEncoding"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="76" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\NonMimePart::isMime()</full_name>
        <docblock line="76">
          <description>Returns false.</description>
          <long-description></long-description>
          <tag name="return" line="76" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html#method_isMime"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="70" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()</full_name>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="91" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__destruct()</full_name>
        <docblock line="91">
          <description>Overridden to close streams.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="108" package="MailMimeParser">
        <name>onChange</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::onChange()</full_name>
        <docblock line="108">
          <description>Called when operations change the content of the MessagePart.</description>
          <long-description>The function causes calls to getStream() to return a dynamic
MessagePartStream instead of the read stream for this MessagePart and all
parent MessageParts.</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="130" package="MailMimeParser">
        <name>markAsChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::markAsChanged()</full_name>
        <docblock line="130">
          <description>Marks the part as changed, forcing the part to be rewritten when saved.</description>
          <long-description>Normal operations to a MessagePart automatically mark the part as
changed and markAsChanged() doesn't need to be called in those cases.

The function can be called to indicate an external change that requires
rewriting this part, for instance changing a message from a non-mime
message to a mime one, would require rewriting non-mime children to
insure suitable headers are written.

Internally, the function discards the part's stream, forcing a stream to
be created when calling getStream().</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="142" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::hasContent()</full_name>
        <docblock line="142">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="142" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()</full_name>
        <docblock line="153">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="153" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="160" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()</full_name>
        <docblock line="160">
          <description>Returns the mime type of the content.</description>
          <long-description></long-description>
          <tag name="return" line="160" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="167" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()</full_name>
        <docblock line="167">
          <description>Returns the charset of the content, or null if not applicable/defined.</description>
          <long-description></long-description>
          <tag name="return" line="167" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="174" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()</full_name>
        <docblock line="174">
          <description>Returns the content's disposition.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="181" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()</full_name>
        <docblock line="181">
          <description>Returns the content-transfer-encoding used for this part.</description>
          <long-description></long-description>
          <tag name="return" line="181" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="188" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getFilename()</full_name>
        <docblock line="188">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="198" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()</full_name>
        <docblock line="198">
          <description>Returns true if the current part is a mime part.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="205" package="MailMimeParser">
        <name>getResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getResourceHandle()</full_name>
        <docblock line="205">
          <description>Rewrite me</description>
          <long-description></long-description>
          <tag name="return" line="205" description="the resource handle" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="215" package="MailMimeParser">
        <name>getStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getStream()</full_name>
        <docblock line="215">
          <description>Write me</description>
          <long-description></long-description>
          <tag name="return" line="215" description="the resource handle" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="241" package="MailMimeParser">
        <name>setCharsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setCharsetOverride()</full_name>
        <docblock line="241">
          <description>Overrides the default character set used for reading content from content
streams in cases where a user knows the source charset is not what is
specified.</description>
          <long-description>If set, the returned value from MessagePart::getCharset is ignored.

Note that setting an override on a Message and calling getTextStream,
getTextContent, getHtmlStream or getHtmlContent will not be applied to
those sub-parts, unless the text/html part is the Message itself.
Instead, Message:getTextPart() should be called, and setCharsetOverride
called on the returned MessagePart.</long-description>
          <tag name="param" line="241" description="" type="string" variable="$charsetOverride">
            <type>string</type>
          </tag>
          <tag name="param" line="241" description="&lt;p&gt;if true, $charsetOverride is used only if&#10;getCharset returns null.&lt;/p&gt;" type="boolean" variable="$onlyIfNoCharset">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetOverride</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$onlyIfNoCharset</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="267" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentResourceHandle()</full_name>
        <docblock line="267">
          <description>Returns a new resource stream handle for the part's content or null if
the part doesn't have a content section.</description>
          <long-description>The returned resource handle is a resource stream with decoding filters
appended to it.  The attached filters are determined by looking at the
part's Content-Transfer-Encoding and Content-Type headers unless a
charset override is set.  The following transfer encodings are supported:

- quoted-printable
- base64
- x-uuencode

In addition, the charset of the underlying stream is converted to the
passed $charset if the content is known to be text.</long-description>
          <tag name="param" line="267" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="291" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentStream()</full_name>
        <docblock line="291">
          <description>Returns the StreamInterface for the part's content or null if the part
doesn't have a content section.</description>
          <long-description>Because the returned stream may be a shared object if called multiple
times, the function isn't exposed publicly.  If called multiple times
with the same $charset, and the value of the part's
Content-Transfer-Encoding header not having changed, the returned stream
is the same instance and may need to be rewound.

Note that PartStreamFilterManager rewinds the stream before returning it.</long-description>
          <tag name="param" line="291" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="291" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="314" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContent()</full_name>
        <docblock line="314">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description>The returned string is encoded to the passed $charset character encoding,
defaulting to UTF-8.</long-description>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="328" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getParent()</full_name>
        <docblock line="328">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="328" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="341" package="MailMimeParser">
        <name>attachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::attachContentStream()</full_name>
        <docblock line="341">
          <description>Attaches the stream or resource handle for the part's content.  The
stream is closed when another stream is attached, or the MimePart is
destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="341" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="341" description="" type="string" variable="$streamCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamCharset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="359" package="MailMimeParser">
        <name>detachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::detachContentStream()</full_name>
        <docblock line="359">
          <description>Detaches and closes the content stream.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="372" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setContent()</full_name>
        <docblock line="372">
          <description>Sets the content of the part to the passed resource.</description>
          <long-description></long-description>
          <tag name="param" line="372" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="372" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="384" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::save()</full_name>
        <docblock line="384">
          <description>Saves the message/part as to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="384" description="" type="resource|\Psr\Http\Message\StreamInterface" variable="$streamOrHandle">
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamOrHandle</name>
          <default></default>
          <type>resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="401" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__toString()</full_name>
        <docblock line="401">
          <description>Returns the message/part as a string.</description>
          <long-description>Convenience method for calling getStream()-&gt;getContents().</long-description>
          <tag name="return" line="401" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
    </class>
    <source>eJytU82O0zAQvucp5hao1EYcEAuLRLUsBw4FxPa06sVJJo2RY1ueCbBC++6MHbdlD0Fd7foQy5OZ72fGfv/B976oFosCFrDtNUGnDYLsXgUG1wH3CLdXipGc3W2UNhs94DcVCAP44H5gwyspjvVroxu0hNAz+3dV5byc3BgaXLmwr/Jfqmpql/mwEnq4urmW8qqwakDyqpkl3G2QSO1xJ0e+LA66v6MPSGj5pFqBdXY5SCUMU80KxB9OCY0bTQuoxVuAGiXbG6UtMP7mCDihBImPI9rGtdiCYlZNPwgLKNtmCKmVErQxoZMClxBFTaKOUJkdEoy2e+A7jxQ7BseWK2PcL4LG6OSBHfRCIWOQHwcAySL41w9BfRcH8FMnWBXRPjorYni5FQ7oUbUYxPYXZ3MLGQLyGCwlp1UyfZSyViP34uFWqV63kCeQBtMYRfQAZ3JNkAcSY8WfAmSlmcQV55LJwoirQ/CwrycpUDtncqxKux9ruRzQjbZh7azcxa2wRYYXL1PCxBNXhoj4lyl4n76zOo6m58QQB2nmf+XskXObY5fnJJUnrvIcaZ9vvi4vLl6/Xb56orQ+PpTZTpUnnrNkldoabbGcnd6jGnatyTvSMTorMBOeJe5NrfmZpG2DstRh+JSf6ay+xHmOuk4ZetKtj29tTkYCP6i4L/4Cbx6tRg==</source>
  </file>
  <file path="Message/Part/ParentPart.php" generated-path="Message.Part.ParentPart.html" hash="b86ab1bffd9591a84c545087b54ff105" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="PartFilterFactory">\ZBateson\MailMimeParser\Message\PartFilterFactory</namespace-alias>
    <namespace-alias name="PartFilter">\ZBateson\MailMimeParser\Message\PartFilter</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Message\Part" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\MessagePart</extends>
      <name>ParentPart</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart</full_name>
      <docblock line="19">
        <description>A MessagePart that contains children.</description>
        <long-description>A MessagePart object may have any number of child parts, or may be a child
itself with its own parent or parents.</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="24" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::partFilterFactory</full_name>
        <default></default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;factory object responsible for create PartFilters&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="29" package="MailMimeParser">
        <name>$children</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::children</full_name>
        <default>array()</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;array of child parts&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="28" package="MailMimeParser">
        <name>$partStreamFilterManager</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::partStreamFilterManager</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;manages attached filters to $contentHandle&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="33" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::streamFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;for creating MessagePartStream objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="38" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::parent</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentPart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentPart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="44" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::stream</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;a Psr7 stream containing this part's headers,&#10;content and children&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="49" package="MailMimeParser">
        <name>$contentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::contentStream</full_name>
        <default></default>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;a Psr7 stream containing this part's content&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="55" package="MailMimeParser">
        <name>$charsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::charsetOverride</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="55" description="&lt;p&gt;can be used to set an override for content's charset in cases&#10;where a user wants to set a default other than ISO-8859-1.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$ignoreTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::ignoreTransferEncoding</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true when a user attaches a stream manually, it's&#10;assumed to already be decoded or to have relevant transfer encoding&#10;decorators attached already.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="39" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::__construct()</full_name>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="39" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="39" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="39" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$partFilterFactory">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="39" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="39" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="39" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()" refers="\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()" link="/classes/ZBateson.MailMimeParser.Message.Part.MessagePart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFilterFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="66" package="MailMimeParser">
        <name>getAllNonFilteredParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllNonFilteredParts()</full_name>
        <docblock line="66">
          <description>Returns all parts, including the current object, and all children below
it (including children of children, etc.</description>
          <long-description>..)</long-description>
          <tag name="return" line="66" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="94" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPart()</full_name>
        <docblock line="94">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MessagePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="94" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="94" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="94" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="113" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllParts()</full_name>
        <docblock line="113">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="113" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="113" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="134" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartCount()</full_name>
        <docblock line="134">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="134" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="134" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="147" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChild()</full_name>
        <docblock line="147">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="147" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="147" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="147" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="164" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildParts()</full_name>
        <docblock line="164">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="164" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="164" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="178" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildCount()</full_name>
        <docblock line="178">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="178" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="178" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="189" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartByMimeType()</full_name>
        <docblock line="189">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="189" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="189" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart|null">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="202" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllPartsByMimeType()</full_name>
        <docblock line="202">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="214" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getCountOfPartsByMimeType()</full_name>
        <docblock line="214">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="214" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="214" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="229" package="MailMimeParser">
        <name>addChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::addChild()</full_name>
        <docblock line="229">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="229" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="param" line="229" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="254" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removePart()</full_name>
        <docblock line="254">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="254" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="254" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="280" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removeAllParts()</full_name>
        <docblock line="280">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description>Note: the current part will not be removed.  Although the function naming
matches getAllParts, which returns the current part, it also doesn't only
remove direct children like getChildParts.  Internally this function uses
getAllParts but the current part is filtered out if returned.</long-description>
          <tag name="param" line="280" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="70" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()</full_name>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="91" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__destruct()</full_name>
        <docblock line="91">
          <description>Overridden to close streams.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="108" package="MailMimeParser">
        <name>onChange</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::onChange()</full_name>
        <docblock line="108">
          <description>Called when operations change the content of the MessagePart.</description>
          <long-description>The function causes calls to getStream() to return a dynamic
MessagePartStream instead of the read stream for this MessagePart and all
parent MessageParts.</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="130" package="MailMimeParser">
        <name>markAsChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::markAsChanged()</full_name>
        <docblock line="130">
          <description>Marks the part as changed, forcing the part to be rewritten when saved.</description>
          <long-description>Normal operations to a MessagePart automatically mark the part as
changed and markAsChanged() doesn't need to be called in those cases.

The function can be called to indicate an external change that requires
rewriting this part, for instance changing a message from a non-mime
message to a mime one, would require rewriting non-mime children to
insure suitable headers are written.

Internally, the function discards the part's stream, forcing a stream to
be created when calling getStream().</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="142" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::hasContent()</full_name>
        <docblock line="142">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="142" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()</full_name>
        <docblock line="153">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="153" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="160" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()</full_name>
        <docblock line="160">
          <description>Returns the mime type of the content.</description>
          <long-description></long-description>
          <tag name="return" line="160" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="167" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()</full_name>
        <docblock line="167">
          <description>Returns the charset of the content, or null if not applicable/defined.</description>
          <long-description></long-description>
          <tag name="return" line="167" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="174" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()</full_name>
        <docblock line="174">
          <description>Returns the content's disposition.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="181" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()</full_name>
        <docblock line="181">
          <description>Returns the content-transfer-encoding used for this part.</description>
          <long-description></long-description>
          <tag name="return" line="181" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="188" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getFilename()</full_name>
        <docblock line="188">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="198" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()</full_name>
        <docblock line="198">
          <description>Returns true if the current part is a mime part.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="205" package="MailMimeParser">
        <name>getResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getResourceHandle()</full_name>
        <docblock line="205">
          <description>Rewrite me</description>
          <long-description></long-description>
          <tag name="return" line="205" description="the resource handle" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="215" package="MailMimeParser">
        <name>getStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getStream()</full_name>
        <docblock line="215">
          <description>Write me</description>
          <long-description></long-description>
          <tag name="return" line="215" description="the resource handle" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="241" package="MailMimeParser">
        <name>setCharsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setCharsetOverride()</full_name>
        <docblock line="241">
          <description>Overrides the default character set used for reading content from content
streams in cases where a user knows the source charset is not what is
specified.</description>
          <long-description>If set, the returned value from MessagePart::getCharset is ignored.

Note that setting an override on a Message and calling getTextStream,
getTextContent, getHtmlStream or getHtmlContent will not be applied to
those sub-parts, unless the text/html part is the Message itself.
Instead, Message:getTextPart() should be called, and setCharsetOverride
called on the returned MessagePart.</long-description>
          <tag name="param" line="241" description="" type="string" variable="$charsetOverride">
            <type>string</type>
          </tag>
          <tag name="param" line="241" description="&lt;p&gt;if true, $charsetOverride is used only if&#10;getCharset returns null.&lt;/p&gt;" type="boolean" variable="$onlyIfNoCharset">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetOverride</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$onlyIfNoCharset</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="267" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentResourceHandle()</full_name>
        <docblock line="267">
          <description>Returns a new resource stream handle for the part's content or null if
the part doesn't have a content section.</description>
          <long-description>The returned resource handle is a resource stream with decoding filters
appended to it.  The attached filters are determined by looking at the
part's Content-Transfer-Encoding and Content-Type headers unless a
charset override is set.  The following transfer encodings are supported:

- quoted-printable
- base64
- x-uuencode

In addition, the charset of the underlying stream is converted to the
passed $charset if the content is known to be text.</long-description>
          <tag name="param" line="267" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="291" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentStream()</full_name>
        <docblock line="291">
          <description>Returns the StreamInterface for the part's content or null if the part
doesn't have a content section.</description>
          <long-description>Because the returned stream may be a shared object if called multiple
times, the function isn't exposed publicly.  If called multiple times
with the same $charset, and the value of the part's
Content-Transfer-Encoding header not having changed, the returned stream
is the same instance and may need to be rewound.

Note that PartStreamFilterManager rewinds the stream before returning it.</long-description>
          <tag name="param" line="291" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="291" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="314" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContent()</full_name>
        <docblock line="314">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description>The returned string is encoded to the passed $charset character encoding,
defaulting to UTF-8.</long-description>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="328" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getParent()</full_name>
        <docblock line="328">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="328" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="341" package="MailMimeParser">
        <name>attachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::attachContentStream()</full_name>
        <docblock line="341">
          <description>Attaches the stream or resource handle for the part's content.  The
stream is closed when another stream is attached, or the MimePart is
destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="341" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="341" description="" type="string" variable="$streamCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamCharset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="359" package="MailMimeParser">
        <name>detachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::detachContentStream()</full_name>
        <docblock line="359">
          <description>Detaches and closes the content stream.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="372" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setContent()</full_name>
        <docblock line="372">
          <description>Sets the content of the part to the passed resource.</description>
          <long-description></long-description>
          <tag name="param" line="372" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="372" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="384" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::save()</full_name>
        <docblock line="384">
          <description>Saves the message/part as to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="384" description="" type="resource|\Psr\Http\Message\StreamInterface" variable="$streamOrHandle">
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamOrHandle</name>
          <default></default>
          <type>resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="401" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__toString()</full_name>
        <docblock line="401">
          <description>Returns the message/part as a string.</description>
          <long-description>Convenience method for calling getStream()-&gt;getContents().</long-description>
          <tag name="return" line="401" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="39" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="189" code="PPC:ERR-50015">Argument $index is missing from the Docblock of getPartByMimeType</error>
      <error line="189" code="PPC:ERR-50014">Name of argument $index does not match with the DocBlock's name $mimeType in getPartByMimeType()</error>
    </parse_markers>
    <source>eJzNWd1z1DYQf7+/Qsxk4I5xLvQ1KVBIhykPoUzhiSTD6HzynYotu5KckKH8712tPix/xleYFj/cnc/a1Wr3t79dyT8/r/bV4uTx4wV5TN7vuSIZzxmB74pKTcqM6D0jH15SzVQpri4ozy94wd5SqZgklSz/ZKleg7CR/yXnKROKkb3W1enJSVnBXVnLlK1LuTtxT9XJRm2P3c0apicv3/0K4icLQQumKpqOTnh1wZSiO3YFt/pssahhrrdKXv0G84Vn77RktHgtNJMZ6DrDUXMUvuI5yLyiqS7l3aFi0+OtTe4rzOD9/oI4fUYdOJxqkpZCUy4USfc830omgo9prfelJB8o3fMtcfOh++hGaQm6SZpTpQgoY0KjSvZZM7FV8TSLLwsCF1pgLtB8QyXp+YFk7rvcmFATCREqheIbQEkGdqSwIs0iOeX0neA3IESDGNuSo6rv4kETIiMvrwmVkt4ZHKIjEJWjM3hfkafk8npAOwjTAk11gUBrLqiA6aQ1cOBBR7wVQ3Kk4tuBmdrO7DthQORlDcvwBrmbQSMCxr0Z940yqAJMvIsHOy/WG8hIktUi1bwU5ONHGAtK61Qv7UC4DvVcEiSnnJa09N/nr/boIVd1Z+15CeAh6jyfGNfykxuOo1fkS5CqML9OT2NXjXqiu2Z/n3QmW50F/Uca6Pj4Wc8DYM9oLqFctTlvEiH2zPGzHdP+2TKaimdk+YAVlb5bRtKreLWRRVGaYXZ+LGi1DMhZ2jRcEcOHS7fMribUhuOQn566G9CNdBJRQNBwNqEAvQQ+NIqMjf2xkulaikikPeRrErstmuvrwn52ueQP1KcIzXPLSQnhIs3rLRc7LJlpLdEiS5sJoWKLg4PzNiwvb706rsmykQ9jPO3B74Qwna7X65UTCanuVtZizRGCDDECGLzI8zelsBhi6BG1tLq/REgyfxs2tW4l141jgPsZTfcQ4Q4oqLJy3ZAbjOEDcJTSVKQMVudKZG9wa3YHMiZ3bNkb1YxMxp8h8MdXHF8dnH0lLAcc962zRlW12i/d9G7ZHflF/5fHIoqd3QMwgyX0GtX4e8dvwMlPjjdUQUS52LLPCYE6bCjK+FiUAts3xUxbhrq8yjeAA9tdGEUZl0pb1dYgo061sGujpRXLszWx3SH3xRewCaxFtkxxSX0z8FfNJGeK3HK9JzTic0DvercmeVl+MgA3Y6lXFPc+TlBVLOUZ1KNzy43H7+8qZ3oB3cCGEUU1VxkHmzd3xmavLDa9u35XFTk8PkLHjZZrcpTh90SSTVZPQJvlLhefvmZXVEYzzmWVha3FqpPs0jZXEGqHwUs74XWPuZ39Zsout/UQ6ZXMQWbs7qThN0+JhvSiPwyfUVdJTawCzVXGa/Dkjtg1OhItLB4wBWR5w7cQ7saV3fC+Hwc1zW/pXdtizzwNsC2ivbYG2EBoPOCOkhuaQ9/txRHKMw0chRn4KfiA3Iu8Lr33sRcg842469PlcMvggDkCOsuU4LaaqaW9sQJ9Mh8j8ktvfkIe2R+PyHVr1KpXs3u4noNnXWoIgaiLDbgK0GrdwgXB8tet4dME22ZRZbZ0ChACzkyIKnFIwQUv6sLzxXlZCx1R7E+I/7IG8newmA2pLn6A9OYwFlowHzZOeYpSE5S1muP7LZdmg2n54rBq59UNFL3/lPSxgfwurH/u+9Qfj/dNBrRihdJdv7/OWg0Anig5ikwwtO1ntKpyrObMNJbOMCgD/xrwBxFm5O3ZQcN+1o148NSNOZQBO81zMsx00+TWVjEn0xp+i+NoKnEtzG4ayW6ig/oudIM+/z58M5AssxjH9tVKlSmnZn/UdBvwJ9wXUOSJNq0nBJubYzSu+kh3ToFtqmlbjoyQaVcnAPl3OE+4h45f3l04bcugN3E8Bi56Mkgkr7wHxw4Qjp8Jduv+kWXheuz2LBHi2jjrtrbRlPf6nIrmOC9snGcHgIpwWIaBCHWgBAl5yxX79shcXnutc3usoRD9P2Fpqu4BIWnTgQ1IQTUQgjvHcJHoOu9AF8/hA5PUv2c/mFObpmieV3cATCZV7DrHMlAObbl071Smdqqv7ZCjqlQc/YNeZq5WQtNzjAeYhG63/RMCO61XFVRgvo5kSLwFx3UOdU9e02QgwSLbBPVUJtFyJioqrsTUU4xB7wSyuve0z9ZXVZkXTAM7jE7B7Q1YRlaGqv68XXK89IqcNovqq3oyuJHBBXY2L+0VuFlKcb6nYseWs44ji/KGuR1uaMpIBpBvqjnuX6RLfA6JHlZahgLuG2uodrdUiUdmgwtNwfhOh2cNABGbZrPSag8R784E2/r5rXkfo9YuW99MMYCdFxpq471MoWooEDeLRWSV9rmdL6jD0auDsd5wVXuL4XwwifvGpj7yh5jLwTccTr7Fv7obbHvqitngZB4+DD/vaTrdsONnkWndE8rB0804TV0yMSpTd86Z9FKIaFmzDoRtKns9xtKMmpnAfK4+cqRT97S3ZzFXK4l7EzY5R34aei8wnj89HzlFsw9tm53UeBI2rQ1mCITBltRwWOkrw/hRkcmv0/4pwi0H1QaQG+YQt10T8iI3hwQ72zkFRApaQEn2Cq0BKu5cEnK75+k+MEL/PA9IAKJWkm3JkApKkYcWzE7f20Dk/BNr76jAQHyzZs/3ENDBxlqxsHePLCObevgIJXOnUcSciQDGPJGMpPrV/Nf3nY3MVJIffrrWfVcydEQy473J07GqaC7zFpGLmo0hOUqMKUJw0P66+Af1Ekgs</source>
  </file>
  <file path="Message/Part/MessagePart.php" generated-path="Message.Part.MessagePart.html" hash="7f6915bff408bf1a6a1a102b290c9635" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Psr7">\GuzzleHttp\Psr7</namespace-alias>
    <namespace-alias name="StreamWrapper">\GuzzleHttp\Psr7\StreamWrapper</namespace-alias>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="MailMimeParser">\ZBateson\MailMimeParser\MailMimeParser</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Message\Part" line="23" package="MailMimeParser">
      <extends/>
      <name>MessagePart</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart</full_name>
      <docblock line="23">
        <description>Represents a single part of a message.</description>
        <long-description>A MessagePart object may have any number of child parts, or may be a child
itself with its own parent or parents.</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="28" package="MailMimeParser">
        <name>$partStreamFilterManager</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::partStreamFilterManager</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;manages attached filters to $contentHandle&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="33" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::streamFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;for creating MessagePartStream objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="38" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::parent</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentPart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentPart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="44" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::stream</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;a Psr7 stream containing this part's headers,&#10;content and children&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="49" package="MailMimeParser">
        <name>$contentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::contentStream</full_name>
        <default></default>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;a Psr7 stream containing this part's content&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="55" package="MailMimeParser">
        <name>$charsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::charsetOverride</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="55" description="&lt;p&gt;can be used to set an override for content's charset in cases&#10;where a user wants to set a default other than ISO-8859-1.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$ignoreTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::ignoreTransferEncoding</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true when a user attaches a stream manually, it's&#10;assumed to already be decoded or to have relevant transfer encoding&#10;decorators attached already.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="70" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()</full_name>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="91" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__destruct()</full_name>
        <docblock line="91">
          <description>Overridden to close streams.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="108" package="MailMimeParser">
        <name>onChange</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::onChange()</full_name>
        <docblock line="108">
          <description>Called when operations change the content of the MessagePart.</description>
          <long-description>The function causes calls to getStream() to return a dynamic
MessagePartStream instead of the read stream for this MessagePart and all
parent MessageParts.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="130" package="MailMimeParser">
        <name>markAsChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::markAsChanged()</full_name>
        <docblock line="130">
          <description>Marks the part as changed, forcing the part to be rewritten when saved.</description>
          <long-description>Normal operations to a MessagePart automatically mark the part as
changed and markAsChanged() doesn't need to be called in those cases.

The function can be called to indicate an external change that requires
rewriting this part, for instance changing a message from a non-mime
message to a mime one, would require rewriting non-mime children to
insure suitable headers are written.

Internally, the function discards the part's stream, forcing a stream to
be created when calling getStream().</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="142" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::hasContent()</full_name>
        <docblock line="142">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="142" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()</full_name>
        <docblock line="153">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="153" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="160" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()</full_name>
        <docblock line="160">
          <description>Returns the mime type of the content.</description>
          <long-description></long-description>
          <tag name="return" line="160" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="167" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()</full_name>
        <docblock line="167">
          <description>Returns the charset of the content, or null if not applicable/defined.</description>
          <long-description></long-description>
          <tag name="return" line="167" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="174" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()</full_name>
        <docblock line="174">
          <description>Returns the content's disposition.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="181" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()</full_name>
        <docblock line="181">
          <description>Returns the content-transfer-encoding used for this part.</description>
          <long-description></long-description>
          <tag name="return" line="181" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="188" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getFilename()</full_name>
        <docblock line="188">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="198" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()</full_name>
        <docblock line="198">
          <description>Returns true if the current part is a mime part.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="205" package="MailMimeParser">
        <name>getResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getResourceHandle()</full_name>
        <docblock line="205">
          <description>Rewrite me</description>
          <long-description></long-description>
          <tag name="return" line="205" description="the resource handle" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="215" package="MailMimeParser">
        <name>getStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getStream()</full_name>
        <docblock line="215">
          <description>Write me</description>
          <long-description></long-description>
          <tag name="return" line="215" description="the resource handle" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="241" package="MailMimeParser">
        <name>setCharsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setCharsetOverride()</full_name>
        <docblock line="241">
          <description>Overrides the default character set used for reading content from content
streams in cases where a user knows the source charset is not what is
specified.</description>
          <long-description>If set, the returned value from MessagePart::getCharset is ignored.

Note that setting an override on a Message and calling getTextStream,
getTextContent, getHtmlStream or getHtmlContent will not be applied to
those sub-parts, unless the text/html part is the Message itself.
Instead, Message:getTextPart() should be called, and setCharsetOverride
called on the returned MessagePart.</long-description>
          <tag name="param" line="241" description="" type="string" variable="$charsetOverride">
            <type>string</type>
          </tag>
          <tag name="param" line="241" description="&lt;p&gt;if true, $charsetOverride is used only if&#10;getCharset returns null.&lt;/p&gt;" type="boolean" variable="$onlyIfNoCharset">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetOverride</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$onlyIfNoCharset</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="267" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentResourceHandle()</full_name>
        <docblock line="267">
          <description>Returns a new resource stream handle for the part's content or null if
the part doesn't have a content section.</description>
          <long-description>The returned resource handle is a resource stream with decoding filters
appended to it.  The attached filters are determined by looking at the
part's Content-Transfer-Encoding and Content-Type headers unless a
charset override is set.  The following transfer encodings are supported:

- quoted-printable
- base64
- x-uuencode

In addition, the charset of the underlying stream is converted to the
passed $charset if the content is known to be text.</long-description>
          <tag name="param" line="267" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="291" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentStream()</full_name>
        <docblock line="291">
          <description>Returns the StreamInterface for the part's content or null if the part
doesn't have a content section.</description>
          <long-description>Because the returned stream may be a shared object if called multiple
times, the function isn't exposed publicly.  If called multiple times
with the same $charset, and the value of the part's
Content-Transfer-Encoding header not having changed, the returned stream
is the same instance and may need to be rewound.

Note that PartStreamFilterManager rewinds the stream before returning it.</long-description>
          <tag name="param" line="291" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="291" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="314" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContent()</full_name>
        <docblock line="314">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description>The returned string is encoded to the passed $charset character encoding,
defaulting to UTF-8.</long-description>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="328" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getParent()</full_name>
        <docblock line="328">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="328" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="341" package="MailMimeParser">
        <name>attachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::attachContentStream()</full_name>
        <docblock line="341">
          <description>Attaches the stream or resource handle for the part's content.  The
stream is closed when another stream is attached, or the MimePart is
destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="341" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="341" description="" type="string" variable="$streamCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamCharset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="359" package="MailMimeParser">
        <name>detachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::detachContentStream()</full_name>
        <docblock line="359">
          <description>Detaches and closes the content stream.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="372" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setContent()</full_name>
        <docblock line="372">
          <description>Sets the content of the part to the passed resource.</description>
          <long-description></long-description>
          <tag name="param" line="372" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="372" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="384" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::save()</full_name>
        <docblock line="384">
          <description>Saves the message/part as to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="384" description="" type="resource|\Psr\Http\Message\StreamInterface" variable="$streamOrHandle">
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamOrHandle</name>
          <default></default>
          <type>resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="401" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__toString()</full_name>
        <docblock line="401">
          <description>Returns the message/part as a string.</description>
          <long-description>Convenience method for calling getStream()-&gt;getContents().</long-description>
          <tag name="return" line="401" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="70" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="314" code="PPC:ERR-50015">Argument $charset is missing from the Docblock of getContent</error>
    </parse_markers>
    <source>eJzNWm1v2zgS/p5fwQWKTVrYCQ64veull3bbtL0GuL6gyWKBRYCAluhIV1nUilRdb7v//WbIoURRpO20PeD8oY2t4XBeODPPDPXPJ03RHJw8eHDAHrCrolRsWVaCwf8NbzWTS6YLwX57xrVQsr5+zcvqdbkS73irRMuaVv5HZPoYFuP6n6syE7USrNC6OT05kQ18k12biWPZ3p7QU3WyUPmcvhzD9uzZ5XNYfnJQ85VQDc+SG16/FkrxW3ENX/Wjg4MO9vpX98cflXgFO16/U+3fH8V+vL7UreCrX1veNKK1JPD7tSFwPC3NRa1FuwQZLFVSkNHX7bSWMf33kmdathsQnoz+XjStUKLWinGmyvoWzO9sz9nKCucs/JSRtO8MxQKtz1Z8wwr+UTBeb1jdrRbgGVicFWWVG1ZqxmRryBZAZB8gt1IrUS3ZutQF/s3kukZ6kAXp7V+qdy7vdAE//8Z5UeaMdDV+4wulW9CLZRVXyhfx4PMBg49RFT/A5iNvGT4ic5QV2Ps1r2EBioj/gyG05lkhcjyM8FgxLdm9TIJrav2K13kliN2J+R+OoQZDAP29Js4ZzB2TY+QStgTtMvhBgxN8JSwVWVuldlaBexN6gwbGd2RnlHeLLkCyVfT+tIJb8aAzKwVDW/GyRkV0QcF8qFgheA7mnDlO5kN2hdOT26MBu25X8nuKRLunNqTHl7QvPo3uDZsg54zXeMYhGnM8M0qgWkx+FG1b5sJ62HLErQuMT83KGtZBXhpZZV2IFlXoMM+tOYanY8hyseRdBUECubEFbWCLi8u384cPf/rH/C/HSVXsdm9JmIQRF1JWAhjiTrChbjuBstROFAoNkyysYSFoOl5VmxnE8OFYCYjGbmVNwSsgzk0GyEUmc/gVjAEPTOZoRSU+gpKwH6/VEvYRNRCBSUf8cGXL4YB7IUqMk2qXt7VsxRXxfUFsI9rDgQBtUqkhFdnB8nFEj4MySjocVyLeRTU6kWOluwVUNbbs6kyXsmY3N0ALTLtMH1lC+NxVv1m/cptqIdVEK3YGlaGqttCN9CJyQ32ffe5X3cPQnT9OyAqr0gk4YDESHxfG8ueEfiCcMAzlj6UO/JRLdhQo+8OZVdfX1HBOKAPSCPr9aLTALIocEPrcH6T488D+G0YBZYccAh5iM6sk4AqrsDrecdhyQWftviH4PNZ4ZMWkwj4VmBS3P5pIHfDc05YR4uQOU7ucQ4aDbGIyIcBKSEKgtEnh9a0wGNWVMYKsXv12hnO8ruBxb7eMQ1oFRsDfZPjb3rP38WsrdNdi8s03gE7LzPGYwoMSQh0Sodsfk6LL0Fh2TM3zwRuWW04hBgwJD3gUocP7lNrLLutzo//E42TsFW8/PFWWJvet7HmP9t3hNks1fzzsuNtlr2F3ZWxh4Cx33spnaJDMAgF6CJZeoM3WbanBi9bPCipTHjrvjWxXvPLPABa3sWU7LVfwEH26YWgEXwrHiIQxfggMxXIpVH2oWS1s8QTZMnsAASsAClbCIoYdJ6v2FgKXss5BJo04nYlPkE5qUKQ/wVyD/r93ZTsAEWuPEWIytjNnjdeQtc1qJOg7BbZs5Qq+1rKer6AHcbzcY2MtfACnR8zYWnbQJNDG3oZueY8IYaFjBbt3QKy6UvMFdCuEKhmcEUYODA1j6kxtUYr2jZSXKuNtPpwTwGU2aoZT0iOdQQS0KyJ1lxLQyEjqRe/2dBl4PIifkxMjD20Lpq+ltsk4h61NyoiXHeyxlC6rCsh8bj1awmOgj5nXoEL7BeSZAX2lZl1jNTLZXG76AGDTSojx+igRfO9N3lIWP5YmJbXiEFGjy5PEBiCizEprSewDnR9CD/5MmZDw6VbjFlyd210mliUuO2rH/loNjYQ5rXrTmOGFhvg6aSroN2b270KvKgS8IBrjjp158sBkAPM7AvuyBkscElY/RMe15aLTwtmDxQwSs0bfFPdmKdUVbIgpyqXPpH7ghEEfqihkq6QgtgXaTxSIE/LQFeywjziuWRoLYwYL6DL0BgYJbxrYEdPCCRnzu8lrBdhL1r7Fg/TSSFUij+9st+cD5zuINHf91dz1V7ZX7RGCH3rfy8NB67VLXG5GgDiLI7GodIKHoWRgdJFnB+ebRnhdqnSUpEX3JX5JG6fShp/xtlp8yHos69p+0oLCU/Xbaui7xDQO+tImxXoIsSxSO0G1NwNSwoz0pYjMuKbWek/kdiKWstlo9Hl66q1zSdgrmsnM++tYj1CNsJv8Cm2cCDubl7MEVCVRYv3l/HEt1hPIbvlG25ugEQJcBODNB72xzVK2cxMfmwnc8AgTKkgHXTOm1T4LYN9gJllUpg2cGw/JXEPYD67Gw6oPtVzbrcj+/ZzL4pg1Qs2yB5mqEVm5LCOJ+mKJos3ImagvyPiRVx2BTM+g5lydD/vYoc+U5RvoYSzWBUIDNP3xnKwHJG/HkQOsw9Jp3dZPL+nXc1eK4PsrKPNuXNu6H4jAAi20AE7BsU4ZPNaDAQPrVbeY08i8qysQxWg/QAiXRbwWk8bova4XthGcueenJKct/EwVBnL3ncHMaKp687nT0vcptn+Q9dgPkf52SC52dEUz0XDwGFC5geM9WVebi+Ub2btxafLobMIA9TfnFVcAmWNIH+8ktJSPMVy34/Gp/kfhtrOpiGdsySslYjnjhwnxly9sSHg9mkimE4dQA93PIoPccf5Iw1boysR6yIuUz2x6HNXaYS7u4avhoFJBdl2qvfsZgL3IfLzj96b96Qlys62LoWCmHzDDYjxGdBXj2GE5qXOvo0H+k3sbbAlzAX+uDK5ebFgl5QcT9xoVcdxIaYrUuYMsc4dZTIz0TxEUu6aTorTH9D1O9Q4rfCcBl7Kq5Np01OGg2wqruqaRLXRDp4H55uz3DpJXPm8gqEzfOzxZQBL+21+H75/mXWfYhuXyAhJcnhvQOIuh6g4s2lYblG/oPcGvoIu2ph7ZTCnvXqHHO3QMYCVWgprmF5jCJj1dNE+kIMquAk7uCVBJL94ZG1+Lnp4+f/Hy6S//vro5f/X0/eWLq8kQaxj5DmHr94s973CytWPKuQcwshyi0CACRbcB/xAZ7Qzz/qnjdrcwf0bjiVGxUMN0wtwAK7Ab5m97fwx7UpFZATApm+Foa/CWCiY2pRFGfGrMNMSeg2oD8XUxYWPXO2b9eEFha+F8Z8sf/myRhVx65nFL03nBpgFT1cE+Bji5IWPEAo4fFXAjSD9Ls4PAjT/0A9wnISanM0iHYlK3ORYwKn+KtBDgeicRClp+ZTwGJ2rPsAxC5u7h6AFxf74zLZt4DeQo45d/99kTdnjITqeBnepVe+5Z4XEPa/MQ8E9S5fs0hgEexdLD9quuSDYaMSFTzKY/ZkX0R8/V9Pna7HNZQAHLOm2vL2w34d3Bu6t+qB7gHXsQ7VTYnjuIZMpfjmGYmJIZyWwyQaNXQRyaLZWtu31Rm1SzoT1yBbrH/dRBmSou2S9XL+cPU9PK/cYO7jD//9aqe64THfiq+MXcncrTMD21FzwpM17v8z7WNf2ud5nbvgWTmleMbpxSKjx1b0F4CdY0z2NYGy+2FguOm2kDtOyA375tUduXO4anDtuaqZdp/0hdr5cOh/ZhZt/vlQOX/+3D81EViBvVyjY+cIm9ZgHfbyoE8fE9+/HH+O0IEjho9S3Xw6kF0bcD/scVw75OUIyVH1vYqJ0V+zeYo+VblI9XV+CAffvkBYk9XmaY4l5aG977TiPyuXDvJeHcBv02GnwHxSF+jHMxPcaJq+3Y2ypfo7F33XQndS+FHuvn4dagpLmktBXtfXFUXyZxG/Rf21FierriapxjN8x1vqXcmbdr7bcbyLYD+6lRY0lqSErT8mguYX1veHfwEV4pRwFGoQs1W6tO3NsIcS9R6Ug4K+0lq8jbNvZ6augNEOkoWDCxsLuv9xGFC4lHE7LYiHqLk4K9hzWGMpPN5kbLG0U+oj36yjH2US4RCto3lezrOZ2JBgVsRCjM/LGN8XRgja5AA4/1EDVwzjlOSOpSYBe3ErqQdpQeeSkgAFDfABtvwEKXhmwHkEnv7kzw58F/Abcnm9M=</source>
  </file>
  <file path="Message/Part/ParentHeaderPart.php" generated-path="Message.Part.ParentHeaderPart.html" hash="79b850b7639bd99e7c1f68080a63463f" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="ParameterHeader">\ZBateson\MailMimeParser\Header\ParameterHeader</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <namespace-alias name="PartFilterFactory">\ZBateson\MailMimeParser\Message\PartFilterFactory</namespace-alias>
    <namespace-alias name="HeaderContainer">\ZBateson\MailMimeParser\Header\HeaderContainer</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Message\Part" line="20" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\ParentPart</extends>
      <name>ParentHeaderPart</name>
      <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</full_name>
      <docblock line="20">
        <description>A parent part containing headers.</description>
        <long-description>A MessagePart object may have any number of child parts, or may be a child
itself with its own parent or parents.</long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\ParentPart" refers="\ZBateson\MailMimeParser\Message\Part\ParentPart" link="/classes/ZBateson.MailMimeParser.Message.Part.ParentPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="25" package="MailMimeParser">
        <name>$headerContainer</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::headerContainer</full_name>
        <default></default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="" type="\ZBateson\MailMimeParser\Header\HeaderContainer" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderContainer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="24" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::partFilterFactory</full_name>
        <default></default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;factory object responsible for create PartFilters&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="29" package="MailMimeParser">
        <name>$children</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::children</full_name>
        <default>array()</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;array of child parts&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="28" package="MailMimeParser">
        <name>$partStreamFilterManager</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::partStreamFilterManager</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;manages attached filters to $contentHandle&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="33" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::streamFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;for creating MessagePartStream objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="38" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::parent</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentPart" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentPart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="44" package="MailMimeParser">
        <name>$stream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::stream</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="44" description="&lt;p&gt;a Psr7 stream containing this part's headers,&#10;content and children&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="49" package="MailMimeParser">
        <name>$contentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::contentStream</full_name>
        <default></default>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;a Psr7 stream containing this part's content&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="55" package="MailMimeParser">
        <name>$charsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::charsetOverride</full_name>
        <default></default>
        <docblock line="55">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="55" description="&lt;p&gt;can be used to set an override for content's charset in cases&#10;where a user wants to set a default other than ISO-8859-1.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>$ignoreTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::ignoreTransferEncoding</full_name>
        <default></default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;set to true when a user attaches a stream manually, it's&#10;assumed to already be decoded or to have relevant transfer encoding&#10;decorators attached already.&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="35" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::__construct()</full_name>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="35" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="35" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="35" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$partFilterFactory">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="35" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="35" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="35" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\ParentPart::__construct()" refers="\ZBateson\MailMimeParser\Message\Part\ParentPart::__construct()" link="/classes/ZBateson.MailMimeParser.Message.Part.ParentPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFilterFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="62" package="MailMimeParser">
        <name>getHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeader()</full_name>
        <docblock line="62">
          <description>Returns the AbstractHeader object for the header with the given $name</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="73" package="MailMimeParser">
        <name>getAllHeadersByName</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getAllHeadersByName()</full_name>
        <docblock line="73">
          <description>Returns an array of headers that match the passed name.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="84" package="MailMimeParser">
        <name>getRawHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getRawHeaders()</full_name>
        <docblock line="84">
          <description>Returns an array of all headers for the mime part with the first element
holding the name, and the second its value.</description>
          <long-description></long-description>
          <tag name="return" line="84" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="98" package="MailMimeParser">
        <name>getRawHeaderIterator</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getRawHeaderIterator()</full_name>
        <docblock line="98">
          <description>Returns an iterator to the headers in this collection.  Each returned
element is an array with its first element set to the header's name, and
the second to its raw value:</description>
          <long-description>[ 'Header-Name', 'Header Value' ]</long-description>
          <tag name="return" line="98" description="" type="\Iterator">
            <type>\Iterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="112" package="MailMimeParser">
        <name>getHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeaderValue()</full_name>
        <docblock line="112">
          <description>Returns the string value for the header with the given $name.</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="112" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="112" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="112" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="135" package="MailMimeParser">
        <name>getHeaderParameter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::getHeaderParameter()</full_name>
        <docblock line="135">
          <description>Returns a parameter of the header $header, given the parameter named
$param.</description>
          <long-description>Only headers of type
\ZBateson\MailMimeParser\Header\ParameterHeader have parameters.
Content-Type and Content-Disposition are examples of headers with
parameters. "Charset" is a common parameter of Content-Type.</long-description>
          <tag name="param" line="135" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="" type="string" variable="$param">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="135" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>setRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::setRawHeader()</full_name>
        <docblock line="153">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="153" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="153" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="168" package="MailMimeParser">
        <name>addRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::addRawHeader()</full_name>
        <docblock line="168">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="168" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="168" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="179" package="MailMimeParser">
        <name>removeHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::removeHeader()</full_name>
        <docblock line="179">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="179" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="190" package="MailMimeParser">
        <name>removeSingleHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart::removeSingleHeader()</full_name>
        <docblock line="190">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="190" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="70" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__construct()</full_name>
        <docblock line="70">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager" variable="$partStreamFilterManager">
            <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
          </tag>
          <tag name="param" line="70" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="70" description="" type="\Psr\Http\Message\StreamInterface" variable="$contentStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partStreamFilterManager</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartStreamFilterManager</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="66" package="MailMimeParser">
        <name>getAllNonFilteredParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllNonFilteredParts()</full_name>
        <docblock line="66">
          <description>Returns all parts, including the current object, and all children below
it (including children of children, etc.</description>
          <long-description>..)</long-description>
          <tag name="return" line="66" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="94" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPart()</full_name>
        <docblock line="94">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MessagePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="94" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="94" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="94" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="113" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllParts()</full_name>
        <docblock line="113">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="113" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="113" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="134" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartCount()</full_name>
        <docblock line="134">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="134" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="134" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="147" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChild()</full_name>
        <docblock line="147">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="147" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="147" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="147" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="164" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildParts()</full_name>
        <docblock line="164">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="164" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="164" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="178" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getChildCount()</full_name>
        <docblock line="178">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="178" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="178" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="189" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getPartByMimeType()</full_name>
        <docblock line="189">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="189" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="189" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart|null">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="202" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getAllPartsByMimeType()</full_name>
        <docblock line="202">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\Part\MessagePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="214" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::getCountOfPartsByMimeType()</full_name>
        <docblock line="214">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="214" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="214" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="229" package="MailMimeParser">
        <name>addChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::addChild()</full_name>
        <docblock line="229">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="229" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="param" line="229" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="254" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removePart()</full_name>
        <docblock line="254">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="254" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="254" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="280" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\ParentPart::removeAllParts()</full_name>
        <docblock line="280">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description>Note: the current part will not be removed.  Although the function naming
matches getAllParts, which returns the current part, it also doesn't only
remove direct children like getChildParts.  Internally this function uses
getAllParts but the current part is filtered out if returned.</long-description>
          <tag name="param" line="280" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\ParentPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="91" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__destruct()</full_name>
        <docblock line="91">
          <description>Overridden to close streams.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Part" line="108" package="MailMimeParser">
        <name>onChange</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::onChange()</full_name>
        <docblock line="108">
          <description>Called when operations change the content of the MessagePart.</description>
          <long-description>The function causes calls to getStream() to return a dynamic
MessagePartStream instead of the read stream for this MessagePart and all
parent MessageParts.</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="130" package="MailMimeParser">
        <name>markAsChanged</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::markAsChanged()</full_name>
        <docblock line="130">
          <description>Marks the part as changed, forcing the part to be rewritten when saved.</description>
          <long-description>Normal operations to a MessagePart automatically mark the part as
changed and markAsChanged() doesn't need to be called in those cases.

The function can be called to indicate an external change that requires
rewriting this part, for instance changing a message from a non-mime
message to a mime one, would require rewriting non-mime children to
insure suitable headers are written.

Internally, the function discards the part's stream, forcing a stream to
be created when calling getStream().</long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="142" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::hasContent()</full_name>
        <docblock line="142">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="142" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="153" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isTextPart()</full_name>
        <docblock line="153">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="153" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="160" package="MailMimeParser">
        <name>getContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentType()</full_name>
        <docblock line="160">
          <description>Returns the mime type of the content.</description>
          <long-description></long-description>
          <tag name="return" line="160" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="167" package="MailMimeParser">
        <name>getCharset</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getCharset()</full_name>
        <docblock line="167">
          <description>Returns the charset of the content, or null if not applicable/defined.</description>
          <long-description></long-description>
          <tag name="return" line="167" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="174" package="MailMimeParser">
        <name>getContentDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentDisposition()</full_name>
        <docblock line="174">
          <description>Returns the content's disposition.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="181" package="MailMimeParser">
        <name>getContentTransferEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentTransferEncoding()</full_name>
        <docblock line="181">
          <description>Returns the content-transfer-encoding used for this part.</description>
          <long-description></long-description>
          <tag name="return" line="181" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="188" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getFilename()</full_name>
        <docblock line="188">
          <description>Returns a filename for the part if one is defined, or null otherwise.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="198" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::isMime()</full_name>
        <docblock line="198">
          <description>Returns true if the current part is a mime part.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="205" package="MailMimeParser">
        <name>getResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getResourceHandle()</full_name>
        <docblock line="205">
          <description>Rewrite me</description>
          <long-description></long-description>
          <tag name="return" line="205" description="the resource handle" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="215" package="MailMimeParser">
        <name>getStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getStream()</full_name>
        <docblock line="215">
          <description>Write me</description>
          <long-description></long-description>
          <tag name="return" line="215" description="the resource handle" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="241" package="MailMimeParser">
        <name>setCharsetOverride</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setCharsetOverride()</full_name>
        <docblock line="241">
          <description>Overrides the default character set used for reading content from content
streams in cases where a user knows the source charset is not what is
specified.</description>
          <long-description>If set, the returned value from MessagePart::getCharset is ignored.

Note that setting an override on a Message and calling getTextStream,
getTextContent, getHtmlStream or getHtmlContent will not be applied to
those sub-parts, unless the text/html part is the Message itself.
Instead, Message:getTextPart() should be called, and setCharsetOverride
called on the returned MessagePart.</long-description>
          <tag name="param" line="241" description="" type="string" variable="$charsetOverride">
            <type>string</type>
          </tag>
          <tag name="param" line="241" description="&lt;p&gt;if true, $charsetOverride is used only if&#10;getCharset returns null.&lt;/p&gt;" type="boolean" variable="$onlyIfNoCharset">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetOverride</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$onlyIfNoCharset</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="267" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentResourceHandle()</full_name>
        <docblock line="267">
          <description>Returns a new resource stream handle for the part's content or null if
the part doesn't have a content section.</description>
          <long-description>The returned resource handle is a resource stream with decoding filters
appended to it.  The attached filters are determined by looking at the
part's Content-Transfer-Encoding and Content-Type headers unless a
charset override is set.  The following transfer encodings are supported:

- quoted-printable
- base64
- x-uuencode

In addition, the charset of the underlying stream is converted to the
passed $charset if the content is known to be text.</long-description>
          <tag name="param" line="267" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="291" package="MailMimeParser">
        <name>getContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContentStream()</full_name>
        <docblock line="291">
          <description>Returns the StreamInterface for the part's content or null if the part
doesn't have a content section.</description>
          <long-description>Because the returned stream may be a shared object if called multiple
times, the function isn't exposed publicly.  If called multiple times
with the same $charset, and the value of the part's
Content-Transfer-Encoding header not having changed, the returned stream
is the same instance and may need to be rewound.

Note that PartStreamFilterManager rewinds the stream before returning it.</long-description>
          <tag name="param" line="291" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="291" description="" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="314" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getContent()</full_name>
        <docblock line="314">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description>The returned string is encoded to the passed $charset character encoding,
defaulting to UTF-8.</long-description>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="328" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::getParent()</full_name>
        <docblock line="328">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="328" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="341" package="MailMimeParser">
        <name>attachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::attachContentStream()</full_name>
        <docblock line="341">
          <description>Attaches the stream or resource handle for the part's content.  The
stream is closed when another stream is attached, or the MimePart is
destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="341" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="341" description="" type="string" variable="$streamCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$streamCharset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="359" package="MailMimeParser">
        <name>detachContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::detachContentStream()</full_name>
        <docblock line="359">
          <description>Detaches and closes the content stream.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="372" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::setContent()</full_name>
        <docblock line="372">
          <description>Sets the content of the part to the passed resource.</description>
          <long-description></long-description>
          <tag name="param" line="372" description="" type="string|resource|\Psr\Http\Message\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="param" line="372" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="384" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::save()</full_name>
        <docblock line="384">
          <description>Saves the message/part as to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="384" description="" type="resource|\Psr\Http\Message\StreamInterface" variable="$streamOrHandle">
            <type>resource</type>
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamOrHandle</name>
          <default></default>
          <type>resource|\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Part" line="401" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\MessagePart::__toString()</full_name>
        <docblock line="401">
          <description>Returns the message/part as a string.</description>
          <long-description>Convenience method for calling getStream()-&gt;getContents().</long-description>
          <tag name="return" line="401" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\MessagePart</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="35" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="62" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of getHeader</error>
      <error line="62" code="PPC:ERR-50014">Name of argument $offset does not match with the DocBlock's name $name in getHeader()</error>
      <error line="153" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of setRawHeader</error>
      <error line="153" code="PPC:ERR-50014">Name of argument $offset does not match with the DocBlock's name $value in setRawHeader()</error>
      <error line="190" code="PPC:ERR-50015">Argument $offset is missing from the Docblock of removeSingleHeader</error>
      <error line="190" code="PPC:ERR-50014">Name of argument $offset does not match with the DocBlock's name $name in removeSingleHeader()</error>
      <error line="25" code="PPC:ERR-50007">No summary for property $headerContainer</error>
    </parse_markers>
    <source>eJzlV0tv2zgQvvtXzBZG4waxvedk+0jSDdpDukFS7KFxUDASbXFBUwJJOTWK/PcdvhSKll8pAiywvsgUZ74ZfvOi/nhfFVVvfHjYg0P4WjAFU8Yp4LMiUkM5BV1Q+HZGNFWlmFwSxi/ZnF4RqaiESpb/0EyPUNnof+Aso0JRKLSujsfjssJVWcuMjko5G/tdNb5X+dAvRmgezm4+ovq4J8icqopkaw1OLqlSZEYnuNQnvV6Ntq6UnHxCe83ejZaUzD8LTeUUsU6s1DrAT5Tk+MAV2kYNt96s4wz4xwXJdCmXmzVity8YRzs7qXnn3OO8FJowYZwL8To1QaJCu1hlToCJGRRWQzVxIbUuSgnfCClYDt6apZzcKy3RF8g4UQquLJ4zaJwF+kNTkYcN86r3swf4sy6YH8IviITESb83tk9ME41pQnPoFytnScEqEwpjT3uCLV+XRCCBEvpV90ai3ooN9FW87LDUiomz0XrVoXJWM54Hh/yi04kmEYMb26RMHJHrm1jY81jfY9nAtBaZZqWA799RFkHrTA+cIP72Ze6o0dxE2lELfxtfbekuqlKrKyzBWxA15xvkWjx5cSv9Bn42Wq5Ajo87qTK/7bRYqTVkNAhrjt/srxw7Qk1edsTfHOqk+dvX2KeH75JSQgZiS8N3M6qTohx4kMeVqrumupZC2WZ/6luCU4by3rR4mGL/MLvOKjwwXdj1jC2ogL5p3R4sYH7BokcRomGOLS30JDABOcB+Q7DxKRwBTCPCKNH1tYGOmHYWo8MHaX2FyZau2T7GxjpqmBpYS0fQL6dTRTVS+vsbq/GUUN56dwws6QnIVs6JQE4kWZphG0hytBGdOZIr7M3YPQ3uizN1e7eNq1POnag6W35Be+7A+xOFOF51H4oI5w1NISltgtkh2OTllEmF44vTOdZSwCtKnhuajIALEhG5XSmKZZcD0woWhNerNPvjOJ5v77azdE0ePEuD/alpNHdghmHjIdowUUYVqoAJMAbwXsA5tW6NAP4kmFLOPs0DmGfJ3Poapi2Rho4WkWCqomXnQD0xGfAiQlHWgEjy4Hg9Tni9hQN31qHJpIOjsIS/jfQB3K2Jw+SzP/XOYQgKz4jGk+ou/dOXoj3uLm0zTbWX6pvtrZxOSc21pbk7yXdrmRagaXkxqh/JKd3+CmjGlWM86b7RoGNTGATx3956uAgqjp4Ts2jOpQjncSXWsZ9bSwyq8HUQvoe8T97okY+m69RB1JylqYi+fZ9G6y/Bl018DfSyamKxrWknXyxQkEVkXQVTcO5uE8OviG27XXjxkamqNFlUmpKneNMn84pTFY8hk64BKMKGV+eFcUa/si0DO8x8jigtmmK7W7K0iCd0umlXL5zDDZeDJqLO7o4ZjVekznR2YGlCG+nXr50WwzspERlFwpKArstz1HpK8gvsSZ2e/nLyn+a5ieyGtmWTqd85LM/x5oq5i/qCPux5/Qj3zWicSDpjStuRhu+f3Hp+81tEGdOdGyqaHE13s2obb4frhoiKroVtlNV7fSmwusSMrp82//fgkDxfE5xd44EIieIzwnBN5+WCqg3zveOraD0P3WeV1khrQO54RqeZXrL/qye8QWFOk5juX2gOrPsTbOPRH3v/AsLbcj8=</source>
  </file>
  <file path="Message/PartFilter.php" generated-path="Message.PartFilter.html" hash="52dd0532d2a5dc9101e09cd80854fe2f" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="MessagePart">\ZBateson\MailMimeParser\Message\Part\MessagePart</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\Part\MimePart</namespace-alias>
    <namespace-alias name="InvalidArgumentException">\InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="44" package="MailMimeParser">
      <extends/>
      <name>PartFilter</name>
      <full_name>\ZBateson\MailMimeParser\Message\PartFilter</full_name>
      <docblock line="44">
        <description>Provides a way to define a filter of MessagePart for use in various calls to
add/remove MessagePart.</description>
        <long-description>A PartFilter is defined as a set of properties in the class, set to either be
'included' or 'excluded'.  The filter is simplistic in that a property
defined as included must be set on a part for it to be passed, and an
excluded filter must not be set for the part to be passed.  There is no
provision for creating logical conditions.

The only property set by default is $signedpart, which defaults to
FILTER_EXCLUDE.

A PartFilter can be instantiated with an array of keys matching class
properties, and values to set them for convenience.

```php
$inlineParts = $message-&gt;getAllParts(new PartFilter([
    'multipart' =&gt; PartFilter::FILTER_INCLUDE,
    'headers' =&gt; [
        FILTER_EXCLUDE =&gt; [
            'Content-Disposition': 'attachment'
        ]
    ]
]));

$inlineTextPart = $message-&gt;getAllParts(PartFilter::fromInlineContentType('text/plain'));
```</long-description>
        <tag name="author" line="44" description="Zaahid Bateson"/>
        <tag name="package" line="44" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Message" line="49" package="MailMimeParser">
        <name>FILTER_OFF</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</full_name>
        <value>0</value>
        <docblock line="49">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="49" description="&lt;p&gt;indicates a filter is not in use&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ZBateson\MailMimeParser\Message" line="54" package="MailMimeParser">
        <name>FILTER_EXCLUDE</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_EXCLUDE</full_name>
        <value>1</value>
        <docblock line="54">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="54" description="&lt;p&gt;an excluded filter must not be included in a part&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ZBateson\MailMimeParser\Message" line="59" package="MailMimeParser">
        <name>FILTER_INCLUDE</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_INCLUDE</full_name>
        <value>2</value>
        <docblock line="59">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="59" description="&lt;p&gt;an included filter must be included in a part&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="64" package="MailMimeParser">
        <name>$hascontent</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::hascontent</full_name>
        <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
        <docblock line="64">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="64" description="&lt;p&gt;filters based on whether MessagePart::hasContent is true&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="69" package="MailMimeParser">
        <name>$multipart</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::multipart</full_name>
        <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
        <docblock line="69">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="69" description="&lt;p&gt;filters based on whether MimePart::isMultiPart is true&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="74" package="MailMimeParser">
        <name>$textpart</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::textpart</full_name>
        <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
        <docblock line="74">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="74" description="&lt;p&gt;filters based on whether MessagePart::isTextPart is true&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="81" package="MailMimeParser">
        <name>$signedpart</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::signedpart</full_name>
        <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_EXCLUDE</default>
        <docblock line="81">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="81" description="&lt;p&gt;filters based on whether the parent of a part is a&#10;multipart/signed part and this part has a content-type equal to its&#10;parent's 'protocol' parameter in its content-type header&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="86" package="MailMimeParser">
        <name>$hashCode</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::hashCode</full_name>
        <default></default>
        <docblock line="86">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="86" description="&lt;p&gt;calculated hash of the filter&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="100" package="MailMimeParser">
        <name>$headers</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::headers</full_name>
        <default>array()</default>
        <docblock line="100">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="100" description="&lt;p&gt;array of header rules.  The top-level contains keys of&#10;FILTER_INCLUDE and/or FILTER_EXCLUDE, which contain key =&gt; value mapping&#10;of header names =&gt; values to search for.  Note that when searching&#10;MimePart::getHeaderValue is used (so additional parameters need not be&#10;matched) and strcasecmp is used.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$filter = new PartFilter();&#10;$filter-&gt;headers = [ PartFilter::FILTER_INCLUDE =&gt; [ 'Content-Type' =&gt; 'text/plain' ] ];&lt;/code&gt;&lt;/pre&gt;" type="array&lt;mixed,string[]&gt;" variable="">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="108" package="MailMimeParser">
        <name>fromContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::fromContentType()</full_name>
        <docblock line="108">
          <description>Convenience method to filter for a specific mime type.</description>
          <long-description></long-description>
          <tag name="param" line="108" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="108" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="126" package="MailMimeParser">
        <name>fromInlineContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::fromInlineContentType()</full_name>
        <docblock line="126">
          <description>Convenience method to look for parts of a specific mime-type, and that
do not specifically have a Content-Disposition equal to 'attachment'.</description>
          <long-description></long-description>
          <tag name="param" line="126" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="126" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="148" package="MailMimeParser">
        <name>fromDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::fromDisposition()</full_name>
        <docblock line="148">
          <description>Convenience method to search for parts with a specific
Content-Disposition, optionally including multipart parts.</description>
          <long-description></long-description>
          <tag name="param" line="148" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
          <tag name="param" line="148" description="" type="integer" variable="$multipart">
            <type>integer</type>
          </tag>
          <tag name="return" line="148" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$multipart</name>
          <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="169" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__construct()</full_name>
        <docblock line="169">
          <description>Constructs a PartFilter, optionally instantiating member variables with
values in the passed array.</description>
          <long-description>The passed array must use keys equal to member variable names, e.g.
'multipart', 'textpart', 'signedpart' and 'headers'.</long-description>
          <tag name="param" line="169" description="" type="array" variable="$filter">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="188" package="MailMimeParser">
        <name>validateArgument</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::validateArgument()</full_name>
        <docblock line="188">
          <description>Validates an argument passed to __set to insure it's set to a value in
$valid.</description>
          <long-description></long-description>
          <tag name="param" line="188" description="&lt;p&gt;Name of the member variable&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="188" description="&lt;p&gt;The value to test&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="188" description="&lt;p&gt;an array of valid values&lt;/p&gt;" type="array" variable="$valid">
            <type>array</type>
          </tag>
          <tag name="throws" line="188" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$valid</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="207" package="MailMimeParser">
        <name>setHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::setHeaders()</full_name>
        <docblock line="207">
          <description>Sets the PartFilter's headers filter to the passed array after validating
it.</description>
          <long-description></long-description>
          <tag name="param" line="207" description="" type="array" variable="$headers">
            <type>array</type>
          </tag>
          <tag name="throws" line="207" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headers</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="234" package="MailMimeParser">
        <name>__set</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__set()</full_name>
        <docblock line="234">
          <description>Sets the member variable denoted by $name to the passed $value after
validating it.</description>
          <long-description></long-description>
          <tag name="param" line="234" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="234" description="" type="integer|array" variable="$value">
            <type>integer</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="234" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>integer|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="262" package="MailMimeParser">
        <name>__isset</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__isset()</full_name>
        <docblock line="262">
          <description>Returns true if the variable denoted by $name is a member variable of
PartFilter.</description>
          <long-description></long-description>
          <tag name="param" line="262" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="262" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="273" package="MailMimeParser">
        <name>__get</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__get()</full_name>
        <docblock line="273">
          <description>Returns the value of the member variable denoted by $name</description>
          <long-description></long-description>
          <tag name="param" line="273" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="273" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="285" package="MailMimeParser">
        <name>failsHasContentFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsHasContentFilter()</full_name>
        <docblock line="285">
          <description>Returns true if the passed MessagePart fails the filter's hascontent
filter settings.</description>
          <long-description></long-description>
          <tag name="param" line="285" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="285" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="298" package="MailMimeParser">
        <name>failsMultiPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsMultiPartFilter()</full_name>
        <docblock line="298">
          <description>Returns true if the passed MessagePart fails the filter's multipart
filter settings.</description>
          <long-description></long-description>
          <tag name="param" line="298" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="298" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="314" package="MailMimeParser">
        <name>failsTextPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsTextPartFilter()</full_name>
        <docblock line="314">
          <description>Returns true if the passed MessagePart fails the filter's textpart filter
settings.</description>
          <long-description></long-description>
          <tag name="param" line="314" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="314" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="327" package="MailMimeParser">
        <name>failsSignedPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsSignedPartFilter()</full_name>
        <docblock line="327">
          <description>Returns true if the passed MessagePart fails the filter's signedpart
filter settings.</description>
          <long-description></long-description>
          <tag name="param" line="327" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="327" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="354" package="MailMimeParser">
        <name>failsHeaderFor</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsHeaderFor()</full_name>
        <docblock line="354">
          <description>Tests a single header value against $part, and returns true if the test
fails.</description>
          <long-description></long-description>
          <tag name="staticvar" line="354" description="array $map"/>
          <tag name="param" line="354" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="param" line="354" description="" type="integer" variable="$type">
            <type>integer</type>
          </tag>
          <tag name="param" line="354" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="354" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="return" line="354" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="383" package="MailMimeParser">
        <name>failsHeaderPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsHeaderPartFilter()</full_name>
        <docblock line="383">
          <description>Returns true if the passed MessagePart fails the filter's header filter
settings.</description>
          <long-description></long-description>
          <tag name="param" line="383" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="383" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="403" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::filter()</full_name>
        <docblock line="403">
          <description>Determines if the passed MessagePart should be filtered out or not.</description>
          <long-description>If the MessagePart passes all filter tests, true is returned.  Otherwise
false is returned.</long-description>
          <tag name="param" line="403" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="403" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
    </class>
    <source>eJzVWutv3DYS/+6/gi4WXTlYe3v30T7nmuaBBmjSoHGLQx3DoSWul41W0omUHeOS/70zw6FEvfbhxAFOQOKVxBkOZ37z4FD/+nexLPbmjx7tiUfibKmNWOhUCfhbyNKKfCHsUok/f5JWmTx790rq9JVeqTeyNKoURZn/pWJ7BMRI/2OqY5UZJZbWFsfzeV7AXV6VsTrKy+s5vzXzK5Mc8s0RTC9+evsMyOd7mVwpU8h4dMJ3r5Qx8lqd7O1VZuOod3Br/Q3+PtmByj1nkpfZjUx18qS8rlYqs88/xqqwOs9ADlbdmzK/0YkyQopbeSdsLhK10JmCe1CoBV2BKgNRxCIvBbLWmbiRpc4rI2KZpgZIkZ9MknmpVvmNCqlQ0QL/PRF4+8JxBmO5yRIhUQCjyHBgnEKVVoNQMAmaMU6lMTN6DwIqDc9KcaWQ4VRncVolKpkKEGyqPvLdkQBUKL8GmMnoVZFqY3XsuEoLM/JUd8gpEMXzFKvKWJjISZYhgVeBJlHgVQGiqWQmZAakGTLyMvjJiUmW14yQHFdFvEImTuaSUJyRNgu0jgGDEVFcKml1di3S/FqD0kWcZ4lGe5pawbjoPEvv6qXRlFd3uDxZpRZ5T4y+hpXi/DNxu9Tx0r/1Vnzx8pez579dPv/P019+f/Z82HqxzFB0nRkrM6sBm4m4BdOAFoQsSwAT2PKDujNiJW28RLnJjrwuNrFTHKC0Uji5s/FSrdyC8+xGZVpl4Ihehvfv36Pnw6+JzlKwGIpkxKmYrBzeDh9fK/skTel5lKnbQOjoHAnxmq5guRpVMBWnj4Mhx8e8+JevafGzmmKpZKJKQ+PPhX+MV1td9D58TdRP88yCCx4+06bIDVlteiym0loZL9E5pyHJhb+hHxcHByd+/bzqM/XRkj+OLTxc0aLMVy+JjKU4uytUNLXAY16kUmdTngCU60OirOwSTPCnlEudCA49FO3IioHG9v63h5JSQMELiCEyADAAbIDPGEmbcELYxjcYRZhgTn/B2uAorMtfX7yApf1wQm9G+QPU1nlb7cfa++74hLXxxD82T1ozDifdcULGF0z4TwjHY5O5CYy4khAgMAbdLhWFvyC6Hh8vpWHLon5tWbU1W5T6BqwgJjAu5nGnQ5gHrd9LFk46x8favEK/ImSulaR2vzWCrLXCdorRpnaUteKgKzyINBzoUeMQDjmBgCjSs6Cr1sbchWY3DCOjXfqSZkk5ks13aMGDhfpvBVkAoqa2psXPzTg1YgqR1uZxnk7xGZQp5IIZErRZueA2rJwmXQyrh11njYqMLSn+yzSuUsoUsJqlr9Kc8kYRu3yaJ2oj8/OL84sm77jliLJKleFSwObFYapuFKVNC0HPuOyULzy3jmOC+ucQAduL9AmTeSALjPeUwCDRFQWI4vk1clCBWI/jRCdL4ANpDuR7ncNaqSYB3GT8LuDUOBiE+J+J5x80I4CjQsRFJsfSi9IKQKK2NQRbBa9dPPTcKB+r5IAABtqLAbTxqvDMjvw4/9enXHc34Zh3Kjq59eCkM+TwMadMGHu+JsW6hFpnSExOlGTDBCUuxMVJINAIWpr5LoYR87QpKQRoaJknaAxeEtYcUIYWKtYLqBNXoHWB3tHTyI+kYA/rCQ5EqevXpbJVmYU5siVudQW7CKCWWI0uqiy2VOJBlg7zc832gKhclsWLuaP6HQ8sa4KrXam0XuHlaAaN0BtL7HqG6Sw4uC72hu8uGByfdzBKmucfyCQFVXgUPlu2ocg14zApfaoVSU5490Nhc3IH4eYGtzQDRVgTRMNa7NtZvF+X/V/afbZpunZxvG66sEKmMNCqkbsTf0XANSGZIee2MzWSAuquoDORFy72AthcFYg4aaocYrgJVUnDsDMCa4ymZvpy1AWiR+G0s20qs51x2d5rNTPMvgl8u3jqq/lr4AlsWMUWS7RGaR1U+I0yIUOtriDjYAtFXkGRQljz7LhK4O6Haw642qaHoLPOALcVwQYNFTd1cOvM5yqSmVBH1zXLwEwzl3v976YAnFK0rS01BmgnymSosHOYrMF4eRl73UUtKsrhXaRNiL2rJ6bNZgZl3Eb4WYAxX03ABQ6vIMCIyLOHStv9PAjmxksvRKRB2TZiKc/dONigd0aStFi8Hz6+vCQCGjgTXcKTFtnnvfavYbj9gU09t63GXotr7nkYgLFpRtoXZKbCfhJuBfiR5FpV1yFmQj3CTbEJASNe439ctXcQNULmJkOUul8gAchth/FCgrT6R+6J84eaxi7L/NaMNjcHS8MacDesO08W0cpmLOmsJUoXfmj+fZ1d0pjIU/DYLgImqTQYQ2nwZZEXEQ9sW5wWQ7FzbD1RD1hTVmuzpcOcNRVHbKYj+O1bEnlGFutnziPxV66zCJ2iXgNRelYkPz44FN/RA5p0gM/0O9eoxL5r63Ww1HVwfquw8QgQaSIn4NXX8hwOEDjdWCcXlhBIFg22S9puCEzM+36I6kQw43dkJmpz76LHAeFWph8iP2TWsAF0gBk+9FDkYkgPtX1M+MjWr8QmH/rPzkfqs9lYnr0YsyxezjFM7RiD4fA+SKeVMdo9ouv4QOUZpTmObd2l9EGPFwC2v9P3OddHySAG8R5+lBm5XL237w8bD/HBG7Zzs4H1EFlXdtSO083uiYIdELjJ1R1HhLb3sELJfYKag71ojfuEyaBfoX5qYmelvopvceoMI/RQTHZrPD09bRUF4tMnEbxpCoSWOdqD6sKh8zwoIoZrglZOuC/8u0jnNrYH43QUSQGCNkcKp87+Y5fONkcK2AH0osQXRQ+WnNXNggSpQ6jUqK6dOdoNWWP/gcyxkx2CtMBSbJcMf6PNlOtV42oslU5jfo2d5J73Nx3NJqHu5NG8obvK83SDe3IxjNQju0IeEZh47U6qXn5dMQ6Xmz1V3GN9K/1RJRsWeL1heeHC/Lq2MSlH4tbJutSpCRriWAPV0czz4moIdIqhuu4odFYdsp0MdQz6pu3WySTNz/W5Evd4e4xH1OINHh44gduO9IS+/94xo/E8YXRw0I3T2zH1IQeY7g9x3Qp9O1uq15sZMVQXn1/LUvWx27aGokBJu1LLrYlY4acefNLQi5ltvDdNov1Rs3bj3QA8gl7TNugIThfXwGMt0wF0tLk+DDzq88VWS+SbocMfgt7Ti5vT0e2s5KdbY6R1LAdtFPB8GBM1Jd5DuLCSG/oSJNFbkmFXN/YVR3BM21cq9m2HXXohobwaKrcCB4GoEB1QTeweQVp8Q2fM8BQny6o0HWG/nXhs816RhBfN+YqPHrBArGUIj03CzZQ7/x4k8WJvQf+Gz87H6V2F98a3YaL2kcksOH4PuKNqm1PXqCNs2MrkrwGmTsc/oEN0CAOyjtBM80VGYd8eNMoXWHfYc8+Uofa5AV9L/QcJXAPKazyvZxdwJ37lgKOHnUXyp77LOsHwswHerK5ksbU/B2cxNjz827g59q9aX1ncIz44vL3IBwLDzMk0E3637ObqddCXwdcDzm8b69Y/+MgIlYO99haCpuF3I+6Aru1JnQ5UPT7pnus1ZOERzQi1LWVmFqo8VFmc4+Fab2oe8Ny/r/kErf5Jmt/S2QJYxOZ0E4WbEu+fvGuB9Z87kn6Hv6NJPGe+rIwqL9Fk0bk3SsAibPYHUXb3IiwiU28ZRmmi9bI30S34tqSnl899nHh5xgUKyoMwdAXzN1DliDVQMqxf7XbM94n5AxUPHK0eoLrbJTDsUjg0h17tziOefTl9P+ZOjOmisCHlpinS+C5ore9+yyWoVTrRbG0EG2IVgA+NddIb0O7JdI/VAvKg+hkGxTPM7Cud4YHsKCTMMq/SBJtEDgL4EWBl8Sgly5tu6ktHHxISL9BgmtYHHZgHZ4xBw2LSx+G/4heFt7r+bNbJ3hr0VZHWaYYsdts87Lds3d2fBpT+wuoyoOjsWTYT9IrnzSQ9t3EkdZD4vPc34YytzQ==</source>
  </file>
  <file path="Message/Helper/MultipartHelper.php" generated-path="Message.Helper.MultipartHelper.html" hash="1fca9f447598467cb328497c2529ebce" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Message">\ZBateson\MailMimeParser\Message</namespace-alias>
    <namespace-alias name="MimePartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</namespace-alias>
    <namespace-alias name="PartBuilderFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</namespace-alias>
    <namespace-alias name="UUEncodedPartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</namespace-alias>
    <namespace-alias name="MessagePart">\ZBateson\MailMimeParser\Message\Part\MessagePart</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\Part\MimePart</namespace-alias>
    <namespace-alias name="ParentHeaderPart">\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</namespace-alias>
    <namespace-alias name="PartFilter">\ZBateson\MailMimeParser\Message\PartFilter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Helper" line="25" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper</extends>
      <name>MultipartHelper</name>
      <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper</full_name>
      <docblock line="25">
        <description>Provides various routines to manipulate and create multipart messages from an
existing message (e.g. to make space for attachments in a message, or to
change a simple message to a multipart/alternative one, etc.</description>
        <long-description>..)</long-description>
        <tag name="author" line="25" description="Zaahid Bateson"/>
        <tag name="package" line="25" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper" refers="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper" link="/classes/ZBateson.MailMimeParser.Message.Helper.AbstractHelper.html"/>
      </docblock>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="30" package="MailMimeParser">
        <name>$genericHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::genericHelper</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;a GenericHelper instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\GenericHelper" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="23" package="MailMimeParser">
        <name>$mimePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::mimePartFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="28" package="MailMimeParser">
        <name>$uuEncodedPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::uuEncodedPartFactory</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;to create parts for attachments&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="33" package="MailMimeParser">
        <name>$partBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::partBuilderFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="38" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::__construct()</full_name>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="38" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="$mimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
          <tag name="param" line="38" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="$uuEncodedPartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
          <tag name="param" line="38" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$partBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
          <tag name="param" line="38" description="" type="\ZBateson\MailMimeParser\Message\Helper\GenericHelper" variable="$genericHelper">
            <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()" refers="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()" link="/classes/ZBateson.MailMimeParser.Message.Helper.AbstractHelper.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uuEncodedPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilderFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$genericHelper</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="55" package="MailMimeParser">
        <name>getUniqueBoundary</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::getUniqueBoundary()</full_name>
        <docblock line="55">
          <description>Creates and returns a unique boundary.</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;first 3 characters of a multipart type are used,&#10;     e.g. REL for relative or ALT for alternative&lt;/p&gt;" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="55" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="68" package="MailMimeParser">
        <name>setMimeHeaderBoundaryOnPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::setMimeHeaderBoundaryOnPart()</full_name>
        <docblock line="68">
          <description>Creates a unique mime boundary and assigns it to the passed part's
Content-Type header with the passed mime type.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="68" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="86" package="MailMimeParser">
        <name>setMessageAsMixed</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::setMessageAsMixed()</full_name>
        <docblock line="86">
          <description>Sets the passed message as multipart/mixed.</description>
          <long-description>If the message has content, a new part is created and added as a child of
the message.  The message's content and content headers are moved to the
new part.</long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="110" package="MailMimeParser">
        <name>setMessageAsAlternative</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::setMessageAsAlternative()</full_name>
        <docblock line="110">
          <description>Sets the passed message as multipart/alternative.</description>
          <long-description>If the message has content, a new part is created and added as a child of
the message.  The message's content and content headers are moved to the
new part.</long-description>
          <tag name="param" line="110" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="132" package="MailMimeParser">
        <name>getContentPartContainerFromAlternative</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::getContentPartContainerFromAlternative()</full_name>
        <docblock line="132">
          <description>Searches the passed $alternativePart for a part with the passed mime type
and returns its parent.</description>
          <long-description>Used for alternative mime types that have a multipart/mixed or
multipart/related child containing a content part of $mimeType, where
the whole mixed/related part should be removed.</long-description>
          <tag name="param" line="132" description="&lt;p&gt;the content-type to find below $alternativePart&lt;/p&gt;" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="132" description="&lt;p&gt;The multipart/alternative part to look&#10;under&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$alternativePart">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="return" line="132" description="false if a part is not found" type="boolean|\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>boolean</type>
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alternativePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="160" package="MailMimeParser">
        <name>removeAllContentPartsFromAlternative</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::removeAllContentPartsFromAlternative()</full_name>
        <docblock line="160">
          <description>Removes all parts of $mimeType from $alternativePart.</description>
          <long-description>If $alternativePart contains a multipart/mixed or multipart/relative part
with other parts of different content-types, the multipart part is
removed, and parts of different content-types can optionally be moved to
the main message part.</long-description>
          <tag name="param" line="160" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="160" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="160" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$alternativePart">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="160" description="" type="boolean" variable="$keepOtherContent">
            <type>boolean</type>
          </tag>
          <tag name="return" line="160" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alternativePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$keepOtherContent</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="194" package="MailMimeParser">
        <name>createAlternativeContentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::createAlternativeContentPart()</full_name>
        <docblock line="194">
          <description>Creates a new mime part as a multipart/alternative and assigns the passed
$contentPart as a part below it before returning it.</description>
          <long-description></long-description>
          <tag name="param" line="194" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="194" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart" variable="$contentPart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
          <tag name="return" line="194" description="the alternative part" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="213" package="MailMimeParser">
        <name>moveAllPartsAsAttachmentsExcept</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::moveAllPartsAsAttachmentsExcept()</full_name>
        <docblock line="213">
          <description>Moves all parts under $from into this message except those with a
content-type equal to $exceptMimeType.  If the message is not a
multipart/mixed message, it is set to multipart/mixed first.</description>
          <long-description></long-description>
          <tag name="param" line="213" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="213" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$from">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="213" description="" type="string" variable="$exceptMimeType">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$exceptMimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="240" package="MailMimeParser">
        <name>enforceMime</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::enforceMime()</full_name>
        <docblock line="240">
          <description>Enforces the message to be a mime message for a non-mime (e.g. uuencoded
or unspecified) message.  If the message has uuencoded attachments, sets
up the message as a multipart/mixed message and creates a separate
content part.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="259" package="MailMimeParser">
        <name>createMultipartRelatedPartForInlineChildrenOf</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::createMultipartRelatedPartForInlineChildrenOf()</full_name>
        <docblock line="259">
          <description>Creates a multipart/related part out of 'inline' children of $parent and
returns it.</description>
          <long-description></long-description>
          <tag name="param" line="259" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$parent">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="return" line="259" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parent</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="283" package="MailMimeParser">
        <name>findOtherContentPartFor</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::findOtherContentPartFor()</full_name>
        <docblock line="283">
          <description>Finds an alternative inline part in the message and returns it if one
exists.</description>
          <long-description>If the passed $mimeType is text/plain, searches for a text/html part.
Otherwise searches for a text/plain part to return.</long-description>
          <tag name="param" line="283" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="283" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="283" description="or null if not&#10;        found" type="\ZBateson\MailMimeParser\Message\Part\MimeType">
            <type>\ZBateson\MailMimeParser\Message\Part\MimeType</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="307" package="MailMimeParser">
        <name>createContentPartForMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::createContentPartForMimeType()</full_name>
        <docblock line="307">
          <description>Creates a new content part for the passed mimeType and charset, making
space by creating a multipart/alternative if needed</description>
          <long-description></long-description>
          <tag name="param" line="307" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="307" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="307" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="307" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="342" package="MailMimeParser">
        <name>createAndAddPartForAttachment</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::createAndAddPartForAttachment()</full_name>
        <docblock line="342">
          <description>Creates and adds a MimePart for the passed content and options as an
attachment.</description>
          <long-description></long-description>
          <tag name="param" line="342" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="342" description="" type="string|resource|\ZBateson\MailMimeParser\Message\Helper\Psr\Http\Message\StreamInterface\StreamInterface" variable="$resource">
            <type>string</type>
            <type>resource</type>
            <type>\ZBateson\MailMimeParser\Message\Helper\Psr\Http\Message\StreamInterface\StreamInterface</type>
          </tag>
          <tag name="param" line="342" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="342" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
          <tag name="param" line="342" description="" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="342" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$resource</name>
          <default></default>
          <type>string|resource|\ZBateson\MailMimeParser\Message\Helper\Psr\Http\Message\StreamInterface\StreamInterface</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="382" package="MailMimeParser">
        <name>removeAllContentPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::removeAllContentPartsByMimeType()</full_name>
        <docblock line="382">
          <description>Removes the content part of the message with the passed mime type.  If
there is a remaining content part and it is an alternative part of the
main message, the content part is moved to the message part.</description>
          <long-description>If the content part is part of an alternative part beneath the message,
the alternative part is replaced by the remaining content part,
optionally keeping other parts if $keepOtherContent is set to true.</long-description>
          <tag name="param" line="382" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="382" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="382" description="" type="boolean" variable="$keepOtherContent">
            <type>boolean</type>
          </tag>
          <tag name="return" line="382" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$keepOtherContent</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="401" package="MailMimeParser">
        <name>removePartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::removePartByMimeType()</full_name>
        <docblock line="401">
          <description>Removes the 'inline' part with the passed contentType, at the given index
defaulting to the first</description>
          <long-description></long-description>
          <tag name="param" line="401" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="401" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="401" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="401" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="427" package="MailMimeParser">
        <name>setContentPartForMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper::setContentPartForMimeType()</full_name>
        <docblock line="427">
          <description>Either creates a mime part or sets the existing mime part with the passed
mimeType to $strongOrHandle.</description>
          <long-description></long-description>
          <tag name="param" line="427" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="427" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="427" description="" type="string|resource" variable="$stringOrHandle">
            <type>string</type>
            <type>resource</type>
          </tag>
          <tag name="param" line="427" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stringOrHandle</name>
          <default></default>
          <type>string|resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="40" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="$mimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="$uuEncodedPartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$partBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uuEncodedPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilderFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="38" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJzlW21v3LgR/u5fwRiL026wL06vLVKn9tVxnCZA3BhJXBR3mwayxPWy0UqKXuwYSf57Z/gmkqJWshMXBW4/2LsrcjgkZ555Zsj96y/5Ot9ZPHy4Qx6Sd2tWkhVLKIH/eVhUJFuRak3Jr0/DipZZujwNWXLKNvQsLEpakLzI/kOjag6dsf/fEhbRtKRkXVX5/mKR5fApq4uIzrPiciGflouLMp7JD3MYnjx9+wy6L3bScEPLPIw6B1ye0rIML+nyBU1yWjzZ2anL3sZPhjRawsdq+TyMqqy4Wcrnlfx8Bwn44WnNkpgWdxdyfn6SRllM47vpIj/g+9v0knO/RRf4Q9PqBQ1htrfr+pwlFd9HaYFnRXbFYlqSq7BgWV2SIqsrlsIXVUY2YcryOgGpJExjEhUU327qpGLcWDdCMJhwkW2gCQqkn1kJAi7VQzKm88u5kPaREmFtq6wgYVWF0XoD8ygJS0moOkwJPKwylBWtwxQkhKRkmxycRIkEYWGjxiLEKaVhxa4oyVIQQKtoPp9PlJOEdbUGmb+G4ZrFRC4St/8oCcuSnCpJwshhChVN45IcXZRVAUYgvt75skPgxdcNXyAY1oz8naa0YJHsGjqfWVpWYRpR2WXB/+cFu8KFHF2abWFPXPmgU7ghjm+Q0cb+wmnus2Eyquv2t07HtgeRUd76zulkT9eekT3p+gIQiKzqNKpYlpIPH6IMFqeoo2osGsKrb6pT3XL4LJs+wybYtO+d24R80Y1z7pL7++a8Wup3aOhTY/JEix5VECZmh9b45KBlPtj0W8uIjrnTltyBC1rVRQrvSZ2yTzUlF1mdxmFxM5etnc2FaaAn82m8u8nBb1lRVuRndEx0DFqUGLAMXyQVNoOlIABI8VTJ4y+OA29OXnHvL2giHbYgR6/eCURo/FgrIlSWmmw1qEtanfNZPZWTGmu9J7zDF2NBUcsDkoDUzRhkV1mdwxqO84JefihongBIjYPFv8d6YsvFeP7l52+T+cOv84eT0YIFUxKM/jCDf80wE/huFhg7J7XH1WbxOJjB6+D09GwWkLlUYk6COcgAe6GT3i1U24YD6r3jOwswxi5hZ1mF4IgMIoevaMxJRVBqSVkK0FbN+Gauefgg16xamz24cNStwyjc2COMt8dytu5cSSt0fCFS7d7rFIWP/aOZi+7uLT6fHYLMN+G16NfgC74CcxGCqfVsV4t9siyW6bJSi3yw3N21WuJr3nhmt+nhDu8Gum/nJr+lEAfNbZCxLiyNSLdhn2ms9oWo/y8FZ1Q91tAlEnOcgs2k9FpQS6CYIoLHwmTiGN+hWUVrQB7wZCXQkDYnQFL1p0BLFoRAvheWVHK/32RXIFYYoZKnVOiwKMlPYE/Fm15jEc2OylNcjrHb3bUItiJj9Wx2CKsjDWA8MfFb2w4iqwdwZ4di8f5Br2V/juBAfLRww/G5ND0mLPUxLvFYGu+e0fKbC/PbvGGkOVLgGIWJOiOgViVOQysABnqUJEeacaGwcmx0wTV6QDd5BaaLvVtLA/hMoTMRj9Fs8I3bSo0+O9yExcej8pgTuHjsrMw3Z/Z39AYjXriW9bt1iaNmTX73jmHYR7AFd8MiWlPL2kZGTx50ODsRJtMZLpVAk2ixqpTE0N3nc+zrkJ5GFmoTghGFV9TKdLirA2VSUponnE/BM2G3aIUhSzEEh9okVX1Bx6YpuV7Tgpomfr3OMM/CYbRI3q9cZzUIvqAwN27PQykjSpUazDjjAT9YsRRFJdl1a6l7yYa7NdwVvamg4KMZSbLso0VECfCoWKcnmmNeZDD3MP2qkhCyChPIqtlKbT2gRZqhMUD3PipquMKx2Axg9uATpn8aG9E7Ty/NQY902nGs5y6xx6XKhH9/H1P0l2kCekjVcGCDp5jxA/frTMhP6yRpnsSZAwwcQoQqB6KxLyTIBebr2RUJ3IG51Cd+FMqNiXK8MlADTBjraVKrBwftJWrzcz1uF0i84TYPaJ4k3BRKy49E+cMdxhOSWsYr/bT0Ornr3cqmlUCORBn4V9HoFLPViuKaWD5XTkX80lmaNGclSbr0lGNXnywShSnJcjR0WI4bhAQV4KxgCfPS8ff2ka4nkRiMD0579HEy+khp/hoXTrqCDwm2OrhYMKBUhpuXrnu7M5uS2zj8tK1mCwOKjXIWnYfcEne2+AZ3bTUCuBH3Xte7/Z79zRbSmofLLoT2ckn5WgKRacqDJ58jmpsxXqplZoEOUriO5pDh4QDZRScsyKEYJ5w5CRVnh9pUWpzbIDhaN9FaUBohwd0Rd2YPOnDX11hYCDKEY4hhgJt8Yx95WbyX6cnSiEO5PKbbOfB4b+ImA3z5hqu751XXu4Ldxm2vf/NOBQ/TWPoX7FaL1XrXtTiNVtLLsEjUXyPCzIITSQ7yYdlZKjfrRg2hVQJHUYMkQgqXJ1gbwzeYEkrVEKLZHRHeODSxBnVBWdMy1NXleVvRWuQnBgIaIOlB6S6FWvALStj4m7equLND2I6z5uuxwjq7MDxRSZQx9rhdAd6aAUlt+jKgbm8xp+pr2yRreqg9q+ogvjUbGiLtxop4yT5dVn3qsC7O28mI8y2W8owaSLliGZTHCfguAzjm7ChUgqwMhH6qwwQzg5HocSqDCCT2Tt1AMn4txiVp2mYYzw5gf/hBl9OKV83v5hxtmoBz7+BI9my2ukRfrG17hV+TqTuqN0/hxShsripRIhYiUjURePybhamNFQfk4NCK1M9fvnp38ubDyb+OX50/O7EruIEsvPBOtkR8dYvxt+cirYIxtvOutPF6v+P/9H7iRHPYuSgsabTJnZBjMJCJr9jHw34rEhowYZdIPYWYJro0pT2xV1jbw3ct6WIHTcjI21G1q7jTGrrt7ScpqBLJUoxx1nvBiyAY0tSXoh6TZumMfy2OmOuaiqM1JQ8a1WmZ04itGI0nRv3OUx7Uvc2D6Sm6tE6T6tzqFfrSNv1Qn5djq5Kip1bUgaMfVgGkYuXQIAdV/R40u8RK3qtV8rOLg+i2elkkF9pCGwdZIDcCH3e2zcg6yXEOb8huRT9XC+BZLJUnNng0CV0OlruszGaPH//pL7NHy93dTu63bTBcmdk/AU1gjfG879F8Lxhgxw0Xa9fnOInKal6ICxhPNwJRtAN45VWFnAMtGlCTnqtq4m2O5Dx5raJQA9iSvhPxRijOgTMrZIIk9X298p/PeXPVRs7/CWEyNLIgVn5v7rQFkWh+mrKLSObmkc9YmWclw/Ucq12ebgk+4EudqKtG7MNdYzq92GsJbtpaK+Kja0aDLsr2nOHVmTC1KLpYAll2Sm0UtcrlCDtZqnGSXyYqOw53VLFel+GAgTVwgNAtK/siWvBH62qTWKhLeGHimgEI+dpzUbqSLPT8wYUsubbLwXfF+FxBRcz6cb2AoSphjb32laixBG/WZKR/bytabct/WsUVyzb3bI7WX3VpSlQ84Q6avQDq84v8jHsZkH37qR7IUzex6iXkp5+MlMWoJfe34EET4UKgTstjZR/RXNboW0Js7zVVPHMgRoTbHwAxDzqLPa1M9nZBwNZ8QJllYPpnFzWscyz0UecUjpsL512CAkzxxmFza0hePby4ERFOnI35KyPoVJQ2TPIHebr9WGp5dxwYGMltB1cAsr06rZRrufyFiMo/IoI/aUnloaiL6Lk3cxqep5S1Wd52oUWYlit4yC/jwXYgu/tUZ2Djsxy2pwovErtiIuZg8mwPo9X3/XB99PheorKlitQFzT5INgRZKIeoqRXszxLt04HBh/Zquq1iuBdxW3pg9yM/8nQU6+yaszO0K9On6RQAsK9yv2Wi7g2FFqCphkNuY4J4hLbmuNmGNPNWiThu46k53rIWspo89XsYydeCil8MfD0ri+WLqso10rytQFuIzrAVK4BO97NDOkZK0N3gMG7iWUcL/J0E/mDh3hHzKI2PYhXsmrTXB5lqzjZ6GnOZNnrL03TvLZymTZezGFICfI9XSOW9Ur9Jjspwha0ZGNLVODh/93z2GGHu/O3s6O3xy5eLRYUomLBqsWCXKWQ4gaGsS5966wX3ExpMycOR/CIs6Z//GHg41g8uuHH1blvyuMXkOmIfbhAGPtzhdm1jq0iDNnLJhqlK4coC/AP4IfMue9+1kN2/VJCvzunCFpwVWU6L6mYcqGmgUeM0OnPgAcHaas7HUTflNAD0nJgYWXj37RLjqpT1YzCVKnff1MaKppKGzIHnwiFeU5C3wCyxGFHEgYWTphuDKmnmNY5pW0M8fTFuN2698CHTdre/GtSnywVNYTvWpuipMc92B5Anj11jZPrYxr8IWoxxkwXvKWA7804NgEbr/oJx1INHsvdysWX4RRUaipNhgjdB6yiC0bbGOO/dlac3AxOD1lqoiyGe4sC93rpQFLOTXipKJlBl0I0d/5RhEN9lnCEXOfRRV/+UvTfxBhz8m+ChC8rcF1y4iJrRpkAe+aNLmHZKIOGgn5XAmK5CXH0wTunU/PzyPowcEi0ysgb/fsPmIWaoNfOxCQZ213xzdWzp3KH/ru383ziFVF1Vsb5+JQ8YGIAsG5e/iVm/bzG4jrtcOqGLeB1KCOm4CDPA54y98e6J8Usox7dUrLZm0XepwSl/t1BDFfnu46aPAA5L+Hfc8DlhPCw1h4rNJR9IHEv1g4nm97f6sQMEOrTrK9oZUKSqyNLL18ULIAfJ/YQ0J9/kY7JmzEFlss4fQNypymUrsKXsJU3PW5bmZWisSltu/QK+FfSR7NtP3kEnl1j2X6N2foGxtbS3vaTXx+WNMGHdtbZSJM/F7L6TWlPwwBqe4/w287Y3T5Prbzv/BbsJOgQ=</source>
  </file>
  <file path="Message/Helper/PrivacyHelper.php" generated-path="Message.Helper.PrivacyHelper.html" hash="4bbc8ec8f3782cf6662ac0e7948d96b0" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Message">\ZBateson\MailMimeParser\Message</namespace-alias>
    <namespace-alias name="MimePartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</namespace-alias>
    <namespace-alias name="PartBuilderFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</namespace-alias>
    <namespace-alias name="UUEncodedPartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</namespace-alias>
    <namespace-alias name="ParentPart">\ZBateson\MailMimeParser\Message\Part\ParentPart</namespace-alias>
    <namespace-alias name="PartFilter">\ZBateson\MailMimeParser\Message\PartFilter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Helper" line="21" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper</extends>
      <name>PrivacyHelper</name>
      <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper</full_name>
      <docblock line="21">
        <description>Provides routines to set or retrieve the signature part of a signed message.</description>
        <long-description></long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper" refers="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper" link="/classes/ZBateson.MailMimeParser.Message.Helper.AbstractHelper.html"/>
      </docblock>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="26" package="MailMimeParser">
        <name>$genericHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::genericHelper</full_name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;a GenericHelper instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\GenericHelper" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="31" package="MailMimeParser">
        <name>$multipartHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::multipartHelper</full_name>
        <default></default>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="31" description="&lt;p&gt;a MultipartHelper instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\MultipartHelper" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="23" package="MailMimeParser">
        <name>$mimePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::mimePartFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="28" package="MailMimeParser">
        <name>$uuEncodedPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::uuEncodedPartFactory</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;to create parts for attachments&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="33" package="MailMimeParser">
        <name>$partBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::partBuilderFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="40" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::__construct()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="$mimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="$uuEncodedPartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$partBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Helper\GenericHelper" variable="$genericHelper">
            <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Helper\MultipartHelper" variable="$multipartHelper">
            <type>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()" refers="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()" link="/classes/ZBateson.MailMimeParser.Message.Helper.AbstractHelper.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uuEncodedPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilderFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$genericHelper</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$multipartHelper</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="61" package="MailMimeParser">
        <name>setMessageAsMultipartSigned</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::setMessageAsMultipartSigned()</full_name>
        <docblock line="61">
          <description>The passed message is set as multipart/signed, and a new part is created
below it with content headers, content and children copied from the
message.</description>
          <long-description></long-description>
          <tag name="param" line="61" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="61" description="" type="string" variable="$micalg">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="" type="string" variable="$protocol">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$micalg</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$protocol</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="86" package="MailMimeParser">
        <name>setSignature</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::setSignature()</full_name>
        <docblock line="86">
          <description>Sets the signature of the message to $body, creating a signature part if
one doesn't exist.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="86" description="" type="string" variable="$body">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$body</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="110" package="MailMimeParser">
        <name>overwrite8bitContentEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::overwrite8bitContentEncoding()</full_name>
        <docblock line="110">
          <description>Loops over parts of the message and sets the content-transfer-encoding
header to quoted-printable for text/* mime parts, and to base64
otherwise for parts that are '8bit' encoded.</description>
          <long-description>Used for multipart/signed messages which doesn't support 8bit transfer
encodings.</long-description>
          <tag name="param" line="110" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="134" package="MailMimeParser">
        <name>ensureHtmlPartFirstForSignedMessage</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::ensureHtmlPartFirstForSignedMessage()</full_name>
        <docblock line="134">
          <description>Ensures a non-text part comes first in a signed multipart/alternative
message as some clients seem to prefer the first content part if the
client doesn't understand multipart/signed.</description>
          <long-description></long-description>
          <tag name="param" line="134" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="163" package="MailMimeParser">
        <name>getSignedMessageStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::getSignedMessageStream()</full_name>
        <docblock line="163">
          <description>Returns a stream that can be used to read the content part of a signed
message, which can be used to sign an email or verify a signature.</description>
          <long-description>The method simply returns the stream for the first child.  No
verification of whether the message is in fact a signed message is
performed.

Note that unlike getSignedMessageAsString, getSignedMessageStream doesn't
replace new lines.</long-description>
          <tag name="param" line="163" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="return" line="163" description="or null if the message doesn't&#10;        have any children" type="\Psr\Http\Message\StreamInterface">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="181" package="MailMimeParser">
        <name>getSignedMessageAsString</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::getSignedMessageAsString()</full_name>
        <docblock line="181">
          <description>Returns a string containing the entire body (content) of a signed message
for verification or calculating a signature.</description>
          <long-description>Non-CRLF new lines are replaced to always be CRLF.</long-description>
          <tag name="param" line="181" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="return" line="181" description="or null if the message doesn't have any children" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="207" package="MailMimeParser">
        <name>getSignaturePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper::getSignaturePart()</full_name>
        <docblock line="207">
          <description>Returns the signature part of a multipart/signed message or null.</description>
          <long-description>The signature part is determined to always be the 2nd child of a
multipart/signed message, the first being the 'body'.

Using the 'protocol' parameter of the Content-Type header is unreliable
in some instances (for instance a difference of x-pgp-signature versus
pgp-signature).</long-description>
          <tag name="param" line="207" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="return" line="207" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="40" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="$mimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="$uuEncodedPartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$partBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uuEncodedPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilderFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="40" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJy9WW1v2zYQ/u5fwQbBJBd23Q3DMKRztrRL1gJNUTTJl9VFQEt0xE2mNJJKZqz577vji14o2U7TYf6QWCJ5Rx6f57kj/dPPZVaOZk+fjshTcplxRVY8ZwT+l1RqUqyIzhj5/SXVTBVicU55fs7X7D2ViklSyuIPluhnMBjH/5LzhAnFSKZ1eTSbFSU8FZVM2LNC3sxcq5otVTp1D8/APXl58SsMn40EXTNV0mSrw8U5U4resMVrlpdMvhiNKrW384uHdFrAo16c0UQXcrNw7do9P8ICPryseJ4y+XgjV1enIilSlj5uLvCHCY1fHz7ojOfaBNZB4r0sbnnKFJFFpbmAL7ogigEyJJFMS85umYGI4jeC6kqyGjjUvGMpWVv7NUpopTMY/julGU+Jm5QBQJJTpcAnv6XJxu4xYX9rJlJFTpZKS4iBfT36Z0TgY2aJHzB7SyX5jQkmeeKG0uCZC6WpSJgbMjP/S/SmGTm8afeFCAzZP69yzXGBtYfwzW4f627vAS/QSNckACAM7L4Iug8BhRxWVf9tMLAPU3JY9t4Fg7pB7cYtXEcQnTAA3ShVS1AFsqpEonkhyPV1UkA0ZZXo2HaEz77ITOqeDw9KM+Zh8Wj67wpF0+tBURiTf+oBpWHu0VE7Ar2FblnL0ITHL2rThxpEfnrcmSmZ99AfdA8mjAN6UMbu9z1AX2aoCEo1OoDJBRWEKlLbmFmpmBAqUiCVYHdWRqBrIhlQJ/X2liwv7gjX5I7rjEB4QB00yRiF1apJ/QLtJBnEAAIJL0sO/leyWKNWeVONLpnnELputoeuW9AMu8LFDcIvofnNlkbIj7pIinwnzCEWzteJqpFyYeIRh5OYeIeTxvjYWG3Aw1ckhgkkVLFkXcZ+KO65fmXDc7kpWTyekCjcgGhMnszn5HkbjNthMD1mYlVAekdS1o5aYDND3WvEKOLGWupjdHoMu97iX+x9dmE/nh5bRJw3ZuPQ5QDGwVBxa3q7GJyI9JUDSNwOb2N2y0KmxzS1Q+NdvZdFJVIKAjLfGj3YkCvB/6rYS9c3HtiQbZMA2Hygd68N8ONOH/xEbpVT3Opo0ms/CB29WMiFWGg/6/nioF7B4sA1Wuhhk/0GDcSjEN/674uDg47D1hruQ2WBTZF3kmv245L7rTGqBgQagpQbBrUj1Bqv9Tq3VYtU+qyQljUOGTtGQ+wufL3S2vzodF3qjQ95X8sumFZBseMKZC9tUBxB2FJQYQNSFAEalkZ85e0VgpG0YEpEGsocrvTXSRE63qc0zbIHpAUNhGpyaOHh2dsWk9pWyEFUoM44kBRR5XlPVbq2/w9lGOBwM4lhnDbtu0i3i3CdqNnB73HnGJTacTCQRJ5F0bg20kZwMB03Orabtw25b4uiVAS5ZjCoQtxiulQe3S6HTqHcFmoFQsUcH701m20R7H9VBeTmKdS3QtMlHBwhHRANJfsM0itsj/Vm0zp0X0JO+uH7Gv7gTN5xZUfZeemMQvIGqkSoBxFhtsAJiXGF9QSOCmXMr0iRu4wnWU0vVZVlATBDq8QvzFvz61Nfxr9hku0UtNBSj202CgHRTnKjcirGuqg5pcUfuwh0RVBE5sfkY6vf0dHZm7eXpx+u37x79fbq11PTviNj+G33szYG7X50Rn0in+rnT+MWRmFjGIXgx245UOmZbz3+J005AmsGHdMFVHfI8NLgO6xYAjYbnenYAKGJDPzKnHIRkc+fyZYOGaSOKJxQvQUB03fEBggbkiDM2feE5QDy/8KVJVDPQSBbff6fmnSpsLQuxBQDYHNRUgDOyArTJ5xcW0f2mlYUEQQyz2/Duhm3VcF4kuQcJoxFPVsjy0vJVigPICXWsi/KXfpr1+B2bE1TKDgAwRrlImT2f8HNh1QNeykKEQkJapLTBqtgg9NoMHxRmCHR0BOXGsk331jL/v4ABLq5vxkkzu7C0sHIF7zABsincAA6aSYUt5gwMd7DbFmfoOam2RrGd1aOwu5lgdJFpaSba8WoTDJLz0ljaQLiW4VHBBMNHIzRWFEkC4bDv+mdRvw2TI8l81V9XLv4+PxTYL/p32T97b33s+kDg6pHIJtAshhd26yVUAGnU1JhagIWQEPaTqe9e7GAThOXsQIz2BfSJ2FrynO8dYP0wlebdlkZMuPSJHadFZDT+brMN3hTZyZsalc7ZZOoG4ZiNJ4R8q7wRowbqPJtTlvB5Bim607VAKdzEI0VlF+9yz5o85YAkeBs3WfwO5BNG7pK5PxPRlxNWXPxRF2Y0nbSa7mwi3Cy4Q1KBrKfMHN9kONl5ZfW0zZOZPFeycVrrcv6atT6ewMbKVfoAYJnWMu7ZVQwH//J6C2WWJv6RmKnSA2vdb8uGeOhMlm0Pw+lx/Z9sqUud2GwvWypb+cwWCC73mhoW/nZIQyeVRIrSfgV4wf04FDzYQlLYseX8dAdsje48kSoESqBOHlS5b1DVx91Yvrqw9uzBiWm3nTYMZyj+R3dKGQhdnwkiNxKdyPlK6HhCbIfHI718+ZuZBBkA0dme5izw/cABhL/zbUL5MCVxAxvET4v5OeFmA1dSWDzQf+9c97OapB69l8wfAEut/2Ase104Xd1SHnD074iKZ7z1lyE4EKv3/l7SuOwTglb/E5akr1knj0R8ibqH5Hq9vpESUp/7PQHwPbh05/rYMqVkCznWMx6cyD0ptjz9YkiMZLQP0KwUr6Cso/hAxj/e1relNMmGMBWVTU5od02fqxMP+hXMP+DwUOI1dxm7CPUV16yzofKGi+7ff3+tg3wodNED+sNFe5H96N/AYj+R44=</source>
  </file>
  <file path="Message/Helper/GenericHelper.php" generated-path="Message.Helper.GenericHelper.html" hash="c452482be7d435ea8e9c0ad2f2a5cb6a" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="MailMimeParser">\ZBateson\MailMimeParser\MailMimeParser</namespace-alias>
    <namespace-alias name="Message">\ZBateson\MailMimeParser\Message</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\Part\MimePart</namespace-alias>
    <namespace-alias name="ParentHeaderPart">\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Helper" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper</extends>
      <name>GenericHelper</name>
      <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</full_name>
      <docblock line="19">
        <description>Provides common Message helper routines for Message manipulation.</description>
        <long-description></long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper" refers="\ZBateson\MailMimeParser\Message\Helper\AbstractHelper" link="/classes/ZBateson.MailMimeParser.Message.Helper.AbstractHelper.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="25" package="MailMimeParser">
        <name>$contentHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper::contentHeaders</full_name>
        <default>array('Content-Type', 'Content-Transfer-Encoding', 'Content-Disposition', 'Content-ID', 'Content-Description', 'Content-Language', 'Content-Base', 'Content-Location', 'Content-features', 'Content-Alternative', 'Content-MD5', 'Content-Duration')</default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;List of content headers grabbed from&#10;&lt;a href=&quot;https://tools.ietf.org/html/rfc4021#section-2.2&quot;&gt;https://tools.ietf.org/html/rfc4021#section-2.2&lt;/a&gt;&lt;/p&gt;" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="23" package="MailMimeParser">
        <name>$mimePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::mimePartFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="28" package="MailMimeParser">
        <name>$uuEncodedPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::uuEncodedPartFactory</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;to create parts for attachments&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="33" package="MailMimeParser">
        <name>$partBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::partBuilderFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="49" package="MailMimeParser">
        <name>copyHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper::copyHeader()</full_name>
        <docblock line="49">
          <description>Copies the passed $header from $from, to $to or sets the header to
$default if it doesn't exist in $from.</description>
          <long-description></long-description>
          <tag name="param" line="49" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$from">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="49" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$to">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="49" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="49" description="" type="string" variable="$default">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$to</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="65" package="MailMimeParser">
        <name>removeContentHeadersAndContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper::removeContentHeadersAndContent()</full_name>
        <docblock line="65">
          <description>Removes Content-* headers (permanent ones as defined in
https://tools.ietf.org/html/rfc4021#section-2.2) from the passed part,
then detaches its content stream.</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="83" package="MailMimeParser">
        <name>copyContentHeadersAndContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper::copyContentHeadersAndContent()</full_name>
        <docblock line="83">
          <description>Copies Content-* headers (permanent ones as defined in
https://tools.ietf.org/html/rfc4021#section-2.2)
from the $from header into the $to header. If the Content-Type header
isn't defined in $from, defaults to text/plain with utf-8 and
quoted-printable.</description>
          <long-description></long-description>
          <tag name="param" line="83" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$from">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="83" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$to">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$to</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$move</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="111" package="MailMimeParser">
        <name>createNewContentPartFrom</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper::createNewContentPartFrom()</full_name>
        <docblock line="111">
          <description>Creates a new content part from the passed part, allowing the part to be
used for something else (e.g. changing a non-mime message to a multipart
mime message).</description>
          <long-description></long-description>
          <tag name="param" line="111" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="return" line="111" description="the newly-created MimePart" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="127" package="MailMimeParser">
        <name>movePartContentAndChildren</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper::movePartContentAndChildren()</full_name>
        <docblock line="127">
          <description>Copies type headers (Content-Type, Content-Disposition,
Content-Transfer-Encoding) from the $from MimePart to $to.  Attaches the
content resource handle of $from to $to, and loops over child parts,
removing them from $from and adding them to $to.</description>
          <long-description></long-description>
          <tag name="param" line="127" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$from">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="127" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$to">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$to</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="147" package="MailMimeParser">
        <name>replacePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\GenericHelper::replacePart()</full_name>
        <docblock line="147">
          <description>Replaces the $part ParentHeaderPart with $replacement.</description>
          <long-description>Essentially removes $part from its parent, and adds $replacement in its
same position.  If $part is this Message, then $part can't be removed and
replaced, and instead $replacement's type headers are copied to $message,
and any children below $replacement are added directly below $message.</long-description>
          <tag name="param" line="147" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
          <tag name="param" line="147" description="" type="\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart" variable="$replacement">
            <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$replacement</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\ParentHeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="40" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="$mimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="$uuEncodedPartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$partBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uuEncodedPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilderFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="83" code="PPC:ERR-50015">Argument $move is missing from the Docblock of copyContentHeadersAndContent</error>
      <error line="83" code="PPC:ERR-50014">Name of argument $move does not match with the DocBlock's name $to in copyContentHeadersAndContent()</error>
      <error line="147" code="PPC:ERR-50014">Name of argument $message does not match with the DocBlock's name $part in replacePart()</error>
      <error line="147" code="PPC:ERR-50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $message in replacePart()</error>
      <error line="147" code="PPC:ERR-50014">Name of argument $part does not match with the DocBlock's name $replacement in replacePart()</error>
      <error line="147" code="PPC:ERR-50015">Argument $replacement is missing from the Docblock of replacePart</error>
    </parse_markers>
    <source>eJy9WG1v2zYQ/u5fccMCxA5keys2YEiWtHnrUiAZijbbhzZFQUuUzUEiVZJKFhT57zseqRfLkpMMWw3EhsR7JZ977phfXxarYjTf2xvBHlyvhIFUZBzwt2DagkrBrjh8OGGWGyVvrpjIrkTO3zJtuIZCq794bGeo7PRfZSLm0nBYWVvsz+eqwCdV6pjPlF7Ow6qZL0wyDQ8zdA8n789QfT6SLOemYPGgw5srbgxb8psLnhVcH4xGpdkivPZ4sF3WG36S0A0+2pvw3j5DBb+4tBecJVx71Wrn32p1KxJuIFZ5riQENVhRnqBVaYXE5VTpei1nUhRlxqxQsj4BVtoVynxgbCUSCEHR5sYZMwZ+45JrEfv9A/635TIxcLwwVrPY+tejryPAD4XmPmj2lmlAESGXHz/BpTCEjFhJVLcYpEvIwFKzxYInkGqVV5r0cXAwiAerVGZmgtuU8LCyeTbXafzTDy9+/N4gjjCR6YvZi6A7p99Ci1vMAr1jojHsBKcXwechfPTi+Nk99WvT6/uC70Y97zWTJuV6ei5jlWAyfUJnwhTKCBdM3/Kbs14lbmItiiGlSyaXJZ5Z39oJM73vL1XMhuylnNlSc9O3dpxZriWq3vaavTr7uTeBUntvtPTpgH66MDhVhUAQOkYoEEx41Dv+7OnIYcd9R2AV7OAfotBw66WDlFWVpZ2Ep6zMLIgUhIVEcSN3LeLRQUtIb2oWpGsUIiWxHLpV5IUfFWqcBxGP5yqFgcUQ5zokywWyF6SlJMhiHRT33tO4P7aoN5yoch0123EIssyyCbn5Wp8SGfHKKEFP06MlD/bGwczkoFHAnUfJcVvxu8NgHF62DZKhd+zuT5aVfDyB/TqYxhwe0phMNjaa4MifVdMjQ3bWY4oolFZkDyP/3YXWO56rW8RWhce9mlXGyEhIdY5olKNAZgADRDZMHFAq/WdSzMQjtoVk1+6iyhq+l+jFsniFHoU1NdchLjirkQmPos6Z3QoeTYmfrrHasUzCix5AOYtdgGBb4BgrjA3P0v39LknillUY6R6cszY98kEMwulh1JH3WxNifE9bMg7ym0cbWONbnWylVx8wgb2iICGRmugt/vp3M3jjp5x2+4B1VhBET63oQl2HUjGO9Cx203mRMVy9E3YFpU2nvwCTSWXkS6ksT6bY0aRli4z/T/w2TFLPQNlW2nJgQXpJWWb4BldZHCKnRy1ODLZItdOiYbfZtAOIV25msoe0cbuTDv90WW/d1AQOB7npaQFtzgaw2z2xdlAPwDH9/8pZf7VhXeI+M63Z/edEpGl/fUfwcXNjh119avmqiYNcbeGJrXltY4zW2a2YqQA36e0gzG7SSnPuHbqJYH3U3t8/O399/Mfl9efTi+N378+vh8Nx+B3I8BE6pmie0M5OMUbrKA0kv6ubB12pehsPsCxTd27i8Csoh4yy4JW90km64d+onGOkKEjoG/PZcuYKRy7dO3SHLJjjnkAebglohkGOHCVarQjaIpMn81DbwivNcQTFm0q4BlHgmGx2P40p+aReIpUhWiLZ3/ld2GEn/xp36ImNb4cSOaxOz4mclCJDndd4nVH6fnqEMb1tXo+DZB5iC2ITxDZFEi5XbmncHqga/A9jw58khYRTsC55y0DYLVp8pFHapv1gj2zXdVS3qNYlJWrUByp+0u2FzZnRqD4DOLZh1kGhyl6FWrxn0B0eEGVJxt3Nz5vx2pFrcZApVRjA0tGIRtxpwrCpY6OyCvDOW7cF0mVJUi+FiL5lZ3QF7wTD/rkTdRmglWf1xS2NcDudBBLtAKZh5oYAXVjOncE53XE17fQGkXl5T2SE4yB30OE7R7iJz3VTZHhOx2Ydh0sgIX5zM2j6wYZCkjmudY/zHIlPWoGcdx/mXxNsESbcvF2Q0ajCh1mz5wYwFKrMGYYcUJUDghnHOW9NuDDxKxR15Od6vxYzN9EteAggaQ9qwVXi3QtpLCa3FsFup0wxWjdhCbTjEByYtYY/ZSHvfWlgYugX6X49J2cCM0ULidA4z+LeBKlg7d/R9JBQy/Uj9xOSIyBV/3mq8xtw3ve+5W+jUqqzc0QeTK8DuK3cGQvpMN3sV2kONPYtVd42H4U+s14snr2HLkTu9A6rqxHWqU9+rX14qXbBdXyGHagvUQ+jfwAb1a4y</source>
  </file>
  <file path="Message/Helper/MessageHelperService.php" generated-path="Message.Helper.MessageHelperService.html" hash="cc26c528003e2f8d093e6e433ea482d0" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="PartBuilderFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</namespace-alias>
    <namespace-alias name="PartFactoryService">\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Helper" line="17" package="MailMimeParser">
      <extends/>
      <name>MessageHelperService</name>
      <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</full_name>
      <docblock line="17">
        <description>Responsible for creating helper singletons.</description>
        <long-description></long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="22" package="MailMimeParser">
        <name>$partBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::partBuilderFactory</full_name>
        <default></default>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="22" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="27" package="MailMimeParser">
        <name>$genericHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::genericHelper</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the GenericHelper singleton&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\GenericHelper" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="32" package="MailMimeParser">
        <name>$multipartHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::multipartHelper</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the MultipartHelper singleton&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\MultipartHelper" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="37" package="MailMimeParser">
        <name>$privacyHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::privacyHelper</full_name>
        <default></default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="37" description="&lt;p&gt;the PrivacyHelper singleton&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Helper" line="42" package="MailMimeParser">
        <name>$partFactoryService</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::partFactoryService</full_name>
        <default></default>
        <docblock line="42">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="42" description="&lt;p&gt;the PartFactoryService&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="47" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::__construct()</full_name>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="47" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$partBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilderFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="58" package="MailMimeParser">
        <name>setPartFactoryService</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::setPartFactoryService()</full_name>
        <docblock line="58">
          <description>Set separately to avoid circular dependencies (PartFactoryService needs a
MessageHelperService).</description>
          <long-description></long-description>
          <tag name="param" line="58" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService" variable="$partFactoryService">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partFactoryService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="68" package="MailMimeParser">
        <name>getGenericHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::getGenericHelper()</full_name>
        <docblock line="68">
          <description>Returns the GenericHelper singleton</description>
          <long-description></long-description>
          <tag name="return" line="68" description="" type="\ZBateson\MailMimeParser\Message\Helper\GenericHelper">
            <type>\ZBateson\MailMimeParser\Message\Helper\GenericHelper</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="85" package="MailMimeParser">
        <name>getMultipartHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::getMultipartHelper()</full_name>
        <docblock line="85">
          <description>Returns the MultipartHelper singleton</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="\ZBateson\MailMimeParser\Message\Helper\MultipartHelper">
            <type>\ZBateson\MailMimeParser\Message\Helper\MultipartHelper</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="103" package="MailMimeParser">
        <name>getPrivacyHelper</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService::getPrivacyHelper()</full_name>
        <docblock line="103">
          <description>Returns the PrivacyHelper singleton</description>
          <long-description></long-description>
          <tag name="return" line="103" description="" type="\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper">
            <type>\ZBateson\MailMimeParser\Message\Helper\PrivacyHelper</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="47" code="PPC:ERR-50008">No summary for method __construct()</error>
      <error line="22" code="PPC:ERR-50007">No summary for property $partBuilderFactory</error>
    </parse_markers>
    <source>eJzdVk2P2yAQvftXzGEPSdSN703TraJ+XSKtNt3LKtKK4ElMRcACnCqq8t+LHTYyGNtJby0XG3jMY948sD88FHmRpJNJAhP4kTMNW8YR7LMgyoDcgskRXhbEoJZivSSML9keH4nSqKBQ8idSM7WLq/WfOKMoNEJuTPE+TWVhe7JUFKdS7VI3q9ONzu5dZ2rpYbH6bJeniSB71AWhnYTrJWpNdrj+jrxANUuSUg+DbdesvxJqpDrWnUXJeIbKDc3+Loh7X6E62FTsVpyITzYFKTTbWBm3UgFVSAwTO8jrPYO27xyNhVxkI6XJLfKFkJxl4DZSK0I50RrcHs5JO8LkdwK21aRVs2EOREE7PTed1s9CsYMND3dFRIZowG8oUDF65q7N4I9c0onz7JrgDoplyQ2rNtQgCccGaPY+vIPosYLTY4PGHxkgKZrgLoqWM848reHusrSMFfJYENlHKh2rqk9Tbuyxg20pqGFSwOsrtTY0qqRmdF24cR3nbL2q3Rl7Zdx/bANhHvdYtejUSmmFBjRWeRnkRzASyEHao0CZoiW3smZor5IMBWWoYRQRWSBmGshbwNiJGU/dbETIIFqkDr1CajTtKLFtRgL3SBosnsf9EZf0CU2phL7ixMJFD1Wv8eG9ee/QeOBRmAzbwsgl5N0EMJ/PQZScjxvgRvYB2Jb3l7+tkbeqV7cqmnE3+tvUaPzuxgDPz18ElRlm10eJnUTXxrNL93R5c/LHJLimykNXZljmAD9U6ADeV+rgNh4qdgtelzvk++cK3gntODU3eKP1uRt2R/+XLvSGhx5yhgfu84X3AR1yRQCuPeEz/c+O6IPGT+IN9gl+ZM7QU/IHuXyviQ==</source>
  </file>
  <file path="Message/Helper/AbstractHelper.php" generated-path="Message.Helper.AbstractHelper.html" hash="56812a7f47b5923853f8466f43e841d4" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="MimePartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</namespace-alias>
    <namespace-alias name="PartBuilderFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</namespace-alias>
    <namespace-alias name="UUEncodedPartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Message\Helper" line="18" package="MailMimeParser">
      <extends/>
      <name>AbstractHelper</name>
      <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper</full_name>
      <docblock line="18">
        <description>Base class for message helpers.</description>
        <long-description></long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="23" package="MailMimeParser">
        <name>$mimePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::mimePartFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="28" package="MailMimeParser">
        <name>$uuEncodedPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::uuEncodedPartFactory</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;to create parts for attachments&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Helper" line="33" package="MailMimeParser">
        <name>$partBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::partBuilderFactory</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;to create parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Helper" line="40" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Helper\AbstractHelper::__construct()</full_name>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" variable="$mimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory" variable="$uuEncodedPartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
          </tag>
          <tag name="param" line="40" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$partBuilderFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$uuEncodedPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\UUEncodedPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilderFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="40" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJylVEtPwzAMvudX+LADTLDeGc8JEJdJSMAFVZq81KNFbRMlDhKa9t9xuzJEFzQGubRW8j38xe3phc2tSoZDBUN4zAsPi6IkkKdFx2AWwDnB8wSZvKnTKRbltKjoHp0nB9aZV9I8EnCDvywLTbUnyJntSZIYK5UJTtPIuJek2/XJ3GfHXTESeZg8XAs8UTVW5C3qHwXTKXmPL5TeUWnJjZUKfvdhKTm9Rc3GvafdPnf1eH+GppiEoszI/Z3k6emm1iaj7JuXz4uYoPDpEr1ch3FQrRkgb7v2m7gxcC7bz4h5kUEn3yaJc89OWDuSq65cx6aWCmS1Ws0Spjd00EsG2IB2JKTtKKydIDPqvKKafaJNzfLScSTtUwaCZSAog0HVDzoqGsthl/JPiiFEM43Jbt/hf9u1kanYkpZDWG0F3Y+qdzwaUbTZHjDSZMTm94bCXD5MWIRac2FqmM2kbZmdoPlgfVDWLv9Hm5O/t/6F2cP1ISw3sAHLz+v4vGcFziKD2IPE7DS4+Dj1wNvOGmhsGBrQSq3UB7ZAz70=</source>
  </file>
  <file path="Message/MessageFactory.php" generated-path="Message.MessageFactory.html" hash="5d3b36f0faf283d492165057ff43d2eb" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="Message">\ZBateson\MailMimeParser\Message</namespace-alias>
    <namespace-alias name="MessageHelperService">\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <namespace-alias name="MimePartFactory">\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</namespace-alias>
    <namespace-alias name="PartStreamFilterManagerFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</namespace-alias>
    <namespace-alias name="PartFilterFactory">\ZBateson\MailMimeParser\Message\PartFilterFactory</namespace-alias>
    <namespace-alias name="StreamFactory">\ZBateson\MailMimeParser\Stream\StreamFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="23" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory</extends>
      <name>MessageFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\MessageFactory</full_name>
      <docblock line="23">
        <description>Responsible for creating Message instances.</description>
        <long-description></long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MimePartFactory.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="28" package="MailMimeParser">
        <name>$messageHelperService</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageFactory::messageHelperService</full_name>
        <default></default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;helper class for message manipulation routines.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="25" package="MailMimeParser">
        <name>$partFilterFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::partFilterFactory</full_name>
        <default></default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;an instance used for creating MimePart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="27" package="MailMimeParser">
        <name>$partStreamFilterManagerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::partStreamFilterManagerFactory</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;responsible for creating&#10;     PartStreamFilterManager instances&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="32" package="MailMimeParser">
        <name>$streamFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::streamFactory</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the StreamFactory instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="38" package="MailMimeParser">
        <name>$instances</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::instances</full_name>
        <default>null</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="static" line="38" description="MessagePartFactory[] cached instances of MessagePartFactory&#10;     sub-classes"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="36" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageFactory::__construct()</full_name>
        <docblock line="36">
          <description>Initializes dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="36" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="36" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="36" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="36" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$mhs">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::__construct()" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::__construct()" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MimePartFactory.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mhs</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="53" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageFactory::newInstance()</full_name>
        <docblock line="53">
          <description>Constructs a new Message object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="53" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="53" description="" type="\ZBateson\MailMimeParser\Message\Part\MimePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MimePart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::newInstance()" refers="\ZBateson\MailMimeParser\Message\Part\Factory\MimePartFactory::newInstance()" link="/classes/ZBateson.MailMimeParser.Message.Part.Factory.MimePartFactory.html#method_newInstance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="46" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::__construct()</full_name>
        <docblock line="46">
          <description>Initializes class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$streamFactory">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$streamFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="119" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::newInstance()</full_name>
        <docblock line="119">
          <description>Constructs a new MessagePart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="119" description="" type="\Psr\Http\Message\StreamInterface" variable="$messageStream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="119" description="" type="\ZBateson\MailMimeParser\Message\Part\MessagePart">
            <type>\ZBateson\MailMimeParser\Message\Part\MessagePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageStream</name>
          <default>null</default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="59" package="MailMimeParser">
        <name>setCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::setCachedInstance()</full_name>
        <docblock line="59">
          <description>Sets a cached singleton instance.</description>
          <long-description></long-description>
          <tag name="param" line="59" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory" variable="$instance">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$instance</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="74" package="MailMimeParser">
        <name>getCachedInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getCachedInstance()</full_name>
        <docblock line="74">
          <description>Returns a cached singleton instance if one exists, or null if one hasn't
been created yet.</description>
          <long-description></long-description>
          <tag name="return" line="74" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="92" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory::getInstance()</full_name>
        <docblock line="92">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Stream\StreamFactory" variable="$sdf">
            <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory" variable="$psf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\PartFilterFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
          </tag>
          <tag name="param" line="92" description="" type="\ZBateson\MailMimeParser\Message\Helper\MessageHelperService" variable="$mhs">
            <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
          </tag>
          <tag name="return" line="92" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sdf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartStreamFilterManagerFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilterFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mhs</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\Helper\MessageHelperService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Part\Factory\MessagePartFactory</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="36" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJydVE1vm0AQvfMrphIHO7LN3W6cyqmiRKqlqO4pQorWMJitYEG7S9oq8n/vsCwY7LXrlIPxsG/evPnaz3dlWnrBzY0HN/Aj5QoSniHQu2RSQ5GAThFeVkyjKkS4Zjxb8xyfmVQooZTFT4z0jJxr/y8Zj1AohFTrch4ERUlWUckIZ4XcBfZUBVsVT60xo/Cw2nwl98ATLEdVsuhswHCNSrEdLjyvojDPSoaPFKr9HG60RJY/CY0yIZqFQf2T6wpQ+IhZeTAba4PyjV8ZJSRTm59VxbMY5Qe8HlikC/kntOfa2v/BUBtNjR54RkVaM0EY+WHCxvsqtyacfXUe7cR9p34XQvEtzVxSSIgIpbnYgY0GXCjNRISqmzFW6ZSQL4ylPAYb1YxPlDGlWk8bCvC3RhHT52HxvHcP6DEy6oeI35gEV38hNRY09LXK3IrLmeBllZHiQoAsKlJuhBrCwLxpQzRtCMbg587ZOZFBe8dyGNQLfBUnR4DLrQS/VC6PQeMIdIxx5u/nqRomVW1pfSGpRGRSf32NqIlaVpEeNUB6TjOYdGdXiB+CT3Qfji9LHsN7h6QUUej5vC/X6GoC1rTjRYf2Nd2G06Wra3BrAjTY/UkL71t2BQwE/uqGudjWtyUwEYNEXUmhgGvr5WiWvSlI18Fwjkl34VGZzYcO1YSB8Kpbol2Ri72mfJ7sTo7OiZyc00WFE1WWjQ3zoTE+9YO21I6EBR06wRMYtQSfbi1Fz91JYdun+lM4Xe5Qf+M5p3287+Nb+skgjd4w7Lt/tqK9to6GQpq45cUJny77ZRxPXAwD5U5EebwYR6h+R1z+rtE+AtqyXCh1dzRu12Hv/QW7mrU/</source>
  </file>
  <file path="Message/PartFilterFactory.php" generated-path="Message.PartFilterFactory.html" hash="388cf591f219ed6c2d5666e284d0286f" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="22" package="MailMimeParser">
      <extends/>
      <name>PartFilterFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\PartFilterFactory</full_name>
      <docblock line="22">
        <description>Injectable factory class used by MimePart to construct PartFilter instances
in a testable way.</description>
        <long-description>Users are expected to use the static PartFilter methods directly -- this
class simply encapsulates them in an object:
 o PartFilter::fromContentType
 o PartFilter::fromInlineContentType
 o PartFilter::fromDisposition</long-description>
        <tag name="see" line="22" description="" link="\ZBateson\MailMimeParser\Message\PartFilter"/>
        <tag name="author" line="22" description="Zaahid Bateson"/>
        <tag name="package" line="22" description="MailMimeParser"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="33" package="MailMimeParser">
        <name>newFilterFromContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilterFactory::newFilterFromContentType()</full_name>
        <docblock line="33">
          <description>Creates a filter for the passed mime content-type.</description>
          <long-description>This method just calls PartFilter::fromContentType.</long-description>
          <tag name="see" line="33" description="" link="\ZBateson\MailMimeParser\Message\PartFilter::fromContentType"/>
          <tag name="param" line="33" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="33" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="47" package="MailMimeParser">
        <name>newFilterFromInlineContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilterFactory::newFilterFromInlineContentType()</full_name>
        <docblock line="47">
          <description>Creates an 'inline' filter for the passed mime content-type.</description>
          <long-description>This method just calls PartFilter::fromInlineContentType.</long-description>
          <tag name="see" line="47" description="" link="\ZBateson\MailMimeParser\Message\PartFilter::fromInlineContentType"/>
          <tag name="param" line="47" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="47" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="64" package="MailMimeParser">
        <name>newFilterFromDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilterFactory::newFilterFromDisposition()</full_name>
        <docblock line="64">
          <description>Creates a filter for the passed disposition and optional multipart
filter.</description>
          <long-description>This method just calls PartFilter::newFilterFromDisposition.</long-description>
          <tag name="see" line="64" description="" link="\ZBateson\MailMimeParser\Message\PartFilter::fromDisposition"/>
          <tag name="param" line="64" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
          <tag name="param" line="64" description="&lt;p&gt;one of PartFilter::FILTER_OFF,&#10;     PartFilter::FILTER_INCLUDE or PartFilter::FILTER_EXCLUDE&lt;/p&gt;" type="integer" variable="$multipart">
            <type>integer</type>
          </tag>
          <tag name="return" line="64" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$multipart</name>
          <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="76" package="MailMimeParser">
        <name>newFilterFromArray</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilterFactory::newFilterFromArray()</full_name>
        <docblock line="76">
          <description>Constructs a PartFilter from the passed array of options and returns it.</description>
          <long-description></long-description>
          <tag name="see" line="76" description="" link="\ZBateson\MailMimeParser\Message\PartFilter::__construct"/>
          <tag name="param" line="76" description="" type="array" variable="$init">
            <type>array</type>
          </tag>
          <tag name="return" line="76" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$init</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <source>eJy1Ve9r2zAQ/e6/4j4UmoUm/p5udOuPQKDdxpbCKIWiyJdGxZaEJNOF0f99d3LcKk3cZqMVJI6tu3d3771YH4/swmZ5v59BH6YL5WGuSgS6WuECmDmEBcLVsQjojb6+EKq8UBV+F86jA+vMHcowpGTO/1wqidojLEKwozw3lu5M7SQOjbvNV7s+n/lisLoZUnk4/nlK6XmmRYXeCtlZ8PoCvRe3eJi1LU80NyBm1PNcyGDcEmQpvIfaYwGzJaySAwQD0mgfXC0D8JOxKgPNoOiZ0BI9wykNAqhyg3gvljwa8OeSynsQDgF/WypJ6IRIVSJBlBCUTGErDAtTeCiUo+hyCYMBRRKvDNa06FVlaQO1FNbXJU/MYFXsQoOZ8WgjjgeTQI9Gc2eqE6MD6jBdWuyImOhSaXw97lR5a7wKyuhWR4+YhMVHoqZ5HFwJsVAFrOSJqjXDPIWPGx2yPxnQijrx6sOJwzijYI8xR3MCZPYsARCfFUnFGnG/g0AND9vM9hoN2jALd7UPIEVZ+pe42YB4NtsWMldx5H9RkbBO6VvY497Wth2G2uk1luJOHq+2npHBYV5rybyCxvsVOevVeo/AH2JewxmvDfyNTpPcw5j2EL87Wdewr6Il9t+b/w3n7abCFsO+uxYbNf9ZkZcQdtKlQ43i6W9J2hVgLP8UJVR1GRS/nVukJv9/xFqjInkP7KbX2otjq1JFZ4TSgYRsJwGjkc+atMJ4cj49+3HzbTw+aHPj2hIz+Xpyfnl6BkTglt2zX3H3LdySTNxLhztIZ/nUMcaOftqlxsvGak859lZyIjF4ajDhnFgy642zfHRZ05QHFV73wM3N44H6TN0Gek9pFd6C9i8M10tAO6ikpAS/14S2VD1kfwH5Gtl+</source>
  </file>
  <file path="Message/MessageParser.php" generated-path="Message.MessageParser.html" hash="d136775b63ec8ebc4d84486a46c5194c" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="StreamInterface">\Psr\Http\Message\StreamInterface</namespace-alias>
    <namespace-alias name="PartBuilder">\ZBateson\MailMimeParser\Message\Part\PartBuilder</namespace-alias>
    <namespace-alias name="PartBuilderFactory">\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</namespace-alias>
    <namespace-alias name="PartFactoryService">\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</namespace-alias>
    <namespace-alias name="StreamWrapper">\GuzzleHttp\Psr7\StreamWrapper</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="21" package="MailMimeParser">
      <extends/>
      <name>MessageParser</name>
      <full_name>\ZBateson\MailMimeParser\Message\MessageParser</full_name>
      <docblock line="21">
        <description>Parses a mail mime message into its component parts.  To invoke, call
MailMimeParser::parse.</description>
        <long-description></long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="27" package="MailMimeParser">
        <name>$partFactoryService</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::partFactoryService</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;service instance used to create MimePartFactory&#10;     objects.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="32" package="MailMimeParser">
        <name>$partBuilderFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::partBuilderFactory</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;used to create PartBuilders&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="40" package="MailMimeParser">
        <name>$lastLineSeparatorLength</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::lastLineSeparatorLength</full_name>
        <default>0</default>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="40" description="&lt;p&gt;maintains the character length of the last line separator,&#10;typically 2 for CRLF, to keep track of the correct 'end' position&#10;for a part because the CRLF before a boundary is considered part of&#10;the boundary.&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="48" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::__construct()</full_name>
        <docblock line="48">
          <description>Sets up the parser with its dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="48" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService" variable="$pfs">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
          </tag>
          <tag name="param" line="48" description="" type="\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory" variable="$pbf">
            <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$pfs</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartFactoryService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pbf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\Factory\PartBuilderFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="63" package="MailMimeParser">
        <name>parse</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::parse()</full_name>
        <docblock line="63">
          <description>Parses the passed stream into a ZBateson\MailMimeParser\Message object
and returns it.</description>
          <long-description></long-description>
          <tag name="param" line="63" description="&lt;p&gt;the stream to parse the message from&lt;/p&gt;" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="63" description="" type="\ZBateson\MailMimeParser\Message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="76" package="MailMimeParser">
        <name>addRawHeaderToPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::addRawHeaderToPart()</full_name>
        <docblock line="76">
          <description>Ensures the header isn't empty and contains a colon separator character,
then splits it and calls $partBuilder-&gt;addHeader.</description>
          <long-description></long-description>
          <tag name="param" line="76" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="76" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="91" package="MailMimeParser">
        <name>readHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readHeaders()</full_name>
        <docblock line="91">
          <description>Reads header lines up to an empty line, adding them to the passed
$partBuilder.</description>
          <long-description></long-description>
          <tag name="param" line="91" description="&lt;p&gt;the resource handle to read from&lt;/p&gt;" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="91" description="&lt;p&gt;the current part to add headers to&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="121" package="MailMimeParser">
        <name>findContentBoundary</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::findContentBoundary()</full_name>
        <docblock line="121">
          <description>Reads lines from the passed $handle, calling
$partBuilder-&gt;setEndBoundaryFound with the passed line until it returns
true or the stream is at EOF.</description>
          <long-description>setEndBoundaryFound returns true if the passed line matches a boundary
for the $partBuilder itself or any of its parents.

Once a boundary is found, setStreamPartAndContentEndPos is called with
the passed $handle's read pos before the boundary and its line separator
were read.</long-description>
          <tag name="param" line="121" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="121" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="148" package="MailMimeParser">
        <name>readUUEncodedOrPlainTextMessage</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readUUEncodedOrPlainTextMessage()</full_name>
        <docblock line="148">
          <description>Reads content for a non-mime message.  If there are uuencoded attachment
parts in the message (denoted by 'begin' lines), those parts are read and
added to the passed $partBuilder as children.</description>
          <long-description></long-description>
          <tag name="param" line="148" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="148" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="return" line="148" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="184" package="MailMimeParser">
        <name>readPartContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readPartContent()</full_name>
        <docblock line="184">
          <description>Reads content for a single part of a MIME message.</description>
          <long-description>If the part being read is in turn a multipart part, readPart is called on
it recursively to read its headers and content.

The start/end positions of the part's content are set on the passed
$partBuilder, which in turn sets the end position of the part and its
parents.</long-description>
          <tag name="param" line="184" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="184" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="208" package="MailMimeParser">
        <name>readPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readPart()</full_name>
        <docblock line="208">
          <description>Reads a part and any of its children, into the passed $partBuilder,
either by calling readUUEncodedOrPlainTextMessage or readPartContent
after reading headers.</description>
          <long-description></long-description>
          <tag name="param" line="208" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="208" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder" variable="$partBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
          <tag name="param" line="208" description="" type="boolean" variable="$isMessage">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partBuilder</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="230" package="MailMimeParser">
        <name>read</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::read()</full_name>
        <docblock line="230">
          <description>Reads the message from the passed stream and returns a PartBuilder
representing it.</description>
          <long-description></long-description>
          <tag name="param" line="230" description="" type="\Psr\Http\Message\StreamInterface" variable="$stream">
            <type>\Psr\Http\Message\StreamInterface</type>
          </tag>
          <tag name="return" line="230" description="" type="\ZBateson\MailMimeParser\Message\Part\PartBuilder">
            <type>\ZBateson\MailMimeParser\Message\Part\PartBuilder</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default></default>
          <type>\Psr\Http\Message\StreamInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <notice line="208" code="PPC:ERR-50013">Parameter $isMessage could not be found in readPart()</notice>
    </parse_markers>
    <source>eJzFWftv27YW/j1/xVlhzHbhR9b9MCBZcu9tb7oWaNCgyTBgc1fQEhXzVqIEkUqWdf3fdw4fMvWynW3FNZBYlngePI+PH6nv/1VsiqPl06dH8BRuNkJBIlIO+F2wUkOegN5w+Pk501zlcnXJRHopMn7FSsVLKMr8fzzSCxQm+X+nIuJScdhoXZwsl3mBv/KqjPgiL2+X7qlarlU8dz8WaB6eX/8XxZdHkmVcFSwaNLi65EqxW356dFShmStVrl6hKX97da1LzrLXUvMyQTWnZtQeXSv8qc2/55VIY14+Quoli3RePoTS7tZfVOKur3l5J7z/P1S//55yM0+c8Hdukj+VrCjIWZ88o1oBgwxtQYbGILNmQEidg9AKojwrcsmlNtlVC4AbfCDv8o98BhFLU1LU9PXkpKDvOsWs0pu8hJ8Z24gY3PxM9qKUKQVualb46NMR4Md4SB+Uv2MldGcKyn0LqTSTeIEzjwHdjnCymoNzyIt5deaTr6kI1cLdXJpvLE2Nd1HJqOgJLA0Z9K2ZyrYrwQi1y2S7IAZNYnooaVLjnzL9Fm1YiWLYYSmXt3rj+xAjrCEVkuKFJhgqnjVCoR8KQXl8gGeQYJpevHvzcka+f+S8AI1KP3pdUV6W6C2MuYzHUORKaEGZDLSRBmaBYM0jRsVIkqQUb+BTjo/XeSVjhmESVF9SCZwzhsDBR9M7FPbD29kSdxTbEc3wDU7w2s/vjQ3AGRz3R/CaY11XhdFdWFS6FyhA5R5zBKCYy0jwujqgDj0ZyPpqcVQkqmdUqypGxTppzqFaI6hBUsmIIgkfPlA4dFlFemIH4mfA3KwxYMjSFD7V40YawXp+3q1tDBVpPO0b2VJ8ZlTbkZ97o+tAxQZXUR8ogz4WUtg+gHOt6bUxGUPJdVVimQs9lJEWiMPImSQn/GVuc23ueZRLyjyrVVkzsNrj4M4EGhOTAXemRiTIRxBfCqwNOo6MJ15imxLnXSgzP7fwssVP3RLsz9CFVFXpUrRBa2hdKDnWwLNCP5iQYxlaaGF4meLEavDYAk0NI6gHBxQp9Y/QVh4BRbWcZXH8ylgbyiK6LuQtjKxPw+3U0NuLCXU+0OY7dm/N3uQ2Qlb9bFBjO00iAS8EX52dwXgMX39NziIAbrWNT8ZT8zhhqeJh25lUM0ww/61I85hPcOgMasFnQZLbVREEbTJivxy/R2AuRUbX37yfBoKfd6T7Hcorn2haCSz4YS9Kl3G6OaNYUfgxm6Zbtg3sFYWeDeUQ68qwN5wf1kFq262+6e/lQFXebL/dabbrT4Xrj2MiZgJx7OaFxZwPLKx1LZBJG0tKm/Hk8CLwBUDp34Y9ztt5NistFsEtrjFbK98cHx+30kxVZaI/MTJT+OMPK41ZNnX0ZKWfUKE1bo5h3C4tY9ZCx65qb0zutKuhd36mqIBjQfcZdXN9sipX8gks7I2WcDM6zsjiDEpbx7byrIawnOF+Q3uKVt/tRDVb5ra+qbDCFahOBOESFnlfRc/PFdcXMn7u2MZL+rbEINBk5lxJjXwZoc6tTDUQlhWuX2W47CDDYRou3r7sNEyfNb/SGUUi6RjOmI42hrF7TuS1Jc5so2cQkHmakEdMPhCJI4TGAdhDXXLzlih0k5sldD0jT+2KRhX1Hxm/wMUBVaD3V7kyHA6jym2sgjWhFfyxsk2PqOmZYEjuzLJB/jW5qtd3jwzRyB8KPP/I8pGIerY+UY+HjuXSkvDtEtolwmuOi+yt8rjr789sVBTIXIf6wo12CIr1GNc+XyU8T7zH086ixG0GEa40T9N6HMw9oAxQ69P9mNde1JBRadjX9nbkLsuoAhsLdzgeNef1b7LQg7F7W9xJ9sJqW3a4DSYumD3Qapt6CBe3V4+x1kxYYLQ7XSyAA3Azsurd/k3mch4eB+Cu/7WpNqpa/Ksq3CEhlYkR3DSLNhmKen3mmADJfoNoT3BLldNqvH6A8ZrfCjm2UD1FRrPJFXdizHU51X29BYhju5kOMSWEOYbuY73H2AZfBh3qvYFlqIcQjR9/vLAReltepcikb/hv2vH0v0A++ivDlcS1xqf7i8Js3cIjK//0MKxQ2upoGulHAtPkTTjo6cyi5LcfzIo2GS9/NUUBk1+O59+9//Tt5ylMFk+noyUxZYsWI7f4DXfqdg/V3bjOzyW/D+I96agwaoZ2yPNznE2d02BHPpl2FPWxK9LY6uk6bTa0PVII9GGvtE9YXcvuNdYuk0F7W8GrMi94idx0nOF8x9vg07bjMEE6E6bD2VD42aBwuN95Qb1scXu6k032BPVwoDwId3cpORxNFWJGyuvcMbh8fXlRQ2sbsV572meO0GhHZgBRWEwlFGKQVakWZgT9m5kR5G9AxrbncoanIktQ4o6nD/Xmi7iW3zz5LT/63PHnxpBZVL7EFa4+9FO+CsmB8XbGBOAYQjS/ZwM5I9yJNvWkFB3KkUhoJTTiCWKwzvTy2C/JB32cXY39H5DcAtROXjqw0+uSIaEuqY7MPrGDqn5VaItcmbA3GVQ/JJs1+UtjcuuQ/xFw3AM5xuO+8duTObep9qHuk2hzu11AwbalHWzRPJuZ2TPTAd5Tn79xQcyMqJXb3u5jILQjbJVyTbYSeoVAD0mPw4cvxarssHWep5xJGGE99h2x9hOsZiL+Zv811uPB5tvRShGTr9gd98dLXfq0raDOEdSOk5m9m6HjvgWt6x42iu3byRTOzs5AVmlKZ0ud7qZ22un9Qbx2YEa9J0mt3uog65Cuva3VPufveSMRvlxgYQ15TSVHkqrQH2qGR79+aO8eugZ2Vvjfe43wWLjdA7M2kF2UDVKCdNUe9tKLSQqY3dLRK0DWOQJOzDGIJrBBwoi/MnqFu1gsQnWCDk14puzRAsQ5V0h9kDQ4SY3KwLzgpngZjjzBbSaogkcisW81Q30ZZ/TmI57ButIQiyTBDa00r5ChrKRxmg4DzKHWWtxup9leARov1E9O0L13boL1G5jB0u15k+MZ5eejPwHB/hv0</source>
  </file>
  <file path="Header/SubjectHeader.php" generated-path="Header.SubjectHeader.html" hash="be12ebb6e134ac475885e5f74d4d33a0" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="16" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>SubjectHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\SubjectHeader</full_name>
      <docblock line="16">
        <description>Reads the header using a SubjectConsumer.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="24" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\SubjectHeader::getConsumer()</full_name>
        <docblock line="24">
          <description>Returns a SubjectConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="24" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyNUcFOAjEQvfcr5uABSKB3MYrowQuJEU9kL6U70Jrdtum0xsTw786WXaJEg3OZ7ex7895rb+6CCUJOJgIm8Goswc42CNyDign8DpJB2CxVQvKuWinbrGyLzyoSRgjRv6FOMyZ3/EVjNTpCMCmFayl94JPPUePMx73s/5LcUj3tDzOWh+X6kelSONUiBaX/FKyeUNUY50JkugSqHryj3H77WGN8Z1Vm93lfGEgloCkUyGTdHhSs87bLNRBP+VROxkfYKGVsDb18sa4bRTTwjgYAPxI6FrjfUopqGItPAVzFQledjZSjo191j4ihL/hRVAtngeBK/xyc4LFshuq/NzU4HQb9Ilk6P3Zic1jDLjudrHewxxN0dMnUuCw5hu+q93YOm97y0rN7GI3nhXYQB/EF84jm3w==</source>
  </file>
  <file path="Header/ParameterHeader.php" generated-path="Header.ParameterHeader.html" hash="32f02c3ca02033f7ff463da2645454bd" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="AbstractConsumer">\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</namespace-alias>
    <namespace-alias name="ParameterPart">\ZBateson\MailMimeParser\Header\Part\ParameterPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>ParameterHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader</full_name>
      <docblock line="19">
        <description>Represents a header containing a primary value part and subsequent name/value
parts using a ParameterConsumer.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="25" package="MailMimeParser">
        <name>$parameters</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;key map of&#10;lower-case parameter names and associated ParameterParts.&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\ParameterPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\ParameterPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="33" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::getConsumer()</full_name>
        <docblock line="33">
          <description>Returns a ParameterConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="33" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="33" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="44" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::setParseHeaderValue()</full_name>
        <docblock line="44">
          <description>Overridden to assign ParameterParts to a map of lower-case parameter
names to ParameterParts.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_setParseHeaderValue"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="60" package="MailMimeParser">
        <name>hasParameter</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::hasParameter()</full_name>
        <docblock line="60">
          <description>Returns true if a parameter exists with the passed name.</description>
          <long-description></long-description>
          <tag name="param" line="60" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="73" package="MailMimeParser">
        <name>getValueFor</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::getValueFor()</full_name>
        <docblock line="73">
          <description>Returns the value of the parameter with the given name, or $defaultValue
if not set.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="73" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyVVcFy0zAQvfsrlpkcnE4T3xsoUBiGS4FpmR7a5KDYm1jgSEYrp+0w/XdWku3ExmlaHRJb2n3SvvdWfvu+zMsoOTmJ4AR+5pJgJQsE/i+FsaBXYHOE2wthkbSaXwpZXMoN/hCG0EBp9C9M7ZSTXf6HQqaoCCG3tjxLEl3ym65MilNt1km9SsmSskn9MuXt4eL6M6cnkRIbpFKkBzecf0WRoZlFUUXHguaftKJqs/dwjWbLu85elfxxSdaI1DYTL8rmN+t+uB6Lxr3xkWuSr7A0SKgsgYDcx0OqlRVSSbXmudLIjTCPsBVFhUEGoTKgakn4p+JEcDwlftkBugiCikJ2u2tzYCcOeHVEZXNt4FaIXGZQV+CJTwtBtEsNVQA+WFQZQUNBmI7+RsDDV+MGA2+FgfmrKblbwG98hI0o2WYNVqHv0UxSQb7yEOzrJU8CH1OnkjfKoINF0xog8f/sS8u+5KhRi0LwDu4WM7/er+AKbWUUHaAvxLTVekTomQpGaXeiDTce+yg/Bw13oLBVpVIrtYI1tqHxsUONPUgQ0I36bP2wyTmD/sdEPA7kPQ1S+H2LxsgsQwVWO53kWvU08gu13oNCN1hBb44e1rgvRZ+xXT3HuCNfJmHQ4MZ1VHwYrc8e787deHY2hLJLmrXxK21QpDnEI8sX7eQ8NK4gb1I73kN2Q6440He/VGSFSpFZ6xDSz3BjB127/o6rsdqzHeC8uN94NR6PF9wTfnLWAXqKuk/DijdNYw1fU3xasdex+CCJa7uXNvcfkJINwcQ7YQ+pyOd0N9jIxfSbZ6l1gUJ15ayW/A3ZaZkLatmJPcoBt0s+io2fJ8qnL541fFs+lxeu6vpjuWOhLX8tt9wXDvQU+AYeZbgSVWFvwhUe8JhBpa2z5KsY6i4NATckhphnOWRn+NQvuubgtAvJdlFVUfSJdVZ9UxM6IEPfp82ts48861luP+4FSnlTh85rRXuK/gHkItFD</source>
  </file>
  <file path="Header/AbstractHeader.php" generated-path="Header.AbstractHeader.html" hash="3b927c39b384147c2bd3aac7b57864ed" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="AbstractConsumer">\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</namespace-alias>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Header" line="25" package="MailMimeParser">
      <extends/>
      <name>AbstractHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader</full_name>
      <docblock line="25">
        <description>Abstract base class representing a mime email's header.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="25" description="Zaahid Bateson"/>
        <tag name="package" line="25" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJylV01v00AQvedXDKgSSdU2nENbKHDgAkK04gCtqom9iRfZu9buOqWq8t+Z/fJnXRfwxXZ29s3MmzezzunbMitny8PDGRzCVcY1bHjOgO4lKgNyAyZj8OM9GqaluP6MPP/MC/YVlWYKSiV/scSc0Ga7/13OEyY0g8yYcrVcypLeZKUSdiLVdhlW9XKt0+PwckLu4f3lR9q+nAksmC4xGXV4/YlhytSb2azSU0bXH6TQVUEPF2ttFCYm/vDmr3bHh0umdhQz+Q5sRVhYI8ElOWoNipWKaSYMF1tAKAgWWEEOXmnIHHDk6opobW3UzGioSse2N6QdSXB95JftmqUoVsXbAYrUAiaY594mbgMjbRXJRwd1h3nFYhgxCZ/1arVlNU1WBCgAY5oFM5lMCQvpudKUN0WyY0rxNGWCnFk8xUylhNtXkjpKxYllGC0FmPtyNBYXu3/5bmMGnckqSg0rikbBD8SMpxBq6VRUB+yZ7aLOHmZAlyuhvQhphwrIxFbscYaD5dLdKSlDkmcpHFhLksNjeNcT6qI3E57t488b6y4i1JWyLahhjjrQSk43ShadIi/GonObR8JrpavwzitiDIcMHPtDqAut+VborrocfSTJBvjIGoigz7a+nHA91KDUJF3225cR/WpaC9dtqfOhRSyg16VwkHR/6JkHAlwJR5YeIaVa09SCTSUSw6WA21vrxKgqMfMp/0fe11HA9VXzWrTXgaHRe3zuyDuLyuotxkJYg12rIs6k7vmzaN5iet6PZjEApwHztVeDZlcw3w8U8M3JsqeA6PU/CxUmyVQnjY6WTunqmdAIuy5jm6ip6BbDLvgwnLtW/thqjqBf386k7IIVazKjTuS4zpnua9qeDSnbYJUb4EWZs4JOFHTBtmHrobCLLROKaR2N9MlgANcZjvR/TdNjChlHGxG4p+CssZv3xD0pNXuyKIX3dkQ3AxTk2n6IaMuPTOyZk8IdNxlY9Obk7TLyTIUNZvWTQ2HraDJ63mcgeGsT8Zy2as++3sF/fNwMVT8ZZAd/JF8/4KaS8AXuJ8E3MH/BitLcz9uJLBYtm5Fkf76+cUMpADcTaN+nSFR5/hxq6hOmxwt9dEj38YPi3io5YdQ0YjtW/+fx8S0IdKKuzWk5Hf/wS+P/QvxCeBPhNQfL06GFQ7D+nPXDpxsrwIVx74W088m3GtcR7pf9ROTCWWykKmj3qpfeqe8qG/f5Ck4jxec9sy9UyTTlNgTMWwV1/1KYsuDUIXO6kz9tUCRuGN4pLCGXZJdzQUN28e/k3t4aeenMxvh9+dBieL+Ch54e9i8j7fvZH3P/M2s=</source>
  </file>
  <file path="Header/Part/ParameterPart.php" generated-path="Header.Part.ParameterPart.html" hash="f1bed22160e1aaa0f1dc481e810312e1" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="16" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</extends>
      <name>ParameterPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart</full_name>
      <docblock line="16">
        <description>Represents a name/value pair part of a header.</description>
        <long-description>MimeLiteralPart automatically decodes the value if it's encoded.</long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9\*]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::name</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the name of the parameter&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>$language</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::language</full_name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;the RFC-1766 language tag if set.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>$languages</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::languages</full_name>
        <default>array()</default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;maintains an array mapping rfc1766 language tags to parts of&#10;text in the value.&lt;/p&gt;&#10;&lt;p&gt;Each array element is an array containing two elements, one with key&#10;'lang', and another with key 'value'.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="40" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::__construct()</full_name>
        <docblock line="40">
          <description>Constructs a ParameterPart out of a name/value pair.  The name and
value are both mime-decoded if necessary.</description>
          <long-description>If $language is provided, $name and $value are not mime-decoded. Instead,
they're taken as literals as part of a SplitParameterToken.</long-description>
          <tag name="param" line="40" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="40" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="40" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="40" description="" type="string" variable="$language">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="58" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::getName()</full_name>
        <docblock line="58">
          <description>Returns the name of the parameter.</description>
          <long-description></long-description>
          <tag name="return" line="58" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="69" package="MailMimeParser">
        <name>getLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::getLanguage()</full_name>
        <docblock line="69">
          <description>Returns the RFC-1766 (or subset) language tag, if the parameter is a
split RFC-2231 part with a language tag set.</description>
          <long-description></long-description>
          <tag name="return" line="69" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="73" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="73">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="73" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="94" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="94">
          <description>Decodes a matched mime entity part into a string and returns it, after
adding the string into the languages array.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="array&lt;mixed,string&gt;" variable="$matches">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="return" line="94" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$matches</name>
          <default></default>
          <type>array&lt;mixed,string&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="121" package="MailMimeParser">
        <name>decodeSplitPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeSplitPart()</full_name>
        <docblock line="121">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="121" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="163" package="MailMimeParser">
        <name>addToLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::addToLanguage()</full_name>
        <docblock line="163">
          <description>Adds the passed part into the languages array with the given language.</description>
          <long-description></long-description>
          <tag name="param" line="163" description="" type="string" variable="$part">
            <type>string</type>
          </tag>
          <tag name="param" line="163" description="" type="string|null" variable="$language">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="190" package="MailMimeParser">
        <name>getLanguageArray</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::getLanguageArray()</full_name>
        <docblock line="190">
          <description>Returns an array of parts mapped to languages in the header value, for
instance the string:</description>
          <long-description>'Hello and =?UTF-8*fr-be?Q?bonjour_?= =?UTF-8*it?Q?mi amici?=. Welcome!'

Would be mapped in the returned array as follows:

```php
[
    0 =&gt; [ 'lang' =&gt; null, 'value' =&gt; 'Hello and ' ],
    1 =&gt; [ 'lang' =&gt; 'fr-be', 'value' =&gt; 'bonjour ' ],
    3 =&gt; [ 'lang' =&gt; 'it', 'value' =&gt; 'mi amici' ],
    4 =&gt; [ 'lang' =&gt; null, 'value' =&gt; ' Weolcome!' ]
]
```</long-description>
          <tag name="return" line="190" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJydVG1P2zAQ/p5fcZMq0aK2EUxiEl03BGgaEkwTsC+oErom18Zbake20w1N/e87Ow5NAoUJf2hq+16e57nzffxcZEUU7+9HsA+3mTCwEDkBfwvUFtQCbEZwd4qWjJKzKxT5lVjRd9SGNBRa/aTEjtnZ+Z/kIiFpCDJri+M4VgXvVKkTGiu9jMOtiecmHYXNmNPD6c05u8eRxBWZApOdCWdfCVP+8M5Ooqg0DcsbqwlX55QojVZpM/thRT47y5yjPVNyTdqSZq9A9poKTYakNYDgMsdrzEti3kI/kkfIfEbHEDxFLG2mNNwhZiKFkNyjT3I0Bhgax+JMDiPQH0syNeAoXAo+xdydR38j4OWRuMVx16jBWC3k0ivuANXqF3XIYBz7L2tvWXtKoeeMJ/7wtbDXX85GBx+OjiBHuSxxSWBxCWIBrNF4V/ja9vkULC0nKBOvY5u9KoOIHXnHwK0WOKJM60iVAWqCubIZrFizUcr1TBkEQ5SUkDGoH2qgUH8vFluQvnW1Wgv2GlbSuBzQ20aXyraCj+GCKXCdh3VAluphTztxfpEENJBXtTPu/7Y3bgo+f6R8q9j4CbYTXz3o9iH0ks5JxyEUzRPYceUZ7bir5WjXtJzzs4NFKRMrlIT7+6QuXv91gEHNYUg8bGg+BVnm+cAnqVrbLa5Zf2vzbhqsGhYeFJdE2uPjJphncu/tDSYtv57laTX65As8bb6BjkFV92lA/axJg0en2d3aAOU8aN6Emqux6leZBy/jr3ZVR7pp0a9c3XXTcxNtf7sv8ZpsqaXZPT+eNqf2LqFrXuyVJdlvHKXfLXKI0GAz+U+Ij7Ooz/PUlHNWbtCaS0PXQS0C7nFjHcu41+ejHB6+P6ie5W/BgwPb060x2t5I/DKEe4V8u3U20Sb6B1H3NlU=</source>
  </file>
  <file path="Header/Part/AddressPart.php" generated-path="Header.Part.AddressPart.html" hash="077c8cbf26514013003d7c689e825836" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="23" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\ParameterPart</extends>
      <name>AddressPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\AddressPart</full_name>
      <docblock line="23">
        <description>Holds a single address or name/address pair.</description>
        <long-description>The name part of the address may be mime-encoded, but the email address part
can't be mime-encoded.  Any whitespace in the email address part is stripped
out.

A convenience method, getEmail, is provided for clarity -- but getValue
returns the email address as well.</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\ParameterPart" refers="\ZBateson\MailMimeParser\Header\Part\ParameterPart" link="/classes/ZBateson.MailMimeParser.Header.Part.ParameterPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9\*]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::name</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the name of the parameter&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>$language</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::language</full_name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;the RFC-1766 language tag if set.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>$languages</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::languages</full_name>
        <default>array()</default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;maintains an array mapping rfc1766 language tags to parts of&#10;text in the value.&lt;/p&gt;&#10;&lt;p&gt;Each array element is an array containing two elements, one with key&#10;'lang', and another with key 'value'.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="35" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressPart::__construct()</full_name>
        <docblock line="35">
          <description>Performs mime-decoding and initializes the address' name and email.</description>
          <long-description>The passed $name may be mime-encoded.  $email is stripped of any
whitespace.</long-description>
          <tag name="param" line="35" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="35" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="35" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\ParameterPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\ParameterPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.ParameterPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="51" package="MailMimeParser">
        <name>getEmail</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressPart::getEmail()</full_name>
        <docblock line="51">
          <description>Returns the email address.</description>
          <long-description></long-description>
          <tag name="return" line="51" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="58" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::getName()</full_name>
        <docblock line="58">
          <description>Returns the name of the parameter.</description>
          <long-description></long-description>
          <tag name="return" line="58" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\ParameterPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="69" package="MailMimeParser">
        <name>getLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::getLanguage()</full_name>
        <docblock line="69">
          <description>Returns the RFC-1766 (or subset) language tag, if the parameter is a
split RFC-2231 part with a language tag set.</description>
          <long-description></long-description>
          <tag name="return" line="69" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\ParameterPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="73" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="73">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="73" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="94" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="94">
          <description>Decodes a matched mime entity part into a string and returns it, after
adding the string into the languages array.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="array&lt;mixed,string&gt;" variable="$matches">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="return" line="94" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$matches</name>
          <default></default>
          <type>array&lt;mixed,string&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="121" package="MailMimeParser">
        <name>decodeSplitPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeSplitPart()</full_name>
        <docblock line="121">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="121" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="163" package="MailMimeParser">
        <name>addToLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::addToLanguage()</full_name>
        <docblock line="163">
          <description>Adds the passed part into the languages array with the given language.</description>
          <long-description></long-description>
          <tag name="param" line="163" description="" type="string" variable="$part">
            <type>string</type>
          </tag>
          <tag name="param" line="163" description="" type="string|null" variable="$language">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="190" package="MailMimeParser">
        <name>getLanguageArray</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::getLanguageArray()</full_name>
        <docblock line="190">
          <description>Returns an array of parts mapped to languages in the header value, for
instance the string:</description>
          <long-description>'Hello and =?UTF-8*fr-be?Q?bonjour_?= =?UTF-8*it?Q?mi amici?=. Welcome!'

Would be mapped in the returned array as follows:

```php
[
    0 =&gt; [ 'lang' =&gt; null, 'value' =&gt; 'Hello and ' ],
    1 =&gt; [ 'lang' =&gt; 'fr-be', 'value' =&gt; 'bonjour ' ],
    3 =&gt; [ 'lang' =&gt; 'it', 'value' =&gt; 'mi amici' ],
    4 =&gt; [ 'lang' =&gt; null, 'value' =&gt; ' Weolcome!' ]
]
```</long-description>
          <tag name="return" line="190" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJyFVEtv2zAMvvtX8BAgaZbE93aPPoFeChTrtkMRoFBkJtZgSwJFt8uG/vdR8qNp2mw6RKFIfvzIT/LHL770WT6dZjCFb6UJsDYVguxeEYNbA5cI9+eKMTi7vFGmujE13ioKSODJ/UTNC0mO+aeV0WgDQsnsj/PcebFcQxoXjjZ55w35KhTzzlhIeTi/u5T0PLOqxuCVPlhweY2qkE0sPsmyJuxE3jGhqi9RO1LsKCy/s6mWF2VM5AtnH5EYSbK6Zq9dVQRQEIzdSMeqKAhDAEcQaeS97ZWh2B+0A8LkfTWcPrJWW1gh1MJ2jla7AosZrBpOQVhLI/ACShzxtLJj3k9aAJzZLTyVhrtpGHsAI+oUmIz3WEQ81wxanIGOPVsjqIKPXDqhs0G+iiizpDC5RyMFYS1N60qR4S3M54mzBP5QVYMRipAbsuEdDirAE1bVMJ9T1UgdgnulSlNAJ03SVvAl4axNjPoB/mK0IoEYMlLRJp5mfzKQlTSKawq3SMKvDu2MCtG3EMVA2ULmYtioyvzGsKvEuNUoRiS6ix6q36OMXuhI66MU+o50osKobXZnxlFyZbc9zotEb0qc+tgV7F8/GOm9k72EWEm6S7QOuBKrzpen3TcreU6wbqxm4yw8PIj2Et5onvyfwaytNuuQjxJkK0MCV4SWj493QQdnXG8BX7sT+Kuj8Xgwj06Gv3n+/nsYAkYs36f558d4L+FTb+q27JVtL8bEE24eCH0lskzG+TJ8yMczKTn015V8Tr/7t+3robv+VuH2WXSy/FOP/tVN9mfbQew21pN7zv4CzdO+ig==</source>
  </file>
  <file path="Header/Part/MimeLiteralPartFactory.php" generated-path="Header.Part.MimeLiteralPartFactory.html" hash="180e28cb206817b61132aa09e5d86a95" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="15" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</extends>
      <name>MimeLiteralPartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</full_name>
      <docblock line="15">
        <description>Extends HeaderPartFactory to instantiate MimeLiteralParts for its newInstance
function.</description>
        <long-description></long-description>
        <tag name="author" line="15" description="Zaahid Bateson"/>
        <tag name="package" line="15" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPartFactory.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="22" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::charsetConverter</full_name>
        <default></default>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="22" description="&lt;p&gt;passed to HeaderPart constructors&#10;     for converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="23" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory::newInstance()</full_name>
        <docblock line="23">
          <description>Creates and returns a MimeLiteralPart.</description>
          <long-description>The default implementation returns a new Token.</long-description>
          <tag name="param" line="23" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="23" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPartFactory.html#method_newInstance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::__construct()</full_name>
        <docblock line="29">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="29" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()</full_name>
        <docblock line="43">
          <description>Creates and returns a default HeaderPart for this factory, allowing
subclass factories for specialized HeaderParts.</description>
          <long-description>The default implementation returns a new Token.</long-description>
          <tag name="param" line="43" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="43" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>newToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newToken()</full_name>
        <docblock line="54">
          <description>Initializes and returns a new Token.</description>
          <long-description></long-description>
          <tag name="param" line="54" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="54" description="" type="\ZBateson\MailMimeParser\Header\Part\Token">
            <type>\ZBateson\MailMimeParser\Header\Part\Token</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="65" package="MailMimeParser">
        <name>newSplitParameterToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newSplitParameterToken()</full_name>
        <docblock line="65">
          <description>Instantiates and returns a SplitParameterToken with the given name.</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="65" description="" type="\ZBateson\MailMimeParser\Header\Part\SplitParameterToken">
            <type>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="76" package="MailMimeParser">
        <name>newLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newLiteralPart()</full_name>
        <docblock line="76">
          <description>Initializes and returns a new LiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="76" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="76" description="" type="\ZBateson\MailMimeParser\Header\Part\LiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\LiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="87" package="MailMimeParser">
        <name>newMimeLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newMimeLiteralPart()</full_name>
        <docblock line="87">
          <description>Initializes and returns a new MimeLiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="87" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="98" package="MailMimeParser">
        <name>newCommentPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newCommentPart()</full_name>
        <docblock line="98">
          <description>Initializes and returns a new CommentPart.</description>
          <long-description></long-description>
          <tag name="param" line="98" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="98" description="" type="\ZBateson\MailMimeParser\Header\Part\CommentPart">
            <type>\ZBateson\MailMimeParser\Header\Part\CommentPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="110" package="MailMimeParser">
        <name>newAddressPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressPart()</full_name>
        <docblock line="110">
          <description>Initializes and returns a new AddressPart.</description>
          <long-description></long-description>
          <tag name="param" line="110" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="return" line="110" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="122" package="MailMimeParser">
        <name>newAddressGroupPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressGroupPart()</full_name>
        <docblock line="122">
          <description>Initializes and returns a new AddressGroupPart</description>
          <long-description></long-description>
          <tag name="param" line="122" description="" type="array" variable="$addresses">
            <type>array</type>
          </tag>
          <tag name="param" line="122" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="122" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressGroupPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$addresses</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="133" package="MailMimeParser">
        <name>newDatePart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newDatePart()</full_name>
        <docblock line="133">
          <description>Initializes and returns a new DatePart</description>
          <long-description></long-description>
          <tag name="param" line="133" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="133" description="" type="\ZBateson\MailMimeParser\Header\Part\DatePart">
            <type>\ZBateson\MailMimeParser\Header\Part\DatePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="146" package="MailMimeParser">
        <name>newParameterPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newParameterPart()</full_name>
        <docblock line="146">
          <description>Initializes and returns a new ParameterPart.</description>
          <long-description></long-description>
          <tag name="param" line="146" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="146" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="146" description="" type="string" variable="$language">
            <type>string</type>
          </tag>
          <tag name="return" line="146" description="" type="\ZBateson\MailMimeParser\Header\Part\ParameterPart">
            <type>\ZBateson\MailMimeParser\Header\Part\ParameterPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
    </class>
    <source>eJx1UstqAzEMvPsrdOihXcj63pQ2pA9aaKDQnkIuilfJumxsY2v7oOTfK+8jhEB0kcWMRiPbN3ehDkoXhYICPmqbYGMbAskBI4PfANcEyzkyJe9WC7TNwu7oDWOiCCH6TzJcSnPunzXWkEsENXO41toHqXwbDZU+bvWAJr1O1WQoShkP8/cHadfK4Y5SQHN24OqZsJIkFU/VaPvxh8lVCXowY09o2MdfYA/WJUbHVvQgC71apohNZsmuPoKV7Oj7peMZyoKb1hm23h32wpZroS4Ra1vB4K2zbBpM6VR4HE/njKk/BRKd/xwF3EfKqoCugkjcRifnU91yZI95Jo+EO0gcrdvCxRc2LR2wXuZo+IDoLod2LU9wWPX4Ci57oauO1zvNMehdsPySya3wT9yNbdOuY6/26h8k5MRv</source>
  </file>
  <file path="Header/Part/LiteralPart.php" generated-path="Header.Part.LiteralPart.html" hash="4c4641d969b2c8dc05e9763aa5aadccd" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="18" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\HeaderPart</extends>
      <name>LiteralPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart</full_name>
      <docblock line="18">
        <description>A literal header string part.  The value of the part is stripped of CR and LF
characters, but otherwise not transformed or changed in any way.</description>
        <long-description></long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="26">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="26" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="26" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJyNU01v2zAMvftXcECAfCCN7+mydU037NACw7pdCgMBI9OxNkUSJLpdsfW/l7aVJk07bDqY+uB7j3yW3r73tc/yySSDCXyrdYRKGwKJHgODq4BrgptzZIrOFleozZXe0hcMkQL44H6Q4pmAW/yZ0YpsJKiZ/TzPnZeVa4KimQubPJ3GfB3Lk7SYiTycX18IPM8sbil6VH8VLD4TlhJkxadZ1sT/ykzzHvQMc82BcHtBygVkF2LxnbUplnVLwUtnbykwBVFKBn0Ao2UDDdQdJUQO2m46r2Yg/hHcomlo51vnoXjZpnlPZbu//ApoS7j81BIqkUIllHEK60b8FlS401KjdQwc0MbKhW2LDG2y3chUW2G4hzu8fzIeG64l4wax1iWk9jpPlcEY4bIvu7UA6BeTLSPsXcl+ZyCja7IdE1iKL8IB+AzpGt53FqOUkvpn95PsDruLZ9I9buHYTRioo50jQOIcHJLmXfTNWq4NVI1VrJ2F1Uo5K+mN4tG/ZaaJEhZgG2PGHWXfeUeOgSzP54ekLzjGp0/5A5bXcvKu/9+LxL0/1hWMkt6bRVI8UHuFwQfarAJ5Iw9gNMyL8Kew+XAKw+F0l6r6Oj5a5UrxKAmMD6p6yPrvQ/YIWa5BIA==</source>
  </file>
  <file path="Header/Part/Token.php" generated-path="Header.Part.Token.html" hash="668889be0300709deedac0360afb3a35" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="23" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\HeaderPart</extends>
      <name>Token</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\Token</full_name>
      <docblock line="23">
        <description>Holds a string value token that will require additional processing by a
consumer prior to returning to a client.</description>
        <long-description>A Token is meant to hold a value for further processing -- for instance when
consuming an address list header (like From or To) -- before it's known what
type of HeaderPart it is (could be an email address, could be a name, or
could be a group.)</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="31" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::__construct()</full_name>
        <docblock line="31">
          <description>Initializes a token.</description>
          <long-description></long-description>
          <tag name="param" line="31" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="31" description="&lt;p&gt;the token's value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="42" package="MailMimeParser">
        <name>isSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::isSpace()</full_name>
        <docblock line="42">
          <description>Returns true if the value of the token is equal to a single space.</description>
          <long-description></long-description>
          <tag name="return" line="42" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="52" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::ignoreSpacesBefore()</full_name>
        <docblock line="52">
          <description>Returns true if the value is a space.</description>
          <long-description></long-description>
          <tag name="return" line="52" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method_ignoreSpacesBefore"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="62" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::ignoreSpacesAfter()</full_name>
        <docblock line="62">
          <description>Returns true if the value is a space.</description>
          <long-description></long-description>
          <tag name="return" line="62" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method_ignoreSpacesAfter"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJzNVE1vGjEQve+vmEOkAArsnTRpvlSlh0hVSS8RUjSYgXXx2lt7NjSt8t879pqQEKWflyKB8XrmzfObN/vmbVM1RTkYFDCA60oHWGhDIGuDnsEtgCuCmzNkCs5Or1CbK13TB/SBPDTefSbFI0mO+SdGK7KBoGJuxmXpGtm51isaOb8s82koZ2E+zJuRlIezyYWkl4XFmkKD6tWC00vCuSyy48OiaMNvReb/XdKznAl7wvqClPPIzofpJ9Zmel5FCD539o48k5dKWaBLZ+YBEAJ7bZdwh6YlYLciKzIhw1obA56+tNoT4HyuWTuLJuqkKISYM7sHjFDK2dDWSUPtvIBIHrfexhjZICijySZpIX5P4TrVkc7UhJZjUCV0JLKjsRCUReulXf5pveEwnWgbGK0ou67IbuvHCLSRqpd4MDowVEkt6Bm9InjnXQ2Sf+36EWpGAib24P0AK+vWVvCQIx7fNxTtstVaoiLbnnKt0JxRLES1dGlT7gC2RxB7fyCVOm6Pj5fetc2ovzEYtlwJmxvESs8htzF5RxmUC3Qa0VcmK43acim+FyCf1Mb4GcB7K81Bo79RbGjq4WhztllPZAawhl0/wJ7aebKTkO2xl/1RZY+IZulJji7T2rQzGQXpnFXRLHB7GzvDvlXc+3Xhg1ykn7C6SyZU9GKe8fgp2ovk/uFj/B7L6A+PO8JHGbQ7fki/u/J9TGYNINBih+4t0WXnVwZv3CrTIBOQLB0NKS+XNOIvxe78DzPnzE8V0mESAXq7d875ved3OTqCfdjv/91ddBr2f6S7tDIyiXI4S+PzGvNM/PF+/wfn04VY5U8pPxQ/ADfC+uo=</source>
  </file>
  <file path="Header/Part/HeaderPartFactory.php" generated-path="Header.Part.HeaderPartFactory.html" hash="ecebc296a7b89d003f594be06a2db628" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="16" package="MailMimeParser">
      <extends/>
      <name>HeaderPartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</full_name>
      <docblock line="16">
        <description>Constructs and returns HeaderPart objects.</description>
        <long-description></long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="22" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::charsetConverter</full_name>
        <default></default>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="22" description="&lt;p&gt;passed to HeaderPart constructors&#10;     for converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::__construct()</full_name>
        <docblock line="29">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="29" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()</full_name>
        <docblock line="43">
          <description>Creates and returns a default HeaderPart for this factory, allowing
subclass factories for specialized HeaderParts.</description>
          <long-description>The default implementation returns a new Token.</long-description>
          <tag name="param" line="43" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="43" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>newToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newToken()</full_name>
        <docblock line="54">
          <description>Initializes and returns a new Token.</description>
          <long-description></long-description>
          <tag name="param" line="54" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="54" description="" type="\ZBateson\MailMimeParser\Header\Part\Token">
            <type>\ZBateson\MailMimeParser\Header\Part\Token</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="65" package="MailMimeParser">
        <name>newSplitParameterToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newSplitParameterToken()</full_name>
        <docblock line="65">
          <description>Instantiates and returns a SplitParameterToken with the given name.</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="65" description="" type="\ZBateson\MailMimeParser\Header\Part\SplitParameterToken">
            <type>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="76" package="MailMimeParser">
        <name>newLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newLiteralPart()</full_name>
        <docblock line="76">
          <description>Initializes and returns a new LiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="76" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="76" description="" type="\ZBateson\MailMimeParser\Header\Part\LiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\LiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="87" package="MailMimeParser">
        <name>newMimeLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newMimeLiteralPart()</full_name>
        <docblock line="87">
          <description>Initializes and returns a new MimeLiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="87" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="98" package="MailMimeParser">
        <name>newCommentPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newCommentPart()</full_name>
        <docblock line="98">
          <description>Initializes and returns a new CommentPart.</description>
          <long-description></long-description>
          <tag name="param" line="98" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="98" description="" type="\ZBateson\MailMimeParser\Header\Part\CommentPart">
            <type>\ZBateson\MailMimeParser\Header\Part\CommentPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="110" package="MailMimeParser">
        <name>newAddressPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressPart()</full_name>
        <docblock line="110">
          <description>Initializes and returns a new AddressPart.</description>
          <long-description></long-description>
          <tag name="param" line="110" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="110" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="return" line="110" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="122" package="MailMimeParser">
        <name>newAddressGroupPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressGroupPart()</full_name>
        <docblock line="122">
          <description>Initializes and returns a new AddressGroupPart</description>
          <long-description></long-description>
          <tag name="param" line="122" description="" type="array" variable="$addresses">
            <type>array</type>
          </tag>
          <tag name="param" line="122" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="122" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressGroupPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$addresses</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="133" package="MailMimeParser">
        <name>newDatePart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newDatePart()</full_name>
        <docblock line="133">
          <description>Initializes and returns a new DatePart</description>
          <long-description></long-description>
          <tag name="param" line="133" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="133" description="" type="\ZBateson\MailMimeParser\Header\Part\DatePart">
            <type>\ZBateson\MailMimeParser\Header\Part\DatePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="146" package="MailMimeParser">
        <name>newParameterPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newParameterPart()</full_name>
        <docblock line="146">
          <description>Initializes and returns a new ParameterPart.</description>
          <long-description></long-description>
          <tag name="param" line="146" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="146" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="146" description="" type="string" variable="$language">
            <type>string</type>
          </tag>
          <tag name="return" line="146" description="" type="\ZBateson\MailMimeParser\Header\Part\ParameterPart">
            <type>\ZBateson\MailMimeParser\Header\Part\ParameterPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>eJy9lk1v2zAMhu/+FTwEaFakzb3dZ9N9FFiBAukuRYBCkZlYmy0ZkpyiG/bfR8uOYzuxFSTIfDEckS/JhxTbtx/SKA3G5+cBnMNjJAwsRIxA75RpC2oBNkJ4umEWjZKzeybie5HgA9MGNaRa/URuL8k59/8YC47SIETWplfjsUrpS2Wa46XSy3F5asZzE16UH5cUHm6mt+Q+DiRL0KSMdwacfUMW0ou+7HUQZKZmObUaWXKLXGlmlTazH1bEs0mUO9qJkivUFjV5lcXST8bqjFsDTIag0WZaGigiPLji53lxpqqOZTZSGp4Yi0QIZVyXOI+Zqbt+YZxSeA3+BECPC5g/pLFiGto5wYC3f0lJD0Owqp4PX2dM1a0F3bOgrHjhK+QSyIheBoSseV9dlRafJVchnZcKY/emRlqqlUJu5XLtDNqFTJG4ZSmESD0OUXKBOajisKqWZogle9TbzCWb03DAIpPcCiXh+bkqfOiXeuM0CvD5M7A01Bfvtwi/66r07856JzRc1O/GqDCqfsGy2NablPfCuntUzMAIWByrlw1wMNm8mJfCgsA5J5MiFywWv6kJG71tqI90H9dxRZLGmKC0zJHaJCbxBR7VL5RdPSlmBAYrFmdYnRUCtfC9jaEgd9QYJjkOC6E2/FKv7AHZu5zWxn2876SwBY028+NKm+2xWWZO3ld6o5TddVepDjumcAR7ocgZE43t+ZumsbAPedVIai4UvAgbuaW9FCv6zHeqj1Ru0wa1Q9pHZIfL0Gn34Nnp0wnLiR0+Nt8FybA47/HphqcWxAesZuofpIbxUePUhygv6r9gagXyoWqZ+3FtOZwM2UQl+Qo+La5aEB+qmqkfU8P4ZIg+haFGY/ZB1NhFzSNMiM9B9GrxffRqpsXyGpWBeyA2fHqXVyV2NMuvWmVpraA2T6Y1e4UBK6zR7IP7AKTtNHxcK/thO8GSEP1jdnbmZ73R6Qbelj4C+i0B6YF9/P1uBejEuLbz3+yN5cmudfV3+8iL3cTWPIuZXGZseRjVRoI+tA3j6u673EabPGg+ZRb3bYOWjm8ftANU/fgb/AMbat/e</source>
  </file>
  <file path="Header/Part/MimeLiteralPart.php" generated-path="Header.Part.MimeLiteralPart.html" hash="dab2ae9eb2f822c00a575797f464dd50" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\LiteralPart</extends>
      <name>MimeLiteralPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</full_name>
      <docblock line="19">
        <description>Represents a single mime header part token, with the possibility of it being
MIME-Encoded as per RFC-2047.</description>
        <long-description>MimeLiteralPart automatically decodes the value if it's encoded.</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9\*]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>$languages</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::languages</full_name>
        <default>array()</default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;maintains an array mapping rfc1766 language tags to parts of&#10;text in the value.&lt;/p&gt;&#10;&lt;p&gt;Each array element is an array containing two elements, one with key&#10;'lang', and another with key 'value'.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="53" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()</full_name>
        <docblock line="53">
          <description>Decoding the passed token value if it's mime-encoded and assigns the
decoded value to a member variable. Sets canIgnoreSpacesBefore and
canIgnoreSpacesAfter.</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="53" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="73" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="73">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="73" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="94" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="94">
          <description>Decodes a matched mime entity part into a string and returns it, after
adding the string into the languages array.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="array&lt;mixed,string&gt;" variable="$matches">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="return" line="94" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$matches</name>
          <default></default>
          <type>array&lt;mixed,string&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="121" package="MailMimeParser">
        <name>decodeSplitPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeSplitPart()</full_name>
        <docblock line="121">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="121" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="139" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::ignoreSpacesBefore()</full_name>
        <docblock line="139">
          <description>Returns true if spaces before this part should be ignored.</description>
          <long-description>Overridden to return $this-&gt;canIgnoreSpacesBefore which is setup in the
constructor.</long-description>
          <tag name="return" line="139" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="152" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::ignoreSpacesAfter()</full_name>
        <docblock line="152">
          <description>Returns true if spaces before this part should be ignored.</description>
          <long-description>Overridden to return $this-&gt;canIgnoreSpacesAfter which is setup in the
constructor.</long-description>
          <tag name="return" line="152" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="163" package="MailMimeParser">
        <name>addToLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::addToLanguage()</full_name>
        <docblock line="163">
          <description>Adds the passed part into the languages array with the given language.</description>
          <long-description></long-description>
          <tag name="param" line="163" description="" type="string" variable="$part">
            <type>string</type>
          </tag>
          <tag name="param" line="163" description="" type="string|null" variable="$language">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="190" package="MailMimeParser">
        <name>getLanguageArray</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::getLanguageArray()</full_name>
        <docblock line="190">
          <description>Returns an array of parts mapped to languages in the header value, for
instance the string:</description>
          <long-description>'Hello and =?UTF-8*fr-be?Q?bonjour_?= =?UTF-8*it?Q?mi amici?=. Welcome!'

Would be mapped in the returned array as follows:

```php
[
    0 =&gt; [ 'lang' =&gt; null, 'value' =&gt; 'Hello and ' ],
    1 =&gt; [ 'lang' =&gt; 'fr-be', 'value' =&gt; 'bonjour ' ],
    3 =&gt; [ 'lang' =&gt; 'it', 'value' =&gt; 'mi amici' ],
    4 =&gt; [ 'lang' =&gt; null, 'value' =&gt; ' Weolcome!' ]
]
```</long-description>
          <tag name="return" line="190" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJzNWGtz00YU/Z5fsWUyIzv4QSDQNtR1A5jCDGlDYoYpsWvW0tpekLVGu0pIKf+9Z1+SLNkJ0JlOPZPYkvY+9t5z7r2rn/qrxWqnu7e3Q/bIcMElmfGYEXyvaKqImBG1YOTNI6qYFMnomPL4mC/ZCU0lS8kqFe9YqDoQ1vK/xDxkiWRkodTqsNsVK1yJLA1ZR6Tzrnsqu1MZtd1FB+bJo7MnEO/uJHTJ5IqGWw2OnjEa4QtX6uHOTiZLK89UyujyCQtFSpVI5eiV4vHo8UILqsciuWCpYimk3GZP2SplkiVKEkokT+bY9hKWyMLYsPtX4j1LWuSSq4UJxEpIyac85upKx4YrMmUQ1fqOnx8P2oMkFBGLCEX8oOP06eP23TsH3+sAEbMIBl5w+EFjvQdCMyWWVPGQxvEViZiWlsbSBY0z5EHbCCRhVm8eaMgtREreULrgEXEhMDEMYyplzQ77qFgSSVK6t/Nph+BjoqE/0HpBUyJVig2RlM3ZR8RAYX1C4GK40LepCVHbuWNi5KS75jsUiVQmFJOTo9Mh/g2Hg9PfSI8EvVH//Kj9hrb/GrUnd9o/jvbGt3Hr5aMP0zG+/xz19XUveGgUbfRtKkRMkE2khagU4cE3nyciZcTARiIbM32lFg7Aa84BrQpohd+7IU2eG8EzI/fIivXIjMaS/SsP6AwR+2oHjozUzfZpmtIrpIMnCn+wluS3ViuTt1m4//2DBySmyTyjczhI51J7qZ2RwKxXpwAJwpMCax3/xH8PaLhw2lnMlmCKLgu5RaRa+6CNqkvhl8gWEQmzhHnPrryuQPsTtCANbiQCRtN8DQmM/aCzLVZ+LxIBOh9vjo7mfWR80SwFBSBoyFsh0hp8jTcg9DwxnPO6LA0jJ4nYAfVsOYXLSAGn05h1yBlDNDejCFq9pk1ZrsX5F6SGLkm1UgEjlTsVAcfUXbPN9dhlU5RXMsuSUHGRkMnE8DLNQtW42UzLqWwaXbZKGK00RYIPD8vaasLNh/n6XU2C9s82ij1/aYOr61PDmSkkul2knc0nptygBKksRWaA9UKnr0g9sDCeHR7WSk3N/jaqNzSXmyWDjVvdP0dy75O38bl7Kw/FTVo9fzcpLRRC+2i3pvXzRkA/5bpea4SmbBWb0mK6k+Wxb0g8tSiVNVQNwYMlQ5eIUJnQr2xXWaNEoqHt6QyYGG5o/W3nsGx5bYwbylpXikZgm6RxRluweqeoDWhnehUHUi4meuXE5t3rQ+8KLWSsX4aRWkLYimSqk1Fe0uYkBm7tNiJ5Xhhv8mcWTe7hlkqTE6YMUqOmyoWvwSFQnbKluEBVXKD92gFnytQlQyp06aTRO9xCeTUhLfdWWRj0NDLQcpAAuBrek+ZoJG83+r38WuMs2N1H0XVbWPPI5OzkdPDr5OzkxfPh5MngxfPjyeOjk+Gr00HLNnxXIbPEX1nsoQw4brKo8I+6KU1J76SB3ZqLBvrGmRZp77e22id/lx/99vtkcHwy/KNMQtjXM0VQ3NKs1g2rUfYEY9guAotprVlKXq6hU6lKZ9pjLdnwUoX+z/kvhySt4ToCP3HDHM2D6dKrFVtsWwZ6wFquu5qnWnaS8NpolHc3t9wI6+uiPRomX0+L8zHZtf7IL6IGv8BsWSOG3dDAbKXh9dU4MhXRlS787vn5wbgIJ/pxAwaVyFYYlHMd5/fGTdLrIbUvg1rKnL4PGfgaTeAbBhA0Y1datLqcGMEEuA96d+9o+Gu5ZjmVGFZwctisfUole3DgdVrZTSjIp5LyDu+Wdrjrx4gcZJX6ZZW3Cun9ccsMlfVug+wPxQtnsOE1twonSiIenm7Rl0G0dP7JpyOL1BqcXiWgmsoS4CKG98upi9XEnZtmOLFJTUfgPkHxtgOC1JX95NkJud85KE9I9tZ90mAXqIbcHDevAlSYmEtlD1ISEIFFFjU7pN5RSCSYTAI/aPvVBD0jt13bgz5Nmm6TKUMht9BQ0ODAnXvXQ4FSz5ZmmJ6y8rx4ifaJm3Oh/3v7WnwpcBja6kSlXVkb307KevGq8FFTbn3awZGssXYmG99ujvbq9/p6nTmoNfUvc1TDr56dZay1AsfNKnE9ItcGwM0lZCPTbiZSrVpfy5tvI8upK83m2IdYbjlxErkQWRxpiNiDYVRL/O9wPuVRpNu/qERn87SKwQGtDRYApGzljm35IcNP42LD2cJp12PptUcEXjPaqOLnCxz938XPzuX/bfiMza+LnhG5LnhHUSTLR9tifNgwARSvq+ZcV1X/+KYKVHpfsf7o7yRDNc2bzU3Tc4V1Wm1rrV9qdbVpwQYm3woGFZz21+qIfYlAej8XylrrC+yLBLOi2Aw+4y8BZnEUmrlJV79UMe8RShF2r0xcs3PDLCDstXGgiSYhK41qh9W4B89YHAvTbXr9V8On7R/2Zml7yvov+1ORvBNZOun38kdc4f6SE7rkIe/3OuQ1i0OxZN8FVb2vPXOc485XP6y77VHdnWH/UtYce/v2rX4d7K7O/Q/9uaOjel7KgU5iqxzy0q4CMm6VhferwoHZb7Au7/Zek75Xk+aqIurDUxU9uNlrhFO4eJKxlx2XIrKtKPiB+ny8TohKaZgz5blwpON/Q2XIkeYh+3nnH9WVFiE=</source>
  </file>
  <file path="Header/Part/AddressGroupPart.php" generated-path="Header.Part.AddressGroupPart.html" hash="dc16e08c16a2215a6c1604faf93d17a8" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</extends>
      <name>AddressGroupPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</full_name>
      <docblock line="21">
        <description>Holds a group of addresses, and an optional group name.</description>
        <long-description>Because AddressGroupConsumer is only called once a colon (":") character is
found, an AddressGroupPart is initially constructed without a $name.  Once it is
returned to AddressConsumer, a new AddressGroupPart is created out of
AddressGroupConsumer's AddressGroupPart.</long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9\*]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>$addresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::addresses</full_name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;an array of AddressParts&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>$languages</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::languages</full_name>
        <default>array()</default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;maintains an array mapping rfc1766 language tags to parts of&#10;text in the value.&lt;/p&gt;&#10;&lt;p&gt;Each array element is an array containing two elements, one with key&#10;'lang', and another with key 'value'.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::__construct()</full_name>
        <docblock line="36">
          <description>Creates an AddressGroupPart out of the passed array of AddressParts and an
optional name (which may be mime-encoded).</description>
          <long-description></long-description>
          <tag name="param" line="36" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="36" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;" variable="$addresses">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
          <tag name="param" line="36" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$addresses</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="47" package="MailMimeParser">
        <name>getAddresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::getAddresses()</full_name>
        <docblock line="47">
          <description>Return the AddressGroupPart's array of addresses.</description>
          <long-description></long-description>
          <tag name="return" line="47" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="58" package="MailMimeParser">
        <name>getAddress</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::getAddress()</full_name>
        <docblock line="58">
          <description>Returns the AddressPart at the passed index or null.</description>
          <long-description></long-description>
          <tag name="param" line="58" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="58" description="" type="\ZBateson\MailMimeParser\Header\Part\Address">
            <type>\ZBateson\MailMimeParser\Header\Part\Address</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::getName()</full_name>
        <docblock line="71">
          <description>Returns the name of the group</description>
          <long-description></long-description>
          <tag name="return" line="71" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="73" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="73">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="73" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="94" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="94">
          <description>Decodes a matched mime entity part into a string and returns it, after
adding the string into the languages array.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="array&lt;mixed,string&gt;" variable="$matches">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="return" line="94" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$matches</name>
          <default></default>
          <type>array&lt;mixed,string&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="121" package="MailMimeParser">
        <name>decodeSplitPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeSplitPart()</full_name>
        <docblock line="121">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="121" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="163" package="MailMimeParser">
        <name>addToLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::addToLanguage()</full_name>
        <docblock line="163">
          <description>Adds the passed part into the languages array with the given language.</description>
          <long-description></long-description>
          <tag name="param" line="163" description="" type="string" variable="$part">
            <type>string</type>
          </tag>
          <tag name="param" line="163" description="" type="string|null" variable="$language">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="190" package="MailMimeParser">
        <name>getLanguageArray</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::getLanguageArray()</full_name>
        <docblock line="190">
          <description>Returns an array of parts mapped to languages in the header value, for
instance the string:</description>
          <long-description>'Hello and =?UTF-8*fr-be?Q?bonjour_?= =?UTF-8*it?Q?mi amici?=. Welcome!'

Would be mapped in the returned array as follows:

```php
[
    0 =&gt; [ 'lang' =&gt; null, 'value' =&gt; 'Hello and ' ],
    1 =&gt; [ 'lang' =&gt; 'fr-be', 'value' =&gt; 'bonjour ' ],
    3 =&gt; [ 'lang' =&gt; 'it', 'value' =&gt; 'mi amici' ],
    4 =&gt; [ 'lang' =&gt; null, 'value' =&gt; ' Weolcome!' ]
]
```</long-description>
          <tag name="return" line="190" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJyNVNlu2zAQfNdXbAMDsYLEfnd65QCah6YtmvYlcRBsqLXFgiIFksqBwv/eJXVEVuw6BgxZ1u7MzsxS7z+VeZlMDw4SOIBfuXSwkIqAryVaD2YBPie4PkVPzuj5JUp1KQv6gdaRhdKaPyT8hJtD/2clBWlHkHtfzqZTU/KdqaygibHLafPUTe9ddtTcTJgeTq/OuX2aaCzIlSi2Es4vCDO+8J0/TpLK9SqvvCUszkkYi95YN//tpZqf5aHRnxn9QNaT5a5G7IVRmQOEpTVVGYRilllyPN8hoM74C6b00mhUTU0YL0iF8D0lgYH/pO76EiqYxVUF+8L2Ga2eQaBSlPFvloQgjDIaxnuzvRQEz4XCx9oAtzCVzgLxGmDQGcCkll4yFiMyhbcVd2bwKH1uKs/IozgawPdAJH2DaclXVnOhNy1qOyEzgabHjWSCfQzwAdosAtAmjfvuVXO3BljxYBauEXOZQRNQTFgodK8bgZ48aU4jJP1Vsiuowv/J3wT4EwMLH4Z+QNu2h4qb22AZWovPIcLeEwdNzzReeVM9RddGXc7H8cmQ4izKdxujqC2JR6JkIYy2mbrenxaxW6OQEowfcylyKLjtnqBgxUekhckoSydtRyeXDyEWMFxiGInBP4OGdYdeFA/KeJOkXtbbs+5Wdc/nExaVFmF0uLvr9m68e5jDxpVR70RFDvgA+/tpZKiTjVxoSfvZrM+xAZJHLcYRJU2Pu+aR51fW0ceOiBmG+a42pvwzno2Y5DBl3uwu1Q7rdTT16Vq3+r8mLsmftHDjoQsN2lDPbgmuryEuKfr+gkqd0RPwadSVUtsWTGoPo1i5Rd4bhY1rkKE4uYDxO8njcLIDgTd1x22a9up7hoSpX+Je7fKrhXurb3ErmxMdX/LbYq6Pyi4bvjHcjmgfUFXUjrdK/gERH1cR</source>
  </file>
  <file path="Header/Part/HeaderPart.php" generated-path="Header.Part.HeaderPart.html" hash="56808bfa020b3646d8bdc99b03307a2e" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Header\Part" line="16" package="MailMimeParser">
      <extends/>
      <name>HeaderPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart</full_name>
      <docblock line="16">
        <description>Abstract base class representing a single part of a parsed header.</description>
        <long-description></long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <source>eJzNVmtv0zAU/Z5fcZEqtZv6EB8QY6PANkAggUC08AFNmlznpjFL7Mh2Nk2w/871I2mbrhsgkIgq5WHfc885vtfu0+dVXiWT/f0E9mGeCwOZKBDoXjFtQWVgc4SvJ8yiUfLsPRPFe1HiR6YNaqi0+obcjinYxb8oBEdpEHJrq8PJRFX0pmrNcaz0chJHzWRh0lF8GVN6OJm9pPBJIlmJpmJ8Z8KzN8hSutGbPUqS2qzNnFmNrHyJXGlmlTZnn60ozk5zF2hPlbxEbVFTVBR7vDBWM25hwQiGF8wY0FhpNCitkEtgYOhGZjROMPdkMIXcs2hVs9rmSsNXxnKRQuTjBbEmR4AP7B355HsCdHkq7iKUS6aBZrvMzvJLVtTY+O8YxIkTfyfjLRlPXHp+4pH/eitm1wHo8e4XlyJ+BN5+rZ3UTOkGzV9x2LEMZA0IuSbs8DDOeCW5Sml8F+0uidsVzNAaqCtIkUopRckFmnEz2Moke1j5C0I3udQLqkHIasmtUBLOz4k5aaq5HdwPtecxwiq6q2epd0bPtqyd7lJ6k3S1fkJba2naBe+bUATberWf+RvV0pG6RPvFBQy6KiJwFLNWWTe3rs464y0GMLjKBc/dVsIi1b1flnLPSlk18wF/TYAm7iIDv/kYWCCVPYIDCVJMruoipe8glpKG0jHA3McYULK4bvBC+tA24Latd4IWnBXGgbfGLHApKOmVsDlZU9K0Ebpuobjgw7DBm6sL2iSbYP/WVEX0NexQnvcQmAyZT1VZ0ibm+vGWbokeLZQq7rQ5SJ15S068I7vszkjhn/jMsrD7/BubacO4y+T/zuNj58YfW/xKmprOLi8C4967akdjWt1OlNvorYLP89ejgy3yc4ookY60FFJFiFLRCrm4DbBeplXZnhqE6cGAFXQKp9dDWJ0bFNcjxziuZfZyvJfl4pznyC/OW9LO3R5xjdJD1TRgbrDvU/V3nQNRpoPYMeKod4bcSiGTkemO7am2GUncKJ/uudaubOcYHDg6w+jaFPpvZx9GBwePnowe9oeNPdNgS7cCyL9BiHswnTbi99Ym+EqY+BqPf01CA6QYHb0SRQFxCazrKddx9JNIZWeYvl4d8ys4l+cx9SJn7m/W9jJ50OjPaoU2OPuMP37Ag63oaEcjpqtmrfB3HKz0JTyuG7sCPNqAu0m2nxp4im7a6ib5CZZvWjE=</source>
  </file>
  <file path="Header/Part/CommentPart.php" generated-path="Header.Part.CommentPart.html" hash="fde591987681fac23d97baa5641c18f5" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="16" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</extends>
      <name>CommentPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart</full_name>
      <docblock line="16">
        <description>Represents a mime header comment -- text in a structured mime header
value existing within parentheses.</description>
        <long-description>MimeLiteralPart automatically decodes the value if it's encoded.</long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9\*]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$comment</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart::comment</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the contents of the comment&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>$languages</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::languages</full_name>
        <default>array()</default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="43" description="&lt;p&gt;maintains an array mapping rfc1766 language tags to parts of&#10;text in the value.&lt;/p&gt;&#10;&lt;p&gt;Each array element is an array containing two elements, one with key&#10;'lang', and another with key 'value'.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart::__construct()</full_name>
        <docblock line="29">
          <description>Constructs a MimeLiteralPart, decoding the value if it's mime-encoded.</description>
          <long-description></long-description>
          <tag name="param" line="29" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="29" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>getComment</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart::getComment()</full_name>
        <docblock line="43">
          <description>Returns the comment's text.</description>
          <long-description></long-description>
          <tag name="return" line="43" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="73" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="73">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="73" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="94" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="94">
          <description>Decodes a matched mime entity part into a string and returns it, after
adding the string into the languages array.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="" type="array&lt;mixed,string&gt;" variable="$matches">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="return" line="94" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$matches</name>
          <default></default>
          <type>array&lt;mixed,string&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="121" package="MailMimeParser">
        <name>decodeSplitPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeSplitPart()</full_name>
        <docblock line="121">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="121" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="163" package="MailMimeParser">
        <name>addToLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::addToLanguage()</full_name>
        <docblock line="163">
          <description>Adds the passed part into the languages array with the given language.</description>
          <long-description></long-description>
          <tag name="param" line="163" description="" type="string" variable="$part">
            <type>string</type>
          </tag>
          <tag name="param" line="163" description="" type="string|null" variable="$language">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$language</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="190" package="MailMimeParser">
        <name>getLanguageArray</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::getLanguageArray()</full_name>
        <docblock line="190">
          <description>Returns an array of parts mapped to languages in the header value, for
instance the string:</description>
          <long-description>'Hello and =?UTF-8*fr-be?Q?bonjour_?= =?UTF-8*it?Q?mi amici?=. Welcome!'

Would be mapped in the returned array as follows:

```php
[
    0 =&gt; [ 'lang' =&gt; null, 'value' =&gt; 'Hello and ' ],
    1 =&gt; [ 'lang' =&gt; 'fr-be', 'value' =&gt; 'bonjour ' ],
    3 =&gt; [ 'lang' =&gt; 'it', 'value' =&gt; 'mi amici' ],
    4 =&gt; [ 'lang' =&gt; null, 'value' =&gt; ' Weolcome!' ]
]
```</long-description>
          <tag name="return" line="190" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJyFU8Fu2zAMvfsreAiQLmjie7JuXdLDBqzA0GyXIkChynSszZYMkc4KDP33UYocpPa6+qKIIh/53mPef2yrNstnswxm8L0yBKWpEeRslWdwJXCFcL9WjOTs7laZ+tY0+E15Qg+tdz9R80KKQ/11bTRaQqiY22Weu1ZurvMaF87v8/RK+SMV83RZSHtYb2+kPM+sapBapV9tuPuMqpBDbrzKOjpL3LJH1dygdl6x87T7wabebapQxxtnD+gZ/Srrud5h65HQMoGCRjpAFbFBu6aRMMznwPjEYKwkEPtOc+exOM8NOAdVdwj4ZIiN3cNvw5VUiHiCUUkDOomjOq6ch3ulKlNAmjvy1rUigs2xceAmeIy2IAjUvxoZXNUhnv3JQL5IIXyCelA+TBd6B6e0sxxJJecSm5Sex1NcY3FNuEzS8yrGh9ii2pF3kGgwySUUInXRtz2qYEowPKUo0RytvGOx6NFOE4s2qoGhMzLLIDIoSCQn7H6hfcmne5RtgrKzmo2z8PCg+8kv3m5zmSDfRayjwBE1WrhcnqO9Xrw61U1kAWj+oV+jqz4QJRqlHYW7gul0jKDsl711HrfhL0FrLOW3pMooY5xB8qcycD3Pff6nxXcoS23pfFXEv7D3Y998zE0+/NeAfVAogl0MVU0gL0UaTZg9Z38BvKJxoQ==</source>
  </file>
  <file path="Header/Part/DatePart.php" generated-path="Header.Part.DatePart.html" hash="ef9ab4f61e139294e2b9ed9a1ca6a77e" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <namespace-alias name="DateTime">\DateTime</namespace-alias>
    <namespace-alias name="Exception">\Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="18" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\LiteralPart</extends>
      <name>DatePart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart</full_name>
      <docblock line="18">
        <description>Parses a header into a DateTime object.</description>
        <long-description></long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="23" package="MailMimeParser">
        <name>$date</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart::date</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;the parsed date, or null if the date could not be parsed&lt;/p&gt;" type="\DateTime" variable="">
            <type>\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="33" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart::__construct()</full_name>
        <docblock line="33">
          <description>Tries parsing the header's value as an RFC 2822 date, and failing that
into an RFC 822 date, and failing that, tries to parse it by calling
new DateTime($value).</description>
          <long-description></long-description>
          <tag name="param" line="33" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="33" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="55" package="MailMimeParser">
        <name>getDateTime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart::getDateTime()</full_name>
        <docblock line="55">
          <description>Returns a DateTime object or false if it can't be parsed.</description>
          <long-description></long-description>
          <tag name="return" line="55" description="" type="\DateTime">
            <type>\DateTime</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJydVE1v2zAMvftX8BCgTtHEQE9Dsq5D0xU7rMDQppciQKHITKxNlgyJ7loM/e+j5I8mbroB88WWTL73+Ejp43lVVEl2fJzAMSwL5WGjNAK/K+EI7AaoQLi/EITemtW1UPpalfhdOI8OKmd/oKQpJ4f8z1pJNB6hIKpmWWYrXtnaSZxat83avz5b+3zSLqZMDxe3l5yeJUaU6Csh3yVcfUWR84tXNE+S2u9E3pJDUV6itE6QdX51R0qvFkVIpIU1j+gI3TwmXXLOklGb1ZcniRUpaxiydSLSeRBQREJQhiyvujyw6726RU2FdXAvRKFyaBXFkqQW3se8oBnwidDkHr4p1iJ02Et+J8BPJA4Pwz0K90oV/K+CnBxy3jsBJjK11qCa3oRNkLbWORhLsO6iW7QsvrlRxIIZYxTi53FzyLt0CmPfvTLbiN1Uf+ThUegaQbAjBm6uFnD64fS0lSNMDhvuUpMjqENrLGvC348+AYqsHBtlg+ISnkEKHUI6LIO/ekPSURQznnY/e9sYQJQw7DiM5GBnkOBZAasZkf2JZt+1es1jCpvayDAe8PAgreHwWlL6b5qTFnIMTYd7y6PtWagXDc1mO6jcx5jsIYAJGXDRSJsHgZMJlCJYE2aWG7rWWPpdQG9LJHbIT/vd2O1lUAFnwekybTXN+5ADMtJDtfRInLuPz9Bdc2YzyaeQ8MrZ8sq6UlD6+osnIczNAKuD4nFOW7izM54R7XHXuf9he5/spf8i9zxkIb4GJ59arkbTGM5ngyk8CMvdIVlA2l8pMNqrouF9OXj8bpBqZ/zbayac+OhH8IjPhxTmaOegvz0ILiL1MH+d6S1SX9M4RryqbXF2DJm3+l+SP/425bs=</source>
  </file>
  <file path="Header/Part/SplitParameterToken.php" generated-path="Header.Part.SplitParameterToken.html" hash="7304a271850be9d22ef922948db12c13" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\StreamDecorators\Util\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="20" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\HeaderPart</extends>
      <name>SplitParameterToken</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken</full_name>
      <docblock line="20">
        <description>Holds a running value for an RFC-2231 split header parameter.</description>
        <long-description>ParameterConsumer creates SplitParameterTokens when a split header parameter
is first found, and adds subsequent split parts to an already created one if
the parameter name matches.</long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="25" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::name</full_name>
        <default></default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;name of the parameter.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="32" package="MailMimeParser">
        <name>$encodedParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::encodedParts</full_name>
        <default>array()</default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;keeps encoded parts values that need to be decoded.  Keys&#10;are set to the index part of the split parameter and used for&#10;sorting before decoding/concatenating.&lt;/p&gt;" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="39" package="MailMimeParser">
        <name>$literalParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::literalParts</full_name>
        <default>array()</default>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="39" description="&lt;p&gt;contains literal parts that don't require any decoding (and&#10;are therefore ISO-8859-1 (technically should be 7bit US-ASCII but&#10;allowing 8bit shouldn't be an issue as elsewhere in MMP).&lt;/p&gt;" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="45" package="MailMimeParser">
        <name>$language</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::language</full_name>
        <default></default>
        <docblock line="45">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="45" description="&lt;p&gt;RFC-1766 (or subset) language code with optional subtags,&#10;regions, etc...&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="50" package="MailMimeParser">
        <name>$charset</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::charset</full_name>
        <default>'ISO-8859-1'</default>
        <docblock line="50">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="50" description="&lt;p&gt;charset of content in $encodedParts.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>$charsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::charsetConverter</full_name>
        <default></default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;the charset converter used for&#10;     converting strings in HeaderPart::convertEncoding&lt;/p&gt;" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="58" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::__construct()</full_name>
        <docblock line="58">
          <description>Initializes a SplitParameterToken.</description>
          <long-description></long-description>
          <tag name="param" line="58" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;the parameter's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="72" package="MailMimeParser">
        <name>extractMetaInformationAndValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::extractMetaInformationAndValue()</full_name>
        <docblock line="72">
          <description>Extracts charset and language from an encoded value, setting them on the
current object if $index is 0 and adds the value part to the encodedParts
array.</description>
          <long-description></long-description>
          <tag name="param" line="72" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="72" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="98" package="MailMimeParser">
        <name>addPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::addPart()</full_name>
        <docblock line="98">
          <description>Adds the passed part to the running array of values.</description>
          <long-description>If $isEncoded is true, language and charset info is extracted from the
value, and the value is decoded before returning in getValue.

The value of the parameter is sorted based on the passed $index
arguments when adding before concatenating when re-constructing the
value.</long-description>
          <tag name="param" line="98" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="98" description="" type="boolean" variable="$isEncoded">
            <type>boolean</type>
          </tag>
          <tag name="param" line="98" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isEncoded</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="121" package="MailMimeParser">
        <name>getNextEncodedValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::getNextEncodedValue()</full_name>
        <docblock line="121">
          <description>Traverses $this-&gt;encodedParts until a non-sequential key is found, or the
end of the array is found.</description>
          <long-description>This allows encoded parts of a split parameter to be split anywhere and
reconstructed.

The returned string is converted to UTF-8 before being returned.</long-description>
          <tag name="return" line="121" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="148" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::getValue()</full_name>
        <docblock line="148">
          <description>Reconstructs the value of the split parameter into a single UTF-8 string
and returns it.</description>
          <long-description></long-description>
          <tag name="return" line="148" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method_getValue"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="173" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::getName()</full_name>
        <docblock line="173">
          <description>Returns the name of the parameter.</description>
          <long-description></long-description>
          <tag name="return" line="173" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="183" package="MailMimeParser">
        <name>getLanguage</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\SplitParameterToken::getLanguage()</full_name>
        <docblock line="183">
          <description>Returns the language of the parameter if set, or null if not.</description>
          <long-description></long-description>
          <tag name="return" line="183" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__construct()</full_name>
        <docblock line="34">
          <description>Sets up dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="" type="\ZBateson\StreamDecorators\Util\CharsetConverter" variable="$charsetConverter">
            <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$charsetConverter</name>
          <default></default>
          <type>\ZBateson\StreamDecorators\Util\CharsetConverter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="44">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="54" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="54">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="54" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="66" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="66">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="78" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="78">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="95" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="95">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description>The method does nothing if the passed $from charset is UTF-8 already, or
if $force is set to false and mb_check_encoding for $str returns true
for 'UTF-8'.</long-description>
          <tag name="param" line="95" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="string" variable="$from">
            <type>string</type>
          </tag>
          <tag name="param" line="95" description="" type="boolean" variable="$force">
            <type>boolean</type>
          </tag>
          <tag name="return" line="95" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default>'ISO-8859-1'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$force</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJylWG1T20YQ/u5fsZ1hxjL1SyDThJK6aUKSCZOSMoH0Q4AwZ+lsqcgn9e4EcTvkt3f3XmRJlm2SegaMpNv359ld8cvzPM47o93dDuzCeZwomCYpB/zOmdSQTUHHHD69ZJqrTFyesCQ9Seb8lEnFJeQy+4uHeojCJP9bmoRcKA6x1vnhaJTleJUVMuTDTM5G7qkaTVQ0cBdDNA8vz16h+Kgj2JyrnIVrDV6+5SzCL7zSzzqdQlVOnmnJ2fwVDzPJdCbV5UedpJdHMQnqo0zccqm5RCkX7NssjRQwkIUQiZjBLUsLDtNMAhPw4c3RYH//8R6oPE00xMYspQQ9RC0UMNDPqb+DBlQxxzMheoEOwRkJlo/PsxuMFu5iLtBku1LSZ/IvlUY/ChH10ZUIWIR+qmKi+N8FF9pJU3kU6Iy8ZSkajRbOdgSZwApOSR8VrzQAlF+YMx3GXJU1Y4WOMehPjMVJBC6bphxhylRrIMC/aC7QK1sOqkbn3w7gx+SWPqj4lklQWlJujWGHpWoSzcmR+UYoaYQSer9Dp7FO6/VdXMEN57kCLsIsQhGbDFNBzEnMNAiOtzE7Ew4RN4eGAO/4Qnl15sMkB0QHHSTXEhHxLzXgl7l2GaR6IOoiwklNk8qkpkgnHJ84m3g9CjMRYkoFo6drI3ZxnJowxnBxtS18VKtZgohC97hkqYcDhR5loqtBIloS9ISJRekNBOj/SgIwTmm9Pj77Y3Bw8NPPgz0I0LVYJCFL0wWoOCvSiHL5dILp+Hg2eHF2dHwMk0LXtaVpdkd2DuiYlSJfJuQGYlshwRhWLVX8joxiwuHk5LS3Ni8uugfmxbB27+mTJxAgoA1jdA9SJmYFm3GgFMNdomPIcp1kArOGZzSbqX4tCsln+FT1getwOFzvm9O72aXQ9h/CE9WM+ItB1wq+1oKXHUN3WZnuqr1jkeiEpck/nPpZC1+9BSg9NIiGZnMsTZZ3GgIuKMPQOpm7ypC8HkoxwS4P00KElG+4vsYUoIoi1MF2031rpmdU2e5ilCJkhT48rCpbke09K8/vaBxqg1+Nx2NA/+eB1WuP3K9k8/UXLVmIePPpJ86XIJrKbE5g9p3H9Jw+NRFDf8zJHNsvfXt9YSHJY8gmNCqxL8OO7TPY6x8tGzxl044g039cR6rixCtkUrLFupL6ChlVjWcJemFtr0FcWSluc3DCNTsW2BpwZuDtFyL6k9QGOy5qq6xZIYwwyJFE12bSBN2vn4OLz5fdq93eZbfy13C3t/O124dSmRtMvV5Fl9fnUjYej+FR83mlykvGBD/wea4Xgdd6sXeFip9D5RoOG2LP1qktq9+id7+hd7+id9kiqkrva1c2fNRcanh8tTx/38RxFRAXNitXJGy0eEjT7yasX3iQ5TjU3cj0KPMrkEEWtSo7SVcwdkzYVa8d9BG/SD+sXJkeArMvQYK4oSMOSoQuok6FGK7uJLQEP0q4ee1HqeS6kMY9bJwzrg0EV1w7LzU01wxSSdOZNDJltqNqHmqEwAzMcIsT2q9qUVQZ6rVZbg9IPijbkON/Lbzvoekky1KOLWaZ6gfyuNFu0XmCSYWtXt8m5jp42+dNqnkawqM2iFqieiMrsg7A39RaKmbM2tCus7omVEnh2G2ngnELk+5M9JoRtNPmXDIUxpeWNgJCIfAdA2euyMTArec4iHE5XZhN3u7wuItUYIF7s4eopZs/2AJpfGRWquaii/JsZTW1y669i0ufXbAq+57kJVJ5mzHPNLTi0InmXe7sLv3x/M3gwJNhwumIF1nFuX3iVDXmTXKLNFoCFUn9HmHhcGNx0ITmDo5RLKkbpkFLMaoznwowpjJsO+g7H65Y3eXtu5jegQNj8wccOVOG0FvBs5cdjo139Sbv/BUY1xYfzGnx7oEe08fwzEiQcybYH2GvbSxO8IXwZuP0sZky2too7aq4hkk1VZLdFTK1zTvwyen12/jqZkT9Gc2S8kZv0yj7sERydW9a88qG3TIjuqA3WFSL4RoqzQSygSpI9DdBudFy/XhahW/uXmFaOtYy75W0Y3q2IOGGhtqWMw7Im1izAeDG54t1mKx02FYCt8Gp6Xze8Ndl2jTGa8mjIuRBi0914JTZR8Ki5IKGh+bzNj54OJtzMLQHG/yoK+92H4pJix9C4Mb/dnwnrN6jlhVU1dlp/23yMBfLlW11W5rSy4yZWqJIU7oW2f8lxe/O3JYI6vvyfee+8x9z1Q8j</source>
  </file>
  <file path="Header/AddressHeader.php" generated-path="Header.AddressHeader.html" hash="4113d2c361e0f921effb2ea374b9936c" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="AbstractConsumer">\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</namespace-alias>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="AddressPart">\ZBateson\MailMimeParser\Header\Part\AddressPart</namespace-alias>
    <namespace-alias name="AddressGroupPart">\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="24" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>AddressHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\AddressHeader</full_name>
      <docblock line="24">
        <description>Reads an address list header using the AddressBaseConsumer.</description>
        <long-description>An address list may consist of one or more addresses and address groups.
Each address separated by a comma, and each group separated by a semi-colon.

For full specifications, see https://www.ietf.org/rfc/rfc2822.txt</long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$addresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::addresses</full_name>
        <default>array()</default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;array of&#10;addresses&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$groups</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::groups</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;array of&#10;address groups&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="44" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getConsumer()</full_name>
        <docblock line="44">
          <description>Returns an AddressBaseConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="54" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::setParseHeaderValue()</full_name>
        <docblock line="54">
          <description>Overridden to extract all addresses into addresses array.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="54" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_setParseHeaderValue"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="73" package="MailMimeParser">
        <name>getAddresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getAddresses()</full_name>
        <docblock line="73">
          <description>Returns all address parts in the header including all addresses that are
in groups.</description>
          <long-description></long-description>
          <tag name="return" line="73" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="83" package="MailMimeParser">
        <name>getGroups</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getGroups()</full_name>
        <docblock line="83">
          <description>Returns all group parts in the header.</description>
          <long-description></long-description>
          <tag name="return" line="83" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="96" package="MailMimeParser">
        <name>hasAddress</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::hasAddress()</full_name>
        <docblock line="96">
          <description>Returns true if an address exists with the passed email address.</description>
          <long-description>Comparison is done case insensitively.</long-description>
          <tag name="param" line="96" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="112" package="MailMimeParser">
        <name>getPersonName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getPersonName()</full_name>
        <docblock line="112">
          <description>Returns the name associated with the first email address (or group) to
complement getValue()</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJytVt9v2zYQftdfcQP8IAWJXeRpiOd2SddtL12LduhD42CgqZPFQSIFksoPDPnfdyQlWVIs28EmwDBF3R3vvvvujj+9q/IqWpydRXAGf+bCQCYKBPqvmLagMrA5wvcbZtEouf7IRPFRlPiZaYMaKq3+Rm7npOz0fy4ER2kQcmurq8VCVfSmas1xrvR20Xw1i41JL5qXOR0PN19/IfVFJFmJpmJ88sD178hS1Msoqs0xofV7JU1d0uJ6Y6xm3LYby1dpt4uvqO/J55OU6c2ur9NUozFu/Wql37Sqq6DZJucLSRlgElgQgUIYC7nXhdoIufWpagzcMIOt5y494H7XI+WSPQEnIbemTCuJoDSUSmMrh+7EtNPaOreMt/eB8bzbN0hsoeBS2DwBI5tlyc69JjoxrzYWMliKC64KJTv/fqXTs7oowFTIRSY4s4LcOyfZwClDpHp4eJgLtJmnlM64+13+eHk5t4+25SGrbU62vjOWixQa2D3FeMHI3wakADzgo0VJ2LY8CdvRPxHQ49F3D5m9ZxrWr0z97R0wrQlolbV2dtg2Owv/T8VkqZgIn9lOYgW3d0v/+T9703Fq2qUmwVNuha8HfPqCttbSs3Q/D4NYF4IjRAmjCoMZH2504tqbPxr0ZOFPxJXVkjuiwRY70fiYU4k3Ejjinsa3sdjFWzK6B4s4CQg+78Xx0z1qLdIUJVjl+OmiAEaVsWOGkPSpV6Yuo1MIj4HYuXkMEoPWgxug/caKGuNpa2NQ6HSU9upqn5Wd0rKTz6j1uIYRzyyNoou3bgZRaAZmbpX0LLtHZCTox5SQxjLJkZpYr/TG8u5pDHe4US2sgvXlQPYZsDB46ISunE45hg7xCfqL4t1iPP58HlzokwVNnCTLKcOhEiedj4ar/STrinVHKwiAC+lHSTNbhORFnbr5MiSgzRlxUnflSVrdfBix8MTCfdk7h/SsN3RrGJRrD6yJehwhfajq+oCEkbUHjv8luF4rPhahFz0WXsD9lNisrtEVTu8egY80/w08CJv7OCuakNQCsKQwWqEXUb9XJYEjKFx3V0zd1YFTe3N1Qtc6YcU9FpPtiNqHo9PMHzHGcaNUgUwexCVnpkEyDkbG8IwbSa9PmjBe9zUT8ssFwcsq9jK+Hj84+3Fy3ribwGq1gjf7ir4JwEF8uB57whmjNnNS4igz7n5MARjFhb9HdSnLhKYr3CBjENMFyPMioRnSWqObWVVgSU3ZcSs04mSK0SFNxwj6GTWx4A9y7QVJHaY/YFnZp0FDT8bgDcnsZW7f3Hn0g93lNICS7ostfs/Rvx6Q94c=</source>
  </file>
  <file path="Header/DateHeader.php" generated-path="Header.DateHeader.html" hash="cebd03475d37e9ebd060b7d383c3dc61" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="DatePart">\ZBateson\MailMimeParser\Header\Part\DatePart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="17" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>DateHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\DateHeader</full_name>
      <docblock line="17">
        <description>Reads a DatePart value header in either RFC 2822 or RFC 822 format.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="25" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\DateHeader::getConsumer()</full_name>
        <docblock line="25">
          <description>Returns a DateConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="25" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="25" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="35" package="MailMimeParser">
        <name>getDateTime</name>
        <full_name>\ZBateson\MailMimeParser\Header\DateHeader::getDateTime()</full_name>
        <docblock line="35">
          <description>Convenience method returning the part's DateTime object.</description>
          <long-description></long-description>
          <tag name="return" line="35" description="" type="\DateTime">
            <type>\DateTime</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyNU99r2zAQfvdfcYPSOYHEI0+jGV3XlrGXwmj71HkPF/sca9iSkU5hY+R/31m2gmMYrR6kk+7Xd5/uPn3u6i7JlssElvBcKweVagjk7NAymAq4Jni5RSZndP6AqnlQLX1H68hCZ80vKngtzr3/TaMK0o6gZu6ussx0cjPeFrQ2dp+NWpftXLkaL2tJD7dP9+KeJRpbch0W/02YfyMsyW6TxLvXjPI7o51vJ8IT2YNk3b7FWW6c34tJL0i+kaFH0TpAiBo4YOOl3uAESgMp4cvC49c72HzcbMAMci9WxrYYuIJAFnquRf2CWKsSRjiBh6JB50KOAQ3QbyYtib/sHFsseHhO/iYgK0DrVw+PvdURYKx7HdXxvJG/xRZmvMBFcf5wMrchLORvJTzCjA9joCyc0jMsPUMlVF4XrIyGPZ1M09dALUKQofJ+jdjmZqtrCTolIV1sg88x7HPixOpAWpGWjC3Jv5RjYKX3YQL6aXg//MmzFA5mNzb+jNlIVTQ8L93vpO3P6o526bwuVUH6jtqO/6QXLHO5uu4huAVcXsL04ceHn9J3jlGgy7TGxlxMQk1pOvc8sTRA2J5cjnN+tW+aSOAx+Qd1qlfP</source>
  </file>
  <file path="Header/HeaderFactory.php" generated-path="Header.HeaderFactory.html" hash="ecd59ae2a69b75068d5cf950841a01b5" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="26" package="MailMimeParser">
      <extends/>
      <name>HeaderFactory</name>
      <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory</full_name>
      <docblock line="26">
        <description>Constructs various AbstractHeader types depending on the type of header
passed.</description>
        <long-description>If the passed header resolves to a specific defined header type, it is parsed
as such.  Otherwise, a GenericHeader is instantiated and returned.  Headers
are mapped as follows:

AddressHeader: From, To, Cc, Bcc, Sender, Reply-To, Resent-From, Resent-To,
Resent-Cc, Resent-Bcc, Resent-Reply-To
DateHeader: Date, Resent-Date, Delivery-Date, Expires, Expiry-Date, Reply-By
ParameterHeader: Content-Type, Content-Disposition</long-description>
        <tag name="author" line="26" description="Zaahid Bateson"/>
        <tag name="package" line="26" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="32" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::consumerService</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the passed ConsumerService providing&#10;AbstractConsumer singletons.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="37" package="MailMimeParser">
        <name>$types</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::types</full_name>
        <default>array('ZBateson\MailMimeParser\Header\AddressHeader' =&gt; array('from', 'to', 'cc', 'bcc', 'sender', 'reply-to', 'resent-from', 'resent-to', 'resent-cc', 'resent-bcc', 'resent-reply-to'), 'ZBateson\MailMimeParser\Header\DateHeader' =&gt; array('date', 'resent-date', 'delivery-date', 'expires', 'expiry-date', 'reply-by'), 'ZBateson\MailMimeParser\Header\ParameterHeader' =&gt; array('content-type', 'content-disposition'), 'ZBateson\MailMimeParser\Header\SubjectHeader' =&gt; array('subject'))</default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="37" description="&lt;p&gt;maps AbstractHeader types to headers.&lt;/p&gt;" type="array&lt;mixed,string[]&gt;" variable="">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="72" package="MailMimeParser">
        <name>$genericType</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::genericType</full_name>
        <default>'ZBateson\MailMimeParser\Header\GenericHeader'</default>
        <docblock line="72">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="72" description="&lt;p&gt;Defines the generic AbstractHeader type to use for headers&#10;that aren't mapped in $types&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="79" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::__construct()</full_name>
        <docblock line="79">
          <description>Instantiates member variables with the passed objects.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="90" package="MailMimeParser">
        <name>getClassFor</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::getClassFor()</full_name>
        <docblock line="90">
          <description>Returns the name of an AbstractHeader class for the passed header name.</description>
          <long-description></long-description>
          <tag name="param" line="90" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="90" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="111" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::newInstance()</full_name>
        <docblock line="111">
          <description>Creates an AbstractHeader instance for the passed header name and value,
and returns it.</description>
          <long-description></long-description>
          <tag name="param" line="111" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="122" package="MailMimeParser">
        <name>newHeaderContainer</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::newHeaderContainer()</full_name>
        <docblock line="122">
          <description>Creates and returns a HeaderContainer.</description>
          <long-description></long-description>
          <tag name="return" line="122" description="" type="\ZBateson\MailMimeParser\Header\HeaderContainer;">
            <type>\ZBateson\MailMimeParser\Header\HeaderContainer;</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJydVt9v4zYMfvdfwYcAyRVu8t6st13bdevDYUN7T9cWB0VWag2OZUhyuuDQ//1I/YgT2W62M9BGEslPIvmR0i+/NmWTLc7OMjiDL6U0sJaVAPxtmLag1mBLAV+vmBVG1U+fmaw+y434m2kjNDRa/SO4naMx2f9WSS5qI6C0trlYLFSDM9VqLuZKvyyC1CxWpjgPkzluD1cPN2i+yGq2EaZhfHTDpz8FK4ReZllrTik9XavatJuDwYPQW9wVrYO/JLC65dbAlmmpWgOfVrjCuPUYYHeNMFAIdKSQ9Quo2sWDlik2pdMiqIYZIwoKBNDfnY+bXw1qoPGw1RbxrAIGphFcriVH9LWsOy3CzkHakAO0J0BmwLS8nAP8hcD6VRpUYvCHqIWWPJwWLSR6xGorMTIFsLrATW2rER4tvZZxcFrAhjUNKWHKVVWpV3MRT/+pKPCsxutfwK1Wmxy+qByueQ5XHP89YDyEzuFeNNXunET3wojannvdMMF1ggszMg5DhxHGEYI0b/DYcVca75X85EZUciv0Lkx//7eReM4wiKse72pHeEgIpJQVOoJixq07mQtynN1I0ygjrVR1ZDJrbak0fGWslAUEojmS8gqTGmJ5i0xRepd9zwA/xyr60B75BAnvDhmRirCQtpIYFgEiD6MiGBRWwuJ0HnQW7hctLZYgYk54ynOSD54MsRHu8fnxmVgwwnpkqaekmcPYll7zEh69An7TE1V5xK0pXH48sHX2a2TQND9esypd4TxdWfWXjGNpuqodQfqQ2lNtaP8gGrXpbx0EA4cKkoFTPOf/OYpdoQyFsEDpyLZDoiKW1ZBQ+CIbXB628J6tdj/nWVKyQ+7xULZEvh4vgqzoSvrnzvHQruhqGz+F8QqH6G70fLLusI9RxzeuIbz4Dj5UglSBdM+tsRGVsXd7NFsyS028ntrYx2UdynGsVsNO1PqwYk/5f3SzTId9uusuGwMbsVnhwekiZasKF16lLQ97nnLx2rcv2EemoZT3WmLazo7dalf4gIB1W3NKMXz7xuNdPjsF9MEhfN+nbWLx2XP+MdHCEA031LfBUNy7a9anlJ4x9DpgdZpVf3dQPvuvA7Iai03gzYR09iJ/swdZknS5xZx04XkR9pq2vlV65kD6MRDGossIZhW+BUTUW+5V8NSC8RJmIV6+9ePrYeK9wgqZbJjl+DoxHw6gj22jhjMMk1SbPrmmjdyhLi/f1aQvhMKfZNlTecuGZ90oAnjXDirlvZxfo1PE/H6e/SuMi3dS7R5nW1a1Io943XMN33H2f3HhWORgU548nbqYj1x4t9pq8XoXPPQ0ycOePVoFanSBTXm4TFOA2MFsNlyYORxvGTM0np0uqiy82+jhx7AF6xjkNFiJ2vJUOBL9WRqIA+dSVefl3ou37AfZrgTv</source>
  </file>
  <file path="Header/HeaderContainer.php" generated-path="Header.HeaderContainer.html" hash="73002c3af17f61a4bf66a9ca82b85d43" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ArrayIterator">\ArrayIterator</namespace-alias>
    <namespace-alias name="IteratorAggregate">\IteratorAggregate</namespace-alias>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="18" package="MailMimeParser">
      <extends/>
      <implements>\IteratorAggregate</implements>
      <name>HeaderContainer</name>
      <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer</full_name>
      <docblock line="18">
        <description>Maintains a collection of headers for a part.</description>
        <long-description></long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="23" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::headerFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;the HeaderFactory object used for created headers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="29" package="MailMimeParser">
        <name>$headers</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::headers</full_name>
        <default>array()</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;Each element in the array is an array with its first&#10;element set to the header's name, and the second its value.&lt;/p&gt;" type="array&lt;mixed,string[]&gt;" variable="">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="37" package="MailMimeParser">
        <name>$headerObjects</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::headerObjects</full_name>
        <default>array()</default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="37" description="&lt;p&gt;Each element is an&#10;AbstractHeader representing the header at the same index in the&#10;$headers array.  If an AbstractHeader has not been constructed for&#10;the header at that index, the element would be set to null.&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="47" package="MailMimeParser">
        <name>$headerMap</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::headerMap</full_name>
        <default>array()</default>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="47" description="&lt;p&gt;Maps header names by their &quot;normalized&quot; (lower-cased,&#10;non-alphanumeric characters stripped) name to an array of indexes in&#10;the $headers array.  For example:&#10;$headerMap['contenttype] = [ 1, 4 ]&#10;would indicate that the headers in $headers[1] and $headers[4] are&#10;both headers with the name 'Content-Type' or 'contENTtype'.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="52" package="MailMimeParser">
        <name>$nextIndex</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::nextIndex</full_name>
        <default>0</default>
        <docblock line="52">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="52" description="&lt;p&gt;the next index to use for $headers and $headerObjects.&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="57" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::__construct()</full_name>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="57" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="69" package="MailMimeParser">
        <name>getNormalizedHeaderName</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::getNormalizedHeaderName()</full_name>
        <docblock line="69">
          <description>Returns the string in lower-case, and with non-alphanumeric characters
stripped out.</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="return" line="69" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="81" package="MailMimeParser">
        <name>exists</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::exists()</full_name>
        <docblock line="81">
          <description>Returns true if the passed header exists in this collection.</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="81" description="" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="return" line="81" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="98" package="MailMimeParser">
        <name>get</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::get()</full_name>
        <docblock line="98">
          <description>Returns the AbstractHeader object for the header with the given $name and
at the optional offset (defaulting to the first header in the collection
where more than one header with the same name exists).</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="98" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="98" description="" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="return" line="98" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="113" package="MailMimeParser">
        <name>getAll</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::getAll()</full_name>
        <docblock line="113">
          <description>Returns all headers with the passed name.</description>
          <long-description></long-description>
          <tag name="param" line="113" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="113" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="131" package="MailMimeParser">
        <name>getByIndex</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::getByIndex()</full_name>
        <docblock line="131">
          <description>Returns the header in the headers array at the passed integer index.</description>
          <long-description></long-description>
          <tag name="param" line="131" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="131" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="154" package="MailMimeParser">
        <name>remove</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::remove()</full_name>
        <docblock line="154">
          <description>Removes the header from the collection with the passed name.  Defaults to
removing the first instance of the header for a collection that contains
more than one with the same passed name.</description>
          <long-description></long-description>
          <tag name="param" line="154" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="173" package="MailMimeParser">
        <name>removeAll</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::removeAll()</full_name>
        <docblock line="173">
          <description>Removes all headers that match the passed name.</description>
          <long-description></long-description>
          <tag name="param" line="173" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="173" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="193" package="MailMimeParser">
        <name>add</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::add()</full_name>
        <docblock line="193">
          <description>Adds the header to the collection.</description>
          <long-description></long-description>
          <tag name="param" line="193" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="193" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="216" package="MailMimeParser">
        <name>set</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::set()</full_name>
        <docblock line="216">
          <description>If a header exists with the passed name, and at the passed offset if more
than one exists, its value is updated.</description>
          <long-description>If a header with the passed name doesn't exist at the passed offset, it
is created at the next available offset (offset is ignored when adding).</long-description>
          <tag name="param" line="216" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="216" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="216" description="" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="241" package="MailMimeParser">
        <name>getHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::getHeaders()</full_name>
        <docblock line="241">
          <description>Returns an array of headers in this collection.  Each returned element in
the array is an array with the first element set to the name, and the
second its value:</description>
          <long-description>[
    [ 'Header-Name', 'Header Value' ],
    [ 'Second-Header-Name', 'Second-Header-Value' ],
    // etc...
]</long-description>
          <tag name="return" line="241" description="" type="array&lt;mixed,string[]&gt;">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="255" package="MailMimeParser">
        <name>getIterator</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderContainer::getIterator()</full_name>
        <docblock line="255">
          <description>Returns an iterator to the headers in this collection.  Each returned
element is an array with its first element set to the header's name, and
the second to its value:</description>
          <long-description>[ 'Header-Name', 'Header Value' ]</long-description>
          <tag name="return" line="255" description="" type="\ArrayIterator">
            <type>\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="57" code="PPC:ERR-50008">No summary for method __construct()</error>
    </parse_markers>
    <source>eJzNWVtv2zYUfvev4AoDdlo7boC+rF26pTcsD82GtdhDXS2gJdrSIIsCSSVNh/z3ncOLZFIXu5kLzIBhSyLP7fvOOST1089lWo4Wjx+PyGPyMc0kWWc5I/BbUqEIXxOVMvLpFVVM8uLze5rl77Mt+50KyQQpBf+bxeoUJuP8X/IsZoVkJFWqfL5Y8BKueCVidsrFZmGfysVKJnN7cQrqyasPb2D6YlTQLZMljXsVfv6V0YSJF6NRBVouhKB3l4oJqjjcw1vu6mKzEWwDMsztYXH25x2NYeYdCLfhgMGFgq8klMQ8z8HTjBcYk1RPgFhxAc8wUnUIaKVSuPuJ0jRLiNWrvYtzKiUxul5zLRlCmG3LnG1ZoWTb+NE/IwIfbQ5+QPwNFcQzV+Pj3+ErBIWA44m2MBYMhCXOaitroX8BQQWD4ek4DaLQpVoqkRWbZbSMyFsap4QZ20lWaDsoIoLkoYX9f5uplGQKaSWkcrLcNMkUUVxPNdonkiAJZiAg0bclizn8RQk3NK/YaWB9dgOuOdslOSfLqMf0z3tIcLEC58B5c9lyEH1y8vTHH08EKwWTMBTis+MQocr4AV5BlBL2xcbKk1Xbr4N2SsjlGkMYqEgpRIcrsmKsAEIW8LDS0AHInrhQPVVG9Uw/cS7d8ipPQJhDoajyfDC8v2leDQbZgP6eltIZoHOarDRPM0EeFVxsaZ59ZckjMs35LRPzmAJTZ54HBS/mNC9TWlRbJrKYxCnFSGCMkINlyZITLRstr9kGqakdBY1Z0QpJK8rvIDnYF4oZ+LwLD/BjOYFAKwiXuitZhK6Tsxl5RiJvvAklqM5ijJeOeAMCGlMrX55Fmtz19TO4Fj4dVhySxs3VGYTCtLeT18ac+UewZ0LAAW3g26uPaOBkED9wZwg7KHZGD/ti+YKxxfKJRaQJXmO8JUSPUpRzqcWck6cdOqFs0m1Quvwi5MutVtAzyLoqTBm+vq5TYDok5ETPNpVUY6ugy81femPAwrD84dD7ltF/MFUJaAg6pXUtRGwbGpvCpSEboLCT5phMeKVcEIPwWCXWuvqh0HbYp53hr+O0YeqqzjkTqCtg0tSKDMNjJUMx21xDTcuhG08ni+VfdP716fzHaDGZkQl8QbPi2u9a0MneoIkKaqBZUZTQC+uWBEmYSSVNZYRK2zTbPVHBlAgeIYvHfL2GohZGa8V5zuoq3s0qY8l0bLqQFYQEbtEI66DlUm+IUYoNy05sM3BdTT0eYqUZy2hpFUb7YwkxDNqDbfuYrDsNoC4fm+wG2oY2CUnqBNpKxUt0n+bEejxN2JpWuelmpkPrDu7E2obfIOXk3aZMMLLlQpdBWC0VbVN0M9SGmHCfhDBfcVdFt9CnSVO3WTFRBBMNmlYhMwU+HZUi37ZIGGTSBjH+LjSCFJoewqGTHT079Gu0vbrT9fkgKho6BqJwybCPqTTP273Mpj869i34PQilZbQPp4s8t0E+AjpjoZHGNrsL2A9sW6q7zlC3gIIUZrj47BxNYBU41u05nOa0LyPP6hplM+mFN+e+H1wUdUgZ8iuCt8Zy1cXCDYnHNnooGNKDu05OPeCYudnRFIOwBMhryDqSTC7N+N7salLCDyoK9CTZxZOTR87Pz/XkUO7wpM7lzPxlwW4vYXFEC+jebY50OrR8Gs0OHXoWeSOHSsSQ+f3s2vIb5rFrLfg26Djd1YSQN6ZzwXTuBAoU6DZmpo9lNjzuiMPp0Tv6HSW6C8Vmu14v3Pz25ve1B5a2o6xetJ/sf9Z2DNghVcNpflnS1eNalnhK1Kmu9m5GzoKSVhUDWbt3aEDRYILFAleyA5xf01yyfeTe7YtmqUNVfIzueDhRjtr3vkOT62pwPeiGQO1FN5xw73O2yya/qR+JDhdJ4hU6u9j+L1sg90gfmA3SgCZJXSz06KMsgAJszGV9GmAOUTytJOqZXcPVIcNvtH39uo99BwDc4GiqUVnJtK8WBfa1o1E/evKkjwl45hdsiLs6nDli8BdWttBDELAzOYF1gzLSZs0pKh5nVmWCp8IhvXat6FJPEs4k7sK00E47UJETh7t5e/xMd46X6A0s4egqZ/V+07kgSbYpwIkEd5KaocDl1gbxYUnQ32W700PubOG0nO/SUwdoO9BUzeh2AncVqC5Oj7PDO3K72j4khzM/awd2jDvHuTsnqOHREDEn9MZF4EvzLqJJgN5XEs1CsONdhPcKwgkL30Q8Dyi5dH/wsyQTg/ocYcczM3tI8ydOnZBoFoz+oKXPg0n+3c65iwVhKj49dRlSn0yHy4Lm1c2+7bBRJ6c9R4OmGuoYyKm5WGe5wpNAjyf7DwQBksy+8/JfAx2CtxPmvaHpfOt02OumXdJYrGFsP9z7EO6BwXtpuQ8JN64PCtjm+QKnTf2pUaxhuB/9C3VS7Zw=</source>
  </file>
  <file path="Header/Consumer/AddressBaseConsumer.php" generated-path="Header.Consumer.AddressBaseConsumer.html" hash="4325bd559554dc42767dcf9a7fe32603" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="21" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</extends>
      <name>AddressBaseConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer</full_name>
      <docblock line="21">
        <description>Serves as a base-consumer for recipient/sender email address headers (like
From and To).</description>
        <long-description>AddressBaseConsumer passes on token processing to its sub-consumer, an
AddressConsumer, and collects Part\AddressPart objects processed and returned
by AddressConsumer.</long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="29" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getSubConsumers()</full_name>
        <docblock line="29">
          <description>Returns \ZBateson\MailMimeParser\Header\Consumer\AddressConsumer as a
sub-consumer.</description>
          <long-description></long-description>
          <tag name="return" line="29" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="41" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getTokenSeparators()</full_name>
        <docblock line="41">
          <description>Returns an empty array.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="41" description="an array of regex pattern matchers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="55" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::advanceToNextToken()</full_name>
        <docblock line="55">
          <description>Disables advancing for start tokens.</description>
          <long-description>The start token for AddressBaseConsumer is part of an AddressPart (or a
sub-consumer) and so must be passed on.</long-description>
          <tag name="param" line="55" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="55" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_advanceToNextToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="70" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isEndToken()</full_name>
        <docblock line="70">
          <description>AddressBaseConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="70" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="83" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isStartToken()</full_name>
        <docblock line="83">
          <description>AddressBaseConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="codeCoverageIgnore" line="83" description=""/>
          <tag name="param" line="83" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="83" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="99" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getPartForToken()</full_name>
        <docblock line="99">
          <description>Never reached by AddressBaseConsumer. Overridden to satisfy
AbstractConsumer.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="codeCoverageIgnore" line="99" description=""/>
          <tag name="param" line="99" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="99" description="the constructed header&#10;        part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getPartForToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJzNVktv00AQvudXzAGJtGrie4sKFKhA4iWSE4TD2juJF5xda2ddiFD/OzObteu4SVupQmKVxI+d5zffzObZ87qsR9nx8QiOYV4agqWpEPhaKx/ALSGUCF8vVEBydvFBmeqDWeNn5Qk91N79wCJMWVn0X1SmQEsIZQj1aZa5mp9c4wucOr/K0i5lOelJepiye7iYvWb1bGTVGqlWxUGHi7eoNF9eOUvNGv3ZaNSwu3cBvQpOHlMmM/RXSKD4A7kinBRJA5bOg8fC1AZtyAgt2wNcsxtQWnskgjI6IRhX5ieKtUvv1qCshrk7klxBvi+30hdsvQ2HMSPOD5yF4H6iFXwKljF2xS/ABAJq8i6WE7bZs/Sq91pD4aqKoSXgzMMiiXyONcl/xI1kHHWU9xgab1GLwXwztNlVSDWhZAS+KlUaDQnlCH5RcfB7s8LfgWHivZyCV0VoN0Z/RsArQi7rGL7EIAgWD6zfYhBmLFhrrA/VtH3ZXl9s870V07fvkbB9XUo6WbwyaoHhY9SWjS2C4VqtMMyavLVA46MouE1OVnL1rXsh60ngZpmct06EcMzoyTkbGySV7Mn6fhZvr+PvIfCUZT7WYQPKe7U5mDnnzbzifFk+Skqzelzhb6Zh4I6wsFahKB8GwFz4OkNuemmkwxjcmcFrQyqvpO/0lbKF0F7ajYLQNnYE3UpnLtW6EYgK+0jYm0iccL8fxqyxlzRHsTHIwbqhADlu21Nze94GVRJfd4OEqxujHWznzlXwxNBM4o2I3YfsFgicu4/cRFFjPPRxsmtxCLxZwnhXoLd5U5mz7t11d8dB84w7Pd0TxAHfdxV3X1G0Q7JPA5TqKlUx40kBrfEEv6p+qQ2lQDtMl6ri8X+gEFtyJ4iGzJcyIJMgWrivAobeWN1P+gCzo7H/IP/CabZ/xRxZ4buVdR7/ITQ3pX8kOB+RI2ZpxfNG986fPlpT+MRC3miNcj4CqWBouenwHUzyx0ITz4FdkHa7+L2RTqyAUGYPBN+gdFunxunUnAO3kPyLqJL0pLWWFk5X0ziyqVA1athblvvOw3jGb+/jSJMYZIpxTLFk238kA89pHnqwTVXtRk6layotI89EnPQDTgBxfOl8nw0nPZgOMCMdgxLKJRfP+c3k3OKvHU61xLke/QVPYD3C</source>
  </file>
  <file path="Header/Consumer/CommentConsumer.php" generated-path="Header.Consumer.CommentConsumer.html" hash="77f2c52770e4e154368928a70bcf297f" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="LiteralPart">\ZBateson\MailMimeParser\Header\Part\LiteralPart</namespace-alias>
    <namespace-alias name="CommentPart">\ZBateson\MailMimeParser\Header\Part\CommentPart</namespace-alias>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="34" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>CommentConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer</full_name>
      <docblock line="34">
        <description>Consumes all tokens within parentheses as comments.</description>
        <long-description>Parenthetical comments in mime-headers can be nested within one
another.  The outer-level continues after an inner-comment ends.
Additionally, quoted-literals may exist with comments as well meaning
a parenthesis inside a quoted string would not begin or end a comment
section.

In order to satisfy these specifications, CommentConsumer inherits
from GenericConsumer which defines CommentConsumer and
QuotedStringConsumer as sub-consumers.

Examples:
X-Mime-Header: Some value (comment)
X-Mime-Header: Some value (comment (nested comment) still in comment)
X-Mime-Header: Some value (comment "and part of original ) comment" -
     still a comment)</long-description>
        <tag name="author" line="34" description="Zaahid Bateson"/>
        <tag name="package" line="34" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="42" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::getTokenSeparators()</full_name>
        <docblock line="42">
          <description>Returns patterns matching open and close parenthesis characters
as separators.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="42" description="the patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="53" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::isStartToken()</full_name>
        <docblock line="53">
          <description>Returns true if the token is an open parenthesis character, '('.</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="64" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::isEndToken()</full_name>
        <docblock line="64">
          <description>Returns true if the token is a close parenthesis character, ')'.</description>
          <long-description></long-description>
          <tag name="param" line="64" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="64" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="78" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::getPartForToken()</full_name>
        <docblock line="78">
          <description>Instantiates and returns Part\Token objects.  Tokens from this
and sub-consumers are combined into a Part\CommentPart in
combineParts.</description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="78" description="" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="78" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="93" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::advanceToNextToken()</full_name>
        <docblock line="93">
          <description>Calls $tokens-&gt;next() and returns.</description>
          <long-description>The default implementation checks if the current token is an end token,
and will not advance past it.  Because a comment part of a header can be
nested, its implementation must advance past its own 'end' token.</long-description>
          <tag name="param" line="93" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="93" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="106" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::processParts()</full_name>
        <docblock line="106">
          <description>Post processing involves creating a single Part\CommentPart out of
generated parts from tokens.  The Part\CommentPart is returned in an
array.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="106" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="106" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJy1Vl1PKzcQfc+vGCGkJCgf71DoLfTeFqm3ogVV1SU8OLsO695dO7W9BNTy33vG9iabhBBo1Uiwu7bn68yZGX/z7byYd8ZHRx06optCOZqpUhKec2E9mRn5QtKXc+GlM3ryWajys6rklbBOWppb84fM/AjCLP+hVJnUTlLh/fx4PDZzfJnaZnJk7P047brx1OXD9DGCeTq//h7i444WlXRzke00OPlRihyPC6NdXUl70unUbu9pfPnJT8pLK0p+P3mz0IWpKqn9SuiSlXjDhhNmyRVHoizJm68IihbKF0ozghAupONdR1lU5hgt4r+rtO9VJsrlNkGygjvDIjgCOaFpKklL52Xe6DZasgqhDRTYESF3kkwN94alfJCsTnulazY9wypOQrHGdrJDUufRle/yXHllNAJ4GtCftYEZpCfA5agSTyQflfPB8spLBLSQCLmSQit9H5xZRaw4DKdyicWokZy3OEcLU5c5wW3EdM+BWPYEx5JmVuTAKTi0BOqSjwEL4EtOeOVmTxRwJTeXmZoBPz7vBpQS1vADTgAd5R1rmVlT0Q8SGKhseWBRqKygXM4U8N0SFzpnyV9CBNchgNWeI1dPAWf8XqX146Oo5qV0x/zx+5CpNYykOqZrU0l6EGUtqZcC7r/tGPUSARoxAKqAPyB8p6IDRLWsbmMVsgD69Rs1BzRkReEXTYi2hVDnovYFEvdFiELllAoplHBWCreNo3z0TLdN9Dt/ddhKqCT+HdGv0tdWc/Px4J9m+vmsYN5wL+F8UFYaJL7NtKwQVmQ47xo1nBuJI1yqnJi42jw/2GAlMfL2LrS4xmI6NA5P9DcPLgL1Wa0DJ+le+huu8uul/l4/nI2x8C+pv+1Oet0BdSf97t1J2HwO/3fF7C2ypGLDDY2EuzDKNkT+YrxQ3utuh8eOVU29HQZVm6FPjSn3RarctQdLQrS9qGZHpGmXTk9P2aP+v4/2tewi2v7/Ge1Hnb831v7rsV5q5wXaMNdH4K5NwYfhEoyRmfIEddzB4/AIbQo9fkVmCK51GgI6XJJT9KwcDQBdUdDmvMJ6oyAd5dUXiuE1/OIew0eHyqURuonu5C2TNL7z6xsKjI99MradjUHLgR2ZOWTQhmfc2T6BMMY+Dc+0XKzl9LVsXWAAuoSAY9FH3+u307aFHc9cjA5Rl4Cbez6DH0YRWCuzr64heFZbJvRaWfPUi6G1E73ghsvTUeQPQmdcChi9yoMf5zITfAdZtuNlExcU7wrpqtDoiwNjAGm36V5Vuy0TjsxCUxd+daNju7jSXIIarHbQZdU99qU8OXJjfgbmMV+bNgbrGjcpsJG119J8ZRAtnMikc0x5pR9M+YACzawEOFgRxBu4BW/VFC5YwLvRdM/TTHAknIimcoMj6UK2XZQukSkULjK+zL214mkX4O+sMEy0w+DRf6zU27u/g1v70pfADP2lFySS/a0sNcRF6+yeLJdnBsjjFtaLUjy9w1u/JRqSOE7XQBX4bCw3V1Af3XBIbZSb60brzr+mCFUZbfEl1TP1UEQtBZuG13wfhRlHo+jj8Az9KomiW4x4JpysCT+TLJ180WTLv70mD9ZN/sZ3umjw4EWDe/RtadrQ0dl+a641O/psC79eY6m/vPg8d/4BebGD8A==</source>
  </file>
  <file path="Header/Consumer/SubjectConsumer.php" generated-path="Header.Consumer.SubjectConsumer.html" hash="058b948bbe188e0e2eb9e9706c365bf7" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="29" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>SubjectConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer</full_name>
      <docblock line="29">
        <description>Extends GenericConsumer to remove its sub consumers.</description>
        <long-description>Prior to this, subject headers were parsed using the GenericConsumer which
meant if the subject contained text within parentheses, it would not be
included as part of the returned value in a getHeaderValue.  Mime-encoded
parts within quotes would be ignored, and backslash characters denoted an
escaped character.

From testing in ThunderBird and Outlook web mail it seems quoting parts
doesn't have an effect (e.g. quoting a "mime-literal" encoded part still
comes out decoded), and parts in parentheses (comments) are displayed
normally.</long-description>
        <tag name="author" line="29" description="Zaahid Bateson"/>
        <tag name="package" line="29" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer::getSubConsumers()</full_name>
        <docblock line="36">
          <description>Returns an empty array</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="52" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer::getTokenParts()</full_name>
        <docblock line="52">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>Overridden from AbstractConsumer to remove special filtering for
backslash escaping, which also seems to not apply to Subject headers at
least in ThunderBird's implementation.</long-description>
          <tag name="param" line="52" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="52" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="63" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer::getTokenSplitPattern()</full_name>
        <docblock line="63">
          <description>Overridden to not split out backslash characters and its next character
as a special case defined in AbastractConsumer</description>
          <long-description></long-description>
          <tag name="return" line="63" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJyVVU1z2zgMvetXYDqZsZNx5Huz3U3Tj909dJppMj00yQGmYIsNRaoElcTTtL+9ACV5HbfptrrIpIAH4OEB/uOvtm6L+cFBAQdwXluGpXUE8m4xJghLSDXBhxNMxMFfvkHr3tiGTjEyRWhj+EgmleKs/sfOGvJMUKfUPp3PQyun0EVDZYir+fCV5wuuDodDKeHh5OyluM8Ljw1xi+bRgJf/EFbyehE8dw3Fo6Lo+H+t5ZSG3/rz6Jd9zsM1+d7830QRU9CIA1mv7hL5iuFv8hStGVOCFCBSE26ExMTA3QLM8IlHnk6jDdkwCeEztVEWoc6hGW4pktLPVEHH1q9yD3bj3NbW1IrWEPoEtu/UiCUxE1ovCInuEtxaCeUVlLyYSRNmkh7chs5V4EOCBSmU9cZ1lTjhw/5HSl1UsBt0nRTmAWFFqefqvd6VAEriIXkTBEDBFIDHyJ+6IHQPARcCsfIhUjUD9HJGc80OuQZTY0STlIWKJC9NxSsYscFWThuDkcvXMTRSIyflSQKd152XpE5srDL22y65EK6F1AU00motm4kazimpU85ToapA7CfSB5TmoQdaLpXKKZWrcmON8KTRQp1VRbgnMFTc8yVpOKdYJoiUIXRJ6sjf9/tSe1IetgKmYt3IifdBbqGy3Dpc9ywKTQ06t9Z6IQ8ZdqkW+XxArG0Fg4zz/BjhkOGsl8BGKPRjoRafC5Anq1mfA3iXu8y59KZNa0km4nr8Or6PezHA8wUnbcWId3E1CvBwI/jBZ57fsiyS5CVULTtvkg1eNSTZjgg83c+GfWL6DKEuro7y1ZfiJynnZFWwl7+3DmAZ4ginBZguamdkPGX4QZLUSzuMf7nLxtsbitFWIlZYqhJ3WdlaB9ySseh0wQqaamkr8n8jkJUuX2f9hAM6DoNiBUtnFdvWrfVwtrM4MI1wjpDTzjhMRHdN60iVhkr/d8Uciyix2ew62Msc8G7nf5Pgi6v7bSH9TAx54aoPT3eTeEQae7pCD/8U35HxLYzR9TH1bDVvoFYGT/aDju0Pd5JOsG51rzt1cz/CydLETZcNyr9GRcu8g62OCz5UxmNzJVbjyo+0ojvZFEmC+F+l70xLOO19vhuoPX4hWTM8y1KQvTSd3E9mWyw+d65HIdWC8C9DOfC3xfrk63QC5QathMn+18nI8pfiG8CPwf0=</source>
  </file>
  <file path="Header/Consumer/AddressGroupConsumer.php" generated-path="Header.Consumer.AddressGroupConsumer.html" hash="52349dddd5529fe36195a329d429bfda" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="AddressGroupPart">\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="28" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer</extends>
      <name>AddressGroupConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer</full_name>
      <docblock line="28">
        <description>Parses a single group of addresses (as a named-group part of an address
header).</description>
        <long-description>Finds addresses using its AddressConsumer sub-consumer separated by commas,
and ends processing once a semi-colon is found.

Prior to returning to its calling client, AddressGroupConsumer constructs a
single Part\AddressGroupPart object filling it with all located addresses, and
returns it.

The AddressGroupConsumer extends AddressBaseConsumer to define start/end
tokens, token separators, and construct a Part\AddressGroupPart for returning to
clients.</long-description>
        <tag name="author" line="28" description="Zaahid Bateson"/>
        <tag name="package" line="28" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::getTokenSeparators()</full_name>
        <docblock line="36">
          <description>Overridden to return patterns matching the beginning and end markers of a
group address: colon and semi-colon (":" and ";") characters.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="36" description="the patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="47" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::isEndToken()</full_name>
        <docblock line="47">
          <description>AddressGroupConsumer returns true if the passed token is a semi-colon.</description>
          <long-description></long-description>
          <tag name="param" line="47" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="47" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="58" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::isStartToken()</full_name>
        <docblock line="58">
          <description>AddressGroupConsumer returns true if the passed token is a colon.</description>
          <long-description></long-description>
          <tag name="param" line="58" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="72" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::processParts()</full_name>
        <docblock line="72">
          <description>Performs post-processing on parsed parts.</description>
          <long-description>AddressGroupConsumer returns an array with a single Part\AddressGroupPart
element with all email addresses from this and any sub-groups.</long-description>
          <tag name="param" line="72" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="72" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJy9VU1PGzEQvedXjBASSZSQe9JQoC3tBRUJTnyocryzWZdde2V7S1HLf++M7V2SEKAc2pVg1/F8vPdmPH73vi7q3mQ47MEQLgrlIFclAr1rYT2YHHyBcHksPDqjr0+FKk9VhWfCOrRQW/Mdpd8nZ/Y/LJVE7RAK7+vpZGJqWpnGStw3djlJu26ycNk4LfYpPRyffyT3SU+LCl0t5LMJr7+gyOj1wWjXVGhnvV7jXrWmlb8+yjKLzn22pqn5B3JNrIOxAwFO6SVxX7IJMxfRhfb6gvcZXjaO2606QrdmHKoICQesB/DfidKZW4nTcApQ3kGC0xIB1yzGslsghSdKGSzuQZqqEm7E4YTOADki6S7Jm4MZTXIRdqwUBSiN5trlptFZh+LMKmPBG7DoG6vZixaMQoqy5KUsFWo/glWROmgMy9tGkr3gcEmmraqCWXBDcBOVkSrcKV8A5YHSyMCpk2PEhDhixOXIusN8QV23FQ3+9EGCtHksHHZ7xCrDXGkE5wnMBGN4b26p1Ubx3YprbMz/SI9U3M4pJ/VWpeOYUTHX4T0UjS/I7lKIQmWQGjJ0tSyFc28m0/vVA3pCj/IzhK8/0FqVZcShqyX1offI2lXCyyLgI+UWuFQ6oE0tQ9v2Fq0LLdsGjJ2cyjGF2D3ssNJM/Z3pTvhtZ7YzAFmQdJISMvEYpH0fJkCkJeW9ugk4WnTJaBLedbOgww95o6VXlGKJ/oIrc94Vpj8IhlEBflLsq73p3gj2Zns3s7D1EP5v6rRV6bbFqNI03fKEjrowS22h3NopesqPwVWJHuwGp03uC2NKpImQi9LhOmdrPJ0LytbRVu6TzgLxfoz2DOm0C/P5nKkP/hH1/8b6nI/mW3lPX+Z9hpYOaUWD0Tg/XpuOPKmZKg/sp137omA8260V92mEvTj42oBYYkWD4XHqYUV30soVkFtTUQlYczpVQt+H0R+O4pZDFeW//psLLn7zJx2+3UB3s1KboK9ufgeCrxUtCcourh8liQk2S7cb2DqYw1U6ovxQaVDIgioanIAu0/A1WPHkh3ozmoCikSzoYqNptYl502k9bQD3jYq4xH76dRSTjQ9ozhy1ZegPBrMnYegm8Eo3uL7zsLZKQUnieYz7aPxouBsnK1lwoccHbHdCc9PY+/GBxrtNTi3UFUztxIuhunn30PsDxKgQ2Q==</source>
  </file>
  <file path="Header/Consumer/ConsumerService.php" generated-path="Header.Consumer.ConsumerService.html" hash="4ce34c5e5e1a35e2881b97e5be6f0bbe" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPartFactory">\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</namespace-alias>
    <namespace-alias name="MimeLiteralPartFactory">\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="17" package="MailMimeParser">
      <extends/>
      <name>ConsumerService</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</full_name>
      <docblock line="17">
        <description>Simple service provider for consumer singletons.</description>
        <long-description></long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="23" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::partFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;the&#10;HeaderPartFactory instance used to create HeaderParts.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="29" package="MailMimeParser">
        <name>$mimeLiteralPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::mimeLiteralPartFactory</full_name>
        <default></default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;used for&#10;GenericConsumer instances.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::__construct()</full_name>
        <docblock line="36">
          <description>Sets up the HeaderPartFactory member variable.</description>
          <long-description></long-description>
          <tag name="param" line="36" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeLiteralPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="47" package="MailMimeParser">
        <name>getAddressBaseConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getAddressBaseConsumer()</full_name>
        <docblock line="47">
          <description>Returns the AddressBaseConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="47" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="57" package="MailMimeParser">
        <name>getAddressConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getAddressConsumer()</full_name>
        <docblock line="57">
          <description>Returns the AddressConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="57" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="67" package="MailMimeParser">
        <name>getAddressGroupConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getAddressGroupConsumer()</full_name>
        <docblock line="67">
          <description>Returns the AddressGroupConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="67" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="77" package="MailMimeParser">
        <name>getCommentConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getCommentConsumer()</full_name>
        <docblock line="77">
          <description>Returns the CommentConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="77" description="" type="\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="87" package="MailMimeParser">
        <name>getGenericConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getGenericConsumer()</full_name>
        <docblock line="87">
          <description>Returns the GenericConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="87" description="" type="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="97" package="MailMimeParser">
        <name>getSubjectConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getSubjectConsumer()</full_name>
        <docblock line="97">
          <description>Returns the SubjectConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="97" description="" type="\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="107" package="MailMimeParser">
        <name>getQuotedStringConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getQuotedStringConsumer()</full_name>
        <docblock line="107">
          <description>Returns the QuotedStringConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="107" description="" type="\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="117" package="MailMimeParser">
        <name>getDateConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getDateConsumer()</full_name>
        <docblock line="117">
          <description>Returns the DateConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="117" description="" type="\ZBateson\MailMimeParser\Header\Consumer\DateConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="127" package="MailMimeParser">
        <name>getParameterConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getParameterConsumer()</full_name>
        <docblock line="127">
          <description>Returns the ParameterConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="127" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="36" code="PPC:ERR-50015">Argument $mimeLiteralPartFactory is missing from the Docblock of __construct</error>
      <error line="36" code="PPC:ERR-50014">Name of argument $mimeLiteralPartFactory does not match with the DocBlock's name $partFactory in __construct()</error>
      <error line="36" code="PPC:ERR-50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $mimeLiteralPartFactory in __construct()</error>
    </parse_markers>
    <source>eJy9lt9vmzAQx9/5K+6hD2nUhvd0P5Nq3aRV6pY9VZEqBy7BE9jINpGmqf/7zhQiAnZIulBewPC9+959bAu/+5gneRCOxwGM4VfCNax5ikD3nCkDcg0mQXicMYNaiuU94+k9z/CBKY0KciV/Y2QmFGzjP6U8QqEREmPyaRjKnEayUBFOpNqE1VcdrnR8XQ0mZA+zxS2Fh4FgGeqcRV7D5VdkMd3mUugiQ3UTBIXuVdPIVM/28QuLjFR/bo4Ota+/c4OKpXvxNbYFz3JiRmFbaspC2XIKhrVUEFWVguZik6Kh4Y4WK0xCkkfGEh5DVUgJIkqZ1lB3uXhJHPwNgK7S1F6UYcsULF/VvZ3WOk33IxfaMEG9EKIYjIRIIZk0lLaLMjos79SzoYVA4ou8ich+e33VbvAvRRHcOuEdClQ8qnHtqvfXmHlm1FXuAo2GIi/3QZdUhtmKLKklzlYp1o6wa5ZwsMwR2OS0X2axor0B60JEhksBT092DRlVRGZ0OM0VeIB5+r0s/V5Wlb0uDO3/6w+NjPDeMZ8NqTuvjTpE+NnJ+SeaQgldcv4cxwq1njGN884G2s1vF7Yqc/Qurjrn0uFzcC42aBwhozbIqgyHdDqlFN+q+kclxSsH98sTQb0FpBMBHQlnYDB3Shb5W9DZMzoS0V5MD6c97blhzWWWoTCDcmp59CFqyX10WrJzg2n/WYYA0/LoA9OS+8C0ZIfAeH4ONaNDfBbFyp7/BuXT8ujj05L7+LRk/8Gnbw39KOjYES+MIjaDgnIZ9dFyxfiQubTn3nC31OqgkJoGfXCaWh+UpubcMB7s0RFp4Q1KpOPSh6UT4GPTEZ4K6Dn4Bwvyvcs=</source>
  </file>
  <file path="Header/Consumer/AddressConsumer.php" generated-path="Header.Consumer.AddressConsumer.html" hash="e549f46930d9cf5b77547fa495596125" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <namespace-alias name="AddressGroupPart">\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="34" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</extends>
      <name>AddressConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer</full_name>
      <docblock line="34">
        <description>Parses a single part of an address header.</description>
        <long-description>Represents a single part of a list of addresses.  A part could be one email
address, or one 'group' containing multiple addresses.  The consumer ends on
finding either a comma token, representing a separation between addresses, or
a semi-colon token representing the end of a group.

A single email address may consist of just an email, or a name and an email
address.  Both of these are valid examples of a From header:
 - From: jonsnow@winterfell.com
 - From: Jon Snow &lt;jonsnow@winterfell.com&gt;

Groups must be named, for example:
 - To: Winterfell: jonsnow@winterfell.com, Arya Stark &lt;arya@winterfell.com&gt;;

Addresses may contain quoted parts and comments, and names may be mime-header
encoded.</long-description>
        <tag name="author" line="34" description="Zaahid Bateson"/>
        <tag name="package" line="34" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::getSubConsumers()</full_name>
        <docblock line="44">
          <description>Returns the following as sub-consumers:
 - \ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer
 - \ZBateson\MailMimeParser\Header\Consumer\CommentConsumer
 - \ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="60" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::getTokenSeparators()</full_name>
        <docblock line="60">
          <description>Overridden to return patterns matching the beginning part of an address
in a name/address part ("&lt;" and "&gt;" chars), end tokens ("," and ";"), and
whitespace.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="60" description="the patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="76" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::isEndToken()</full_name>
        <docblock line="76">
          <description>Returns true for commas and semi-colons.</description>
          <long-description>Although the semi-colon is not strictly the end token of an
AddressConsumer, it could end a parent AddressGroupConsumer. I can't
think of a valid scenario where this would be an issue, but additional
thought may be needed (and documented here).</long-description>
          <tag name="param" line="76" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="76" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="87" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::isStartToken()</full_name>
        <docblock line="87">
          <description>AddressConsumer is "greedy", so this always returns true.</description>
          <long-description></long-description>
          <tag name="param" line="87" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>processSinglePart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::processSinglePart()</full_name>
        <docblock line="101">
          <description>Checks if the passed part represents the beginning or end of an address
part (less than/greater than characters) and either appends the value of
the part to the passed $strValue, or sets up $strName</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="string" variable="$strName">
            <type>string</type>
          </tag>
          <tag name="param" line="101" description="" type="string" variable="$strValue">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strValue</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="130" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::processParts()</full_name>
        <docblock line="130">
          <description>Performs final processing on parsed parts.</description>
          <long-description>AddressConsumer's implementation looks for tokens representing the
beginning of an address part, to create a Part\AddressPart out of a
name/address pair, or assign the name part to a parsed Part\AddressGroupPart
returned from its AddressGroupConsumer sub-consumer.

The returned array consists of a single element - either a
Part\AddressPart or a Part\AddressGroupPart.</long-description>
          <tag name="param" line="130" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="130" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJy9V21v2zYQ/u5fcTCC2e788j1OvLjZuhegXTcHG9CmH2iJttTIpEZScYO1/313R1K2ZTlJN2ACEuuFPN4999xz5MV3ZVZ2Ji9edOAF3GS5hVVeSMDfUhgHegUuk/DupXDSanX7WuTF63wj3wpjpYHS6I8ycWOcTPOvijyRykrInCvPJxNd4pOuTCLH2qwn4audLG06Cg9jXB5eLr7H6ZOOEhtpS5GcXPD2JylS/LnWylYbaaadTmWfHI1PLtzT7fTZc270nVTPHz5PUyOt/dHoqvQLRWB5sAUBNldrhDdiKxQIPwkyNkRIAv39Lkt8LZVrmwVFbv2dnyztGGDuvye6KlJYStBKgtygt2QuDByCNvyhtyYnezhaOZErtA+bqnB5icvsG73B5CcBbJAqtTib7K1yldIkmSM9DHqU6M1GgCPAhmCi8zQE3ZfomXC5VuiX20qpdmuQR+wgjtrko0QXOIrNHFohFuL6Pnx2voZqHvHhaGtAN+KBXQ9QfazwF/HmQYyDAOIbvkvr93tQYfAvtctCBSADhJFwL4o8BflJbBAo6515ZfQmZO+c5sOIX53DR1xc6e3VNldOmpUsijGidDDkFwx2gWPgon3wLMbInMKYKAjMLTmeDmGFUQRn4tI3+hz+rG2ccmIIc/MgYOGEuYMLgffNhaehpOcxURFPogv8VWknUyacZQAp/UTWIT9xHfME9HWDxTLy+JBBqRKdyrTO3pWoXIZxvBMiQ2xDmbEcJIXAPAYPrmsWfnJMxPnSOiMSFz90/u4AXlxxdFENucooy9xZ6aLQW+ajBVstR5HV9jwOR/Run6k7B6VeO/Av7Fx73P6Lid84FwtnMLimnfh7ZRiKI8zef2BwDvAIcyb8iwLvUOAx16tKJVzCa+kW1TJasP0BD/Tg0xWWel+/oOvMYWsZzeIiC2nuUf9HMzTWBmV/MHzu9AaCXzGzDbj96R+mfPuF/ze59eu9NCZPU0lqFWMuhcMaUkR9l2RRtpZynSuW2GPZj+awprwcTaJ88dh+96LLFdWddSHJkACDIcsgK6TF78PwfdodcO1Fg9ssd76Xjk+RwXLkgQLR9cPsV0ts0wep55a48IKuH8l+76I3hN6M/g3p35T+3dpve4+iWlesqSSrG7cVLzG7/mCPQpoXqCHVOvNs3jUS3MYo7TjSxBUPdRfxDYYzUZs4lJkh5LGX0gRB+UCaQRtbx/AzJEL1XLSFnFN3vjv4jmFxryNMrjEtEtsIcRK2sVEL8tNWcgjLyhExcgJbFDtrFJqLeqqkRP2EPmGS6qQi9uMzGR4c55oStQmpxmKguJs8WGpdSHRiJQorn6r+3P6gUiZB31s7QYDwFS4vL4kB8Pkz7L+Z9gaP8aCp+QhXd20w8IfuEKz2AIpiKx5sWNBz5v+In5qmewYC5M9jMV5nMrmzkK9C/WGT9R11t/GxDf3Qpt4DHSmI14uCpMNlQk0QLuwfhh9YOlD2Ua4HXEtx21aW3EppFSQq1pxe7VgXNpxO7zt4hlD+QUN5C2Ul+liV/PYNqtcJ+Hd7bzgjmyey0zBy/JUXbmQov8cwd/nBlCWIwYJ3hLRiv7n4EL6JK4VbNtvM4lnJr+HSz+KOwW/6gbl0YfL6/BkF3DqhEom5YW4M9kztRgaTVAEXveYQXjV4RstGz6ato6J3vd7xd8/Aw/dfQCK9j9yYtbrRaqBzfLdzZHwZEXuM829xh6nNhg6ZKHAxWUxt6p4mlkCLwh8qQg8Lh7a9JH7+ZFFojdVEPSP0xubxIVraK6eDA5jnBrI94cpB7d4/1DF/dOXbdzTVaNi58ecKjGituGj4gBGrSMQIWw+L0aaHniSHzhW5s60t52DLdgQWndpqO8KY3UkonFnigckDiLvNKAh1oo5CNw1AasdPae5TG9jGqRz3IVxJtaBFef5qO5854qeEPHCPpti+x8ivfyQEu5Lcr7VTNYgMlCLJgi5YOm7wXbsgNKSjie3p2mzsr2uv/HaX7L5CwdfmYTRTctu022+dzAZqsatPfs0t9cHwQ1VuXIOjtx9Oacq+80cSHnR7J9s71Z62qFJE6HEwvOUWk/UO9UvnHx4c6UA=</source>
  </file>
  <file path="Header/Consumer/AbstractConsumer.php" generated-path="Header.Consumer.AbstractConsumer.html" hash="1f93d3387df9fe4f49fc5af6c82e604b" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="HeaderPartFactory">\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</namespace-alias>
    <namespace-alias name="MimeLiteralPart">\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</namespace-alias>
    <namespace-alias name="SplFixedArray">\SplFixedArray</namespace-alias>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <namespace-alias name="NoRewindIterator">\NoRewindIterator</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Header\Consumer" line="24" package="MailMimeParser">
      <extends/>
      <name>AbstractConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</full_name>
      <docblock line="24">
        <description>Abstract base class for all header token consumers.</description>
        <long-description>Defines the base parser that loops over tokens, consuming them and creating
header parts.</long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
    </class>
    <source>eJzNWm1z27gR/u5fgcx4TlIqy71+dM5pfYmv55k457HdzvRsVwORkMSGIlkCtJPWvt9+u4sXAiD1YuemV80kFklgsdh99tnFUt/9uVpWe4evX++x1+x6mUk2z3LB4G/Fa8XKOVNLwX7+nishy+L2nGf5ebYSF7yWomZVXf5LJGoCk3H+X/IsEYUUbKlUdXR4WFZwVTZ1IiZlvTg0T+XhTKYH5mICy7Pvr97D9MO9gq+ErHiydsHbHwVP4c+7spDNStRv9vYaufNo9+VK1Pew/JtdJsOVMt/x6w88UWX9ZfepePtDpkTNc7zWE6+q/Ifss0hP6pobWWc4BETrq4/lpXjIirS9a310MpOqBiXYjMO4JOcSXFbWjOc5W9K6TJWfRMESs1mJ3mH4772YZ4WQ5FGaXWkvqiVXLC/LSrLy3s6XYyMhKxY4Y8V4kbKkFlzBHRRnVkOcSIcA3qglaPMz58ssZcY+5FxuFdc6231Yn+z9d4/Bh3aJH5B1z2t2+0LfMrBiCjuxwuizEMqZhWWFVLxIhDafbGYHzmJm0iH9BYwrwDhI209i/ODzF6ndjyqrNCmp6iZRVmg7lJUzDLm1OlY+SPv0OysylfE8+49BgrXDxA5wGwFRfMViw8ZWiIZ3N+WrFGrdzIAF2LwpEpWVBZtO3b6H21Ydb1loRCtoTOFnXwG3HbyNpLDjNU71pnhCcXjHvk+9Vr4UqqkLbWEJAZMLBTu0tibI4SOKhd/N8qCM8h0A8XFmNPzNHWDW2m/D7pjd3HnW1rRwjEpME2AzkU7p1nDUDsrmbPgqk1KoYSvoRk+9G4285UhkZwiIL8SD0WXY3VKwgXbZJ/etJrf2SN6EhbPiHhiVMipCAZMqN+w5kOye5w1GIYR9xKi9oID4QBn7ehpiqOYPdibddBOMss/kops7ksoxNaGqlCTSgEcRQajjlmjOaN9DrWqMB3Sl2cSr42M2GMTes6Z2USjFJX/4O86wIjd46GajR94RvljakC0d66Da4AaAF2sqskKeSSqCgvSgE+ZDludWnuKfBIpRdZmzeV2uGGrd5hq5LJs8Ba/r1LziKlnClS91YK2J6ASap5FdEJjtxdkzdlp/KnMpuM0XfuxfNTMrz0Xdel7z94elARYgTZH9GxwK+wrKj3APH6jSIMATOwamHaIouJ1FKXnMhEomk8kI6tMipQpES/OW9QajlLql4BUsB/e0fdYadVugdI2+Jgn7Rj3Jc8+ocVaalw1oCkxIMPfoMC1jMkuauhaFgsHm21DP9qKAxknPi5Tf9OiDt2s8bD+QkgQHWA5DCVy21B+HKH40JRdTMm1LqWOztw4ph1u/ufNT8JvOyKe9/qsn9rDEc8qwEJ+dIYhI5jyXPjNYGqEhO3DC7ItjLuQC4p1emt2BslGkZLLKM3VNNTWxC16SRE+M5gU6cmmCBwzDEKjiUYSVR8ogR8tINdojKL8G3z2Z4/dKEnV2D+u0EdLL653aTRvv2CYDMuH6ZNCTObT5z8DUZL4hVgHxGWsYnMqOjpDHTzSqtQKj0WiXks/yDNqlFosmh/OA+FzVQkrcsRToDlgPkSGSbA5Jk6gwc3628TBhcCT33FtxBbriErU74Hh46qDTpSdtP1d0Wtp2ICIM9mP4FDlB70fkYoUMtOKmmlG6lFmIAi0o0r7tUq5st0ZaIxkTskkDmDSlTQxHsOFLsTj93O40AWvO9GY1qyewd5cpdVqF55iAKXcLmfBKaMvynCVLjozdl4Ys8nVYdAGtFXhO/iSQXTn3bkuh3FUXPWZb8foT0q/2WU+udTYI0iewF9oV43zQ1Wgw2W6FLeg1eu2W+DoGiQPb7tJF9nor0vg4t7lJYZZtZ7wgqXlKkSGmMGYh2szWr+TYzdtUlWqBulwZRhO2kAo6Q7jA6In+rKgaZTlAu1PzhxWVijlvcgjGVaUDmZOrKMP0O4ywhsPLVDcLrKgw4UAprJYmEaGOP12yweOgjT00dwY5awG8tAWAnhSz0x2QprVGQ1zoOV2gyXegDLrU7GYICo5D/HRc6gNvpROiXQAERX29o6Pzs/PT6cXJ5TX8d319evmxk5AGvwwHbNIVNgFz3cJn8kiPja5wd/TL4LkJx+DBEL4+iVhsGFDEHsAUsxJqWaYGCy0jA8zQKX02NrmJhrla3KABiL0oqdWmOBXekDtWlfqiUwyhigbZAaiiCYZtxUttsr4ryfSDGE1ak4DRtU22wSkqLexyMaDMMl7uCjkkYrMAm+NwqF0ivH3wbXh9cXn61+nVxYez6+n70w9n59N3JxfXf7s8ZY/+o48/TU/PL67/4abuxC1w9hVYx6O5Ki6RWWw0muNq/cl0jcUiKwp8ot2F/OqKDKwszBnFFTBbvKnl+zPpzs5JN5NXeFgmI5sqbdu5dee9CkBpu0uf/f73uzwt0h32+M72MWRw/uXPLe6tPFsv9tgJov9MG1Fvrq3EskUBOTcd+wZzO1k1UPCY2CmaPO/lIpun6F0DVb01ElHUrh7oCtQ06w7eQkVve5dWmCa13b3je8WOmpVlzvYzaaieekNYrXsw0gJqgTUSOFcXdnr0QXQiEhPIyUDXukpNoxVfdhRzJT25vnsI806oDByKZg817/huh5RLXd+y9kE59szU2+xrn27r9AVe9ZJsCH8iNjiUSIHiiYqpsTYcHP7zVv5h/5AyPE143op6VwPIv5tawP1zXf88UHVNX5gOnoTrumwWy7DQB4CHtX2yFMknhKzxniGT4JAHwMwWCypxo+6i31YkeqColq5rWep+HHfyountMdqdojUJFGUwFF8dQyBUcJnNchFzScCA47b49AEVsBcUIRt7dzpM7Rne9gq+ur3xSMvtEAn2UEGa6+ZCrEx/P4POL/T84K3t6O101lnXxHvBWYfisj3Y9KXTvv6d0YWn9wj16/Kj+BxMwuZVHbRk4uBp1+xtz1jDhQKe1kfjTWueXmrSXcGN7wT6qunnUvGackj7u9RZJjPo6ED5bN4zKaNI9kKXavowuMeuj+4qlL64be1ry31kG+p6/v+F1W8dToh0yJB5C2x2fHzM/sS++cbMu/njHd0a3N6uexe1DmVgepDtwPbtyOD/bnv+6GeQEP/9eH0vwC4r+kGHSQgWWV5GNyGaMvOyBdvlNgfMYXh7oOepK+4k1gnmNUuIvo31WtRXoBOeWV//QsWXNGYzOJHCKdGdHc1IEyVYfZuwmfceLcbYBCsfbM/AjW/TIe7flK74Nq/El67ZYgmkk4t7kW8t39eCP6wMW8rcBusevozXGIcS++qoYTiCPT6yoUP+Pc+zdDhCVL8yCOucHvwAGXVfmtsx9GalUwFtqWT074faM4N2odtlcCzxeDZ8ffBc1jW/iNnY2MDaSTLKj6ZQwve8UQ1P5aPo1k6uJPLxC9uByZlys/pQCgTcIhmXVGVlpQFCEuyq9rRkzuab6zcgbr1q2nK/X4Dp91fOoNTGU9J/kUB9mBrtUy9aeuhRf+MLrpM5tfeokU/EgSKRS3SX2vOw5zo9yjuxjP2cqWfQ7w8Ngjovu4+OjOm0NOKW4gsyFs93MO6a8EZ1HYMSjrk9I8bdo694a7Ye9fbT99KsQyW9VdPWRKndHv7uxrxH/QoGiQnErhJ0z+nmOG6MhdkufpO9vcqMX/auPaV5eDG6bMytF6IGVK1kiysPUDZFRX40QTUTWIe3eRXVoEObckFmAzXJMzDhc3KqxOsv/i8bbJhsPB09H6b7PgpfDvetMPb9ou1pvBNB17qTHlrPPe39CtXKCes=</source>
  </file>
  <file path="Header/Consumer/GenericConsumer.php" generated-path="Header.Consumer.GenericConsumer.html" hash="01a9e852e5423b548c49a3fe36fdb468" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="22" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</extends>
      <name>GenericConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</full_name>
      <docblock line="22">
        <description>A minimal implementation of AbstractConsumer defining a CommentConsumer and
QuotedStringConsumer as sub-consumers, and splitting tokens by whitespace.</description>
        <long-description>Note that GenericConsumer should be instantiated with a
MimeLiteralPartFactory instead of a HeaderPartFactory.  Sub-classes may not
need MimeLiteralPartFactory instances though.</long-description>
        <tag name="author" line="22" description="Zaahid Bateson"/>
        <tag name="package" line="22" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="31" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()</full_name>
        <docblock line="31">
          <description>Returns \ZBateson\MailMimeParser\Header\Consumer\CommentConsumer and
\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer as
sub-consumers.</description>
          <long-description></long-description>
          <tag name="return" line="31" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="48" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()</full_name>
        <docblock line="48">
          <description>Returns the regex '\s+' (whitespace) pattern matcher as a token marker so
the header value is split along whitespace characters.  GenericConsumer
filters out whitespace-only tokens from getPartForToken.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="48" description="an array of regex pattern matchers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="60" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()</full_name>
        <docblock line="60">
          <description>GenericConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="param" line="60" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="60" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()</full_name>
        <docblock line="73">
          <description>GenericConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="codeCoverageIgnore" line="73" description=""/>
          <tag name="param" line="73" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="187" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()</full_name>
        <docblock line="187">
          <description>Overridden to combine all part values into a single string and return it
as an array with a single element.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="187" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="187" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\LiteralPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\LiteralPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJztWE1vGzcQvetXMIBgrxzL6rmK3Thu0wZI0jYyeohtBNQuZdHeJRck147Q5L93Zsj9Xlluk6A9VAdpxSUfhzPzHod89kO+zkezg4MRO2Dna2nZSqaCwW/OjWN6xdxasPcvuBNWq8s3XKZvZCZ+48YKw3Kjb0TsjmAwjn+eylgoK9jaufz72Uzn8E8XJhZH2lzPwls7W9pkGv4cwfTsxeJHGD4bKZ4Jm/N464SXvwiewM+ZVrbIhJmPRoXd2Rv+ufCMj/NHjznXt0LBHME9pyyTSmY8ZTLLU5EJ5biTWqGXTpfWGR670jKWiBV0VteMszOdYd/qFVcJwv1eaCeShTPQq35nmS2W0zj8t4fYm9k8lc4hmkOTLFtu2P1aOu+t0v1vAQ/CxR37WShhZFyh2rUu0oQtIbDKOq6chMUn7F66NeM4FB3wGvAMT3HlL2El2myoN/gDF8hZ7cHw+oixBdqacgtRZRnfMKUdwikB6A9gchXDAAdWXa/RekbZwwtoMew952uZsBAfSgyaorcq8dEJldie70d/jhh8KGr4OWDvhCsMuO3ykXl1ORgyj/VojC3xLXFaYT4qW8vf54ZM7q3t4ooI2RocxszoFyjpgJLg/1WhYkrPa+EgTiWCjSbU0TsJP2Gqi6oBP2MHYjA9KSdZCHMHjJ2eAFjHOdHk8LEjh1zSHH41p8fP9L0tiLh+I67FR7Z/aZ/us6hmwgRUy0HGKUhGF689n7gnDTSZW+SCLgERaE1BY3c8LUj1iGmMpxq4VuOyeM0xChgp1s3DEg6EEzswXbjG0KlW6aak7croDMNBfNCG9KUX+nMwa2hqkJRUZtIB0yDppkLFOoEwo04Dssb30AKe3ZpMlhwPKcQV48YAX4HY3pUdvz0mp8j6hYD5ORB7e1pRlB6MbJfYiRZW7Tu25neQ6g4WOAOiBycGRdQQpHu+sWGailYrnlrR9wBamQUHQIYiUtc7S61TAZ4hhF3rl/YnlZAHIo+2ZfUE9i+vHfPkTN+BEF+LV9dKG/EN3bJAk7+GYyq6G2QmbkCeD/VexhPM/yW38A1zI51z3IoSBtuFI1cp2CNKQCLKtszYpeqdGoKNERmfvhQHTW3hNNze8ba8A+ja194Rp0myQL9EQ8YdsqGptkQkelL1mJ5IyhNCtqcrhzLNPn1iTyrodpcXAgRIRJPJQxF9rXUO8giJSLEae+XyQkTKiK1xYQxsLizXVuIyD0EARXxrMQXgfbV7DuXCIfZQ+AzdHXCGjY0XW0vZEOjylXIAdNQv4cthSis7SBL8MAaHvFKJ+PiliUYe+wYZuyU7ecjLc/0uLC6qEs6H3DvvsNO6VzmjflP5oG5qGLRXL23wfdvgSSPxx7EuwMXHjH4jb1BIYfzgphqNb6BDZcGcwf9nYeScPX06vmkiEmpJERxHkBfjm6t5qw8kcxTqpA6NG9ytCdudgqYp/QQJdNwI77zfs3oHHVWRpv0uSyP4bbv586j9NMzpsyY5S/n15KQDZFetgZO+fkMmVtVLo7wO5O1x9K1A3aC35U4Ak0q37wvClTQg+Tn5TUODuZdwyKPaC8agGshVCSUkdvD2SdpsrSC18IrmC2yc4X+d2M1vG7XY3Gdxg71bWBuysrstVekP76EEiirIBkOJRzXQk2MPxfb2KuqVs1/RCeQPLPRhL8Oe+/vUr5oG26gs6THaM3VA0spVDy+3IUwNMs8fRaxu+dOgV8OLEtlA1VZ1rqadLlBk207XjHf+j4oPKPS8K7DQ68JtKzDGnnLBUDh7eMvLYEFJ4VF31BEvGwctoixfpoGxFpTG3QsA9cIiW2Uh5WbPJz6N/WWIHwXrCxphZSLwkITVBF6s2FzEcrVB0A2LoSrGKxVSjVrAjAhHQSxLCwcHRv/Xl96BNRi5mKcpFs9Y+uDssqq9obKGPjZkFAYUMgAvVbDe3eDxrbqBwsLdX4+QgVhdGTDaDkNlBajkUoR1SLRgE+z4ZlVRiP7fxtl11hjwakuLenpCrS/L0Bz7dPhAR/8w8oPHLCuBBlXrQvKYXTQ28wf21sHqopy+V2VI6PgdVBeyXV3InhblzcqihLsYy+0VRournqCDBUVzKdStXyfEGjOuENtKBcJpq6XtrLwtlrKpkpM2bKfCaVtUzzmbVRu3gcxCQngt6OpPhfeQuPzqCZSAhEBFEOtsKRVoKuwp5HifLbjjahRZmAylx5+f6yMG6EUlB7a+bfH3reUo4Qn8n+Bd45724uoTWbuLfk1heZh34B7adhluuQ1+rGoqhpwZovRQVS54vIb0rgDAyT6vu2Sppj46LveYuggYSqby0ioYlNcX19MTJe4bfooq8El1ufV59BdG0N9Y</source>
  </file>
  <file path="Header/Consumer/DateConsumer.php" generated-path="Header.Consumer.DateConsumer.html" hash="2c8a53deb5b482186e5062cceda0800e" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="15" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>DateConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer</full_name>
      <docblock line="15">
        <description>Parses a date header into a Part\DatePart taking care of comment and quoted
parts as necessary.</description>
        <long-description>Note that GenericConsumer should be instantiated with a
MimeLiteralPartFactory instead of a HeaderPartFactory.  Sub-classes may not
need MimeLiteralPartFactory instances though.</long-description>
        <tag name="author" line="15" description="Zaahid Bateson"/>
        <tag name="package" line="15" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="24" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer::getPartForToken()</full_name>
        <docblock line="24">
          <description>Returns a Part\LiteralPart for the current token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="24" description="" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="24" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer::processParts()</full_name>
        <docblock line="36">
          <description>Concatenates the passed parts and constructs a single Part\DatePart,
returning it in an array with a single element.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="36" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="36" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJylU8Fu2zAMvfsreDDQJGji+7KmRVt0O6zAsBU7NMmBlZlYrS15Eo0u2PLvo2Q7TQIExTAdIpnSIx/5Xj5e1kWdZKNRAiN4KLSHlS4JZK/RMdgVcEHweI1M3prFPeryXlf0FZ0nB7Wzz6R4IuCAvyq1IuMJCub6Q5bZWr5s4xRNrFtn3a3Pnnw+7j4mUh6uv98KPEsMVuRrVCcLLj4T5rLdWOObitw06anHew8IuQChiM9AG7YSkjte3Eo8HIDxRZs1KHQU2lO2qsgwoMnhZ2OZ8pAuNC/ZPBhS5D26za5HbLiwDh4RC51DxzPSVyV6D6FQzw/oF5PJPXwiQ06rPp78TkBW5B7WCL4RN874nu0XzeSwjIRXUi2IoBrnAlO2L2R6XL9fCWOswLMLzaUHb7q7J2tLSLXvcu9uXSwNi3dmHnm153Ds4FncxQcsPqAcVo1RrK2BNXF4dmfdQ+AyaCmd7xEYRmg7ibA6HimLC8ezoMAdKrZuM54Zet2bSJdrOI3Qbfw9nqdMWkk7JrQUp1eLNsKvE1bEVqIFu0aFT/AyNbH9gVPO+1wtsTBXzeIpQQM6hxt41Vy8gamk4KTJCWn+cb7zJaSR7H/qNF/+iWTf00tCwekB4gdte239Y5lSmdoPLBuCCzg7m+7iYlNCVcAg3f154mm4hz3ETy7aF+OZmCWGBsO3fNtjY8xPOKPXa7DLPFz21tgmfwHrj4/f</source>
  </file>
  <file path="Header/Consumer/QuotedStringConsumer.php" generated-path="Header.Consumer.QuotedStringConsumer.html" hash="faaf26da52406b30ca8347c2a0b81d90" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="26" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>QuotedStringConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer</full_name>
      <docblock line="26">
        <description>Represents a quoted part of a header value starting at a single quote, and
ending at the next single quote.</description>
        <long-description>A quoted-pair part in a header is a literal.  There are no sub-consumers for
it and a Part\LiteralPart is returned.

Newline characters (CR and LF) are stripped entirely from the quoted part.
This is based on the example at:

https://tools.ietf.org/html/rfc822#section-3.1.1

And https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html in section 7.2.1
splitting the boundary.</long-description>
        <tag name="author" line="26" description="Zaahid Bateson"/>
        <tag name="package" line="26" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="34" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::getSubConsumers()</full_name>
        <docblock line="34">
          <description>QuotedStringConsumer doesn't have any sub-consumers.  This method returns
an empty array.</description>
          <long-description></long-description>
          <tag name="return" line="34" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="45" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::isStartToken()</full_name>
        <docblock line="45">
          <description>Returns true if the token is a double quote.</description>
          <long-description></long-description>
          <tag name="param" line="45" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="45" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::isEndToken()</full_name>
        <docblock line="56">
          <description>Returns true if the token is a double quote.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="56" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="66" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::getTokenSeparators()</full_name>
        <docblock line="66">
          <description>Returns a single regex pattern for a double quote.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="66" description="" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="79" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::getPartForToken()</full_name>
        <docblock line="79">
          <description>Constructs a Part\LiteralPart and returns it.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;not used - everything in a quoted string is a&#10;literal&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="79" description="" type="\ZBateson\MailMimeParser\Header\Part\LiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\LiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJzFVV1P2zAUfe+vuGJIhYomKkxigsH42NgeYGKUJyhCbnLbeEvszL6hVBP/fdeOU0o36PYwzWrq1vb9OPcc37x9V2ZlK+50WtCBy0xaGMkcgedSGAI9AsoQro4EodVqcCZkfiYLPBfGooHS6K+YUMTGzv4glwkqi5ARlTtxrEv+pyuTYKTNOA67Nh7atBv+RBwejvrv2TxuKVGgLUXybMDBJxQpT8da2apAs9tqUr/A0qBFRRYEfK80YTpDICDzZnAn8grBEq9LNQZBvGX5FwP2JhsgVOq8oUrDAYde4T09OefwgnsOQ6huKaSp40n1GE+6ZHJJaEQeAZcXDYLgR2mw1bCbBBhcdG2cP0kuAzZiuDQ4rS3PvVsLBqkyCtOm2p9xkkuFkGTCiIScm7XjC+/g9GTdx7FkZFlyKbgw0mA+hZHRhQc1V6Noxj1/hsLyslb+EN6LomTUgnZCUMesZWpJ69xGEmnkqc2oyGMzSt5sbr6yrAipVXcr6kW9YHbISTWmk8kkmmx5s3OjSSfsydn2tl734u3bzduzKifpE3NuXUWDS9iONr1LsCWX1ZPo0hzqSqXCTGc6FBVl2sCVEJlMIWjJSyzJhbXwxYPvc3XUuNESgyXm3cJHVGhk0qy3frSAh9eZG53fW6carWoTZOKO66WmTwn27HN1C+TE0kClbRwKBViUNGXOjHAo6uVmPqiP17thMfZzWQ35HsGoUnV9xkj9atjkZNfW/akagBvB0fXNrl968N+L8C7q5IAMXxZZNwDS31DVek41B328CAupMm2i8Lpjbla92SKMIUvnKQpWARPMspsBkbbvbumls1+r3TyDJezC3t4etFfa6/8bGQq1HNwHlf4jaLOGZnCM93y9iRuDcv1lKcAQtUZ4fbMMBWvNY+ijqwzpF+TWHqy0X5ScUyyTkvju/Uvvcx0t3BjukH/HTL3niIFVaYNX7r8EletzXcA7NFPKnKlv3aEvBm9OF42vMEI/XyzbYMkraxHVH5TXHTvRZl4pG3Monqn2KoOx3X3XP0/4taDNtLuvcDIXulFdw8hD6yegzXlc</source>
  </file>
  <file path="Header/Consumer/ParameterConsumer.php" generated-path="Header.Consumer.ParameterConsumer.html" hash="24db1671a0d7f0c3fece6b16691f83b9" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <namespace-alias name="SplitParameterToken">\ZBateson\MailMimeParser\Header\Part\SplitParameterToken</namespace-alias>
    <namespace-alias name="ArrayObject">\ArrayObject</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="25" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>ParameterConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer</full_name>
      <docblock line="25">
        <description>Reads headers separated into parameters consisting of a main value, and
subsequent name/value pairs - for example text/html; charset=utf-8.</description>
        <long-description>A ParameterConsumer's parts are separated by a semi-colon.  Its name/value
pairs are separated with an '=' character.

Parts may be mime-encoded entities.  Additionally, a value can be quoted and
comments may exist.</long-description>
        <tag name="author" line="25" description="Zaahid Bateson"/>
        <tag name="package" line="25" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="32" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::getTokenSeparators()</full_name>
        <docblock line="32">
          <description>Returns semi-colon and equals char as token separators.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="32" description="" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="46" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::getPartForToken()</full_name>
        <docblock line="46">
          <description>Creates and returns a \ZBateson\MailMimeParser\Header\Part\Token out of
the passed string token and returns it, unless the token is an escaped
literal, in which case a LiteralPart is returned.</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="46" description="" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="46" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="65" package="MailMimeParser">
        <name>addToSplitPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::addToSplitPart()</full_name>
        <docblock line="65">
          <description>Adds the passed parameter with the given name and value to a
SplitParameterToken, at the passed index. If one with the given name
doesn't exist, it is created.</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="\ArrayObject" variable="$splitParts">
            <type>\ArrayObject</type>
          </tag>
          <tag name="param" line="65" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="65" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="65" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="65" description="" type="boolean" variable="$isEncoded">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$splitParts</name>
          <default></default>
          <type>\ArrayObject</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isEncoded</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="91" package="MailMimeParser">
        <name>getPartFor</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::getPartFor()</full_name>
        <docblock line="91">
          <description>Instantiates and returns either a MimeLiteralPart if $strName is empty,
a SplitParameterToken if the parameter is a split parameter and is the
first in a series, null if it's a split parameter but is not the first
part in its series, or a ParameterPart is returned otherwise.</description>
          <long-description>If the part is a SplitParameterToken, it's added to the passed
$splitParts as well with its name as a key.</long-description>
          <tag name="param" line="91" description="" type="string" variable="$strName">
            <type>string</type>
          </tag>
          <tag name="param" line="91" description="" type="string" variable="$strValue">
            <type>string</type>
          </tag>
          <tag name="param" line="91" description="" type="\ArrayObject" variable="$splitParts">
            <type>\ArrayObject</type>
          </tag>
          <tag name="return" line="91" description="|SplitParameterToken|\ZBateson\MailMimeParser\Header\Part\ParameterPart" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$strName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$strValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$splitParts</name>
          <default></default>
          <type>\ArrayObject</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="122" package="MailMimeParser">
        <name>processTokenPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::processTokenPart()</full_name>
        <docblock line="122">
          <description>Handles parameter separator tokens during final processing.</description>
          <long-description>If the end token is found, a new HeaderPart is assigned to the passed
$combined array.  If an '=' character is found, $strCat is assigned to
$strName and emptied.

Returns true if the token was processed, and false otherwise.</long-description>
          <tag name="param" line="122" description="" type="string" variable="$tokenValue">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="" type="array" variable="$combined">
            <type>array</type>
          </tag>
          <tag name="param" line="122" description="" type="string" variable="$strName">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="" type="string" variable="$strCat">
            <type>string</type>
          </tag>
          <tag name="return" line="122" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokenValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$combined</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$splitParts</name>
          <default></default>
          <type>\ArrayObject</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strCat</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="152" package="MailMimeParser">
        <name>finalizeParameterParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::finalizeParameterParts()</full_name>
        <docblock line="152">
          <description>Loops over parts in the passed array, creating ParameterParts out of any
parsed SplitParameterTokens, replacing them in the array.</description>
          <long-description>The method then calls filterIgnoreSpaces to filter out empty elements in
the combined array and returns an array.</long-description>
          <tag name="param" line="152" description="" type="\ArrayObject" variable="$combined">
            <type>\ArrayObject</type>
          </tag>
          <tag name="return" line="152" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$combined</name>
          <default></default>
          <type>\ArrayObject</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="173" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::processParts()</full_name>
        <docblock line="173">
          <description>Post processing involves creating Part\LiteralPart or Part\ParameterPart
objects out of created Token and LiteralParts.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="173" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="173" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="122" code="PPC:ERR-50014">Name of argument $splitParts does not match with the DocBlock's name $strName in processTokenPart()</error>
      <error line="122" code="PPC:ERR-50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $splitParts in processTokenPart()</error>
      <error line="122" code="PPC:ERR-50014">Name of argument $strName does not match with the DocBlock's name $strCat in processTokenPart()</error>
      <error line="122" code="PPC:ERR-50015">Argument $strCat is missing from the Docblock of processTokenPart</error>
    </parse_markers>
    <source>eJylWG1v2zYQ/p5fcQWMWvaUGNu+DPOcvmTrGqDdiiXYh8buwEi0zVUWVZFK4i3pb98dSUnUW5J2Blo7Inmvzz131E/Psm12MJtOD2AK51uhYC0SDvidsVyDXIPecnj/kmmuZLp8y0TyVuz4O5YrnkOWy795pI/wMJ1/noiIp4rDVuvsx9lMZviXLPKIH8l8M3Oranap4kP3xxGqh5dnP+Px2UHKdlxlLBpUuHzNWYxfJzJVxY7n84ODQj24G//Sy3P5kafzR28/yxKh8RdapHnuHX6R52z/+yW5jdpd4P7Akwq25rwCxTF2qCIGkWpJgbRSFERot1BapBuKLIMdEylcsaTgIbA0JlGquFT8U8FTDRSOmVlFGQKPH8Ja5sBv2C7DHGl+o2dbvUvmEG3JA70o9PrwB8oG0L8XUDlQBmxs86qA5dyz83KPxii+E4eRTGR6BHCKe2r9JM2a0Dx3LfQWDYfxYmxsYBHqqvS/M5p2bA+XHHYY50OeRjLGc+id0IIrVPQijvGnTFmS7DEINhoQoVA89KmQpMaFJpK7HZ60IvkNBrJS9ZwVeouxec/YVsTgEmxAFSVMqW4kUIDmKWbtV57yXETl84N/DwA/JrH0oeTqIk+VFx8yCDBJLFHGbWAKNEGkDI3M1VF5vPx+nhs5oHSO+b9Yuecz842FpBFR6Ou6SCOKB2y4NrA7q0QGE7PXGkgfJ/FiPB+HlIPV3Czdmf/bbpzknKJibM+dSwyWj64dkAXxQSmOaCHDyKLJ1iMXAV+80CEUacIx/rTdbhBkAnAVsYzHpTQsNp6zJMSKgeutiLaIACw2Bm/sAplBJ61kHneja6qsNGVkVLXWLqVMYCSUE9nOy6MiYX/Tz0ekj7a9kpY8AmtS6BnQzqZYQ+CteiterkcaOfrwmIr4FVabzPeHxym/9sLkNE3m1fG7NmAGhPiGTu6DEtas8gFQMZwlBFrZiCvMNTGIQYStaiRDVsroIVgsf+2LFWnMb47gdA0y5X2iS1mx5Coda8sJiCEDlcjgfRApHo/DSDljtBrAk6+tteQIsrGGvI+JJvN7MMgR/pjnXywXtnAkrtDoGkUsjs9lGSodDBgdWgNDZ0zodIeemjbYRggFWEBaJMm8gcAnAmOPIKqlX6Cju8BomKwmbVw6QQOQ6smykzRvSvHUmfUVyUTRfSjubj48xkBZ8FcRKD0vo+FpLMugkt8P89NUaYadqkObHKGIYGdALNFgqDUap/PfCPYIQb7L9D4sxbE+zNMRC/myhIgfwXjoPSTtwtRcKW2N3VgTXVLjzrGXhiaZJE/ocZ+My8LURSptkRkBpTQz7KEwoVUlTpKHlbVtBgZJMbgWOMK1K+y0cklbb3pr3VoZ0ziAvFCXfSnFyzL112uOzhkOEG40oacMPvL9Q83AZWR49c+eEn6IH76ka7RgUsooP7c98bl9lOBGdu5nkrofBWVAwtr5cMjf3iZVQnyxWMB4/GWdqhWLoDLBb1jAE8VJVZbzzV87pqNtMP78YammwcWH5XT1zWQ5DZbxdBIsp5Nno8/jEDynzH6uOlTVNKxFrY2dLZYJu4tOx8W3q57FKqrD577rORcYvgi8PRO4vYUnrcffIwk3zn5Fq28Apw8QVf9vk+JrpCKc6DxeqWZeO+ApiAtTWWuBQz2NRhEOgPhgiCdwCq9Hw7Us0pjuAWgk1NOW4RGUskkH6QJvB5eClhkhma4w687VxNNAnp6wtuCafBzEzaSP8Rc9k0R5MdA5zjaOx60j10hNznFqQCRkjZcFfg9p9g2wfbxkvKu9/VrKQ9fbVOZmk/tpxHllOKpZN57JNbQbrFLaPLDcV29PK2g2H5XmT9rUVBth2WneoafKjItVPbcMsiMqCht82J5bSipEIuwuEcC6Ky7eBJs+zuv4sOj6UKt1av6f7jZrGLDeNxq9kTJTIK/oHZDp0Dg7eJO7AWloR3BCXINulLtJYlnsvfmDzvU0QhxEcp4lLDJXzC3flapsmbfL6BxX8PBWxrQpxWtkkph3WijvdJPKnJ/RCya6r7unxhpDsZgBbl8wiOruSJqazNK8QKcDdvRNEZ2addGuae5idWvE3V+DhljFP7wZ1aBXV7t/rzECDK/XgceXCkY4RcHiGEaUzDbYDCbdgEgDccQxdz2Zap8zQKyKjVSshi8KzYbUkWNk0RlTqgT9YNJtoM1dpoIe3vaGpZuCbXgw6WxsFfvdcME4r3ycxRZodaCNNpOkE5ntg8m9V+x3Eqf7undi6K9kcsVVo6b00r98YAMeHApBGlxUpecux3BevbPxJPW8u7Jo9oFqI9iZhx/EcudFiXPSYth1t6xv9KwRuzDTgYf3wMuUf294YGMfSQ4wujXp4h4E28stNZx5T7Vl5T2mt8RGmaP7LnznD9eiTeLTp5Vl7R7txIdeC269Pmj3vM7sTJ9I4mU49RtHsxb8oB4tSqceHk4H+KzmsLJQ7g7+A1ocemA=</source>
  </file>
  <file path="Header/GenericHeader.php" generated-path="Header.GenericHeader.html" hash="bbb6cc0800b88818cea59bfcb7397a52" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>GenericHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\GenericHeader</full_name>
      <docblock line="19">
        <description>Reads the header using GenericConsumer.</description>
        <long-description>Header's may contain mime-encoded parts, quoted parts, and comments.
GenericConsumer returns a single part value.</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="27" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\GenericHeader::getConsumer()</full_name>
        <docblock line="27">
          <description>Returns a GenericConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="27" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="27" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyNUk1LxDAQvedXzEHQXdztXUXXD9CLIOpJ9jKms9tIk9RMsijif3eatqtWRAMlnfS9N/Nec3TSVI0qplMFU7ivDMPK1ASyNxgi+BXEiuDhDCOxd8trNPW1sXSDgSlAE/wT6TgXcstf1EaTY4IqxuagKHwjlU9B09yHddF/5eKRy1lfzKU9nN1dCL1QDi1xg/rXhssrwpLCoVKJ/wItz73jZL+83FHYSFdh935vBcjZYJUpkNi4NVySo2D0QGvdQft0ursMFl9BexfROLDSd0ZO+5LKnBnvw3Py8bNCVwraWnKRs9ZIHwLFFBwDQtte0s/Rb7BOtE0WU6x8gAfEypTQG8+h6RqZB81uRKCXSE6snT5yDKhjd6zeFMjK5tvVBjB0/um5Qwz7QmZCC6MoYUd/P9jCO0+w/O8/GiYdDnqhIu9yzaJcM4l0lZyOxjtY0xa699dQkyzSmW9XP9sYNjsW0VEOe5PDTHtX7+oDINMQ4A==</source>
  </file>
  <file path="MailMimeParser.php" generated-path="MailMimeParser.html" hash="5ba823f52e2dc66a0073ea94b2285267" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Psr7">\GuzzleHttp\Psr7</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser" line="23" package="MailMimeParser">
      <extends/>
      <name>MailMimeParser</name>
      <full_name>\ZBateson\MailMimeParser\MailMimeParser</full_name>
      <docblock line="23">
        <description>Parses a MIME message into a \ZBateson\MailMimeParser\Message object.</description>
        <long-description>To invoke, call parse on a MailMimeParser object.

$handle = fopen('path/to/file.txt');
$parser = new MailMimeParser();
$parser-&gt;parse($handle);
fclose($handle);</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser" line="28" package="MailMimeParser">
        <name>DEFAULT_CHARSET</name>
        <full_name>\ZBateson\MailMimeParser\MailMimeParser::DEFAULT_CHARSET</full_name>
        <value>'UTF-8'</value>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="28" description="&lt;p&gt;defines the default charset used by MessagePart.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="33" package="MailMimeParser">
        <name>$di</name>
        <full_name>\ZBateson\MailMimeParser\MailMimeParser::di</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;dependency injection container&lt;/p&gt;" type="\ZBateson\MailMimeParser\Container" variable="">
            <type>\ZBateson\MailMimeParser\Container</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="38" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\MailMimeParser::__construct()</full_name>
        <docblock line="38">
          <description>Sets up the parser.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$di</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Container</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="59" package="MailMimeParser">
        <name>parse</name>
        <full_name>\ZBateson\MailMimeParser\MailMimeParser::parse()</full_name>
        <docblock line="59">
          <description>Parses the passed stream handle into a ZBateson\MailMimeParser\Message
object and returns it.</description>
          <long-description>Internally, the message is first copied to a temp stream (with php://temp
which may keep it in memory or write it to disk) and its stream is used.
That way if the message is too large to hold in memory it can be written
to a temporary file if need be.</long-description>
          <tag name="param" line="59" description="&lt;p&gt;the resource handle to the input&#10;       stream of the mime message, or a string containing a mime message&lt;/p&gt;" type="resource|string" variable="$handleOrString">
            <type>resource</type>
            <type>string</type>
          </tag>
          <tag name="return" line="59" description="" type="\ZBateson\MailMimeParser\Message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handleOrString</name>
          <default></default>
          <type>resource|string</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="38" code="PPC:ERR-50015">Argument $di is missing from the Docblock of __construct</error>
    </parse_markers>
    <source>eJyFVW1v2jAQ/p5fcR+QCB2Qj5vWwfq+VhpaNeiXCgkZx6m9BjuynTK68d93dpwAabtaQo7tu+fuuTe+fC14ESVHRxEcwYwLA5nIGeBeEG1BZWA5g/szYplRcj4hIp+IFbsl2jANhVa/GLVDVHb6J7mgTBoG3Nric5KoAk+q1JQNlX5IwqtJliYdhMMQzcPZ9ALVk0iSFTMFoW8aPI6iEuG/lc/PObtGI/Nboz/ibSDgpQwQmNxMLgHBDHlAMtIqvJu/ATqfBDm13CczU6j4pB5ZHyjJcxcPNK2kQz+Mwk4P3K/DiUwxhiPIXADibkEsT6xKXGSH9rft9o69XFGpj0CydQszPhAZjP0eB+TqLaO5at/5JJDScqXhnhAuUgicfXxpToxpWYr+RIDLB9AtBHgiGozVQj5AyjIhMaKuCPCblLkFyp2iBcxECssNhPAhnIuBx0j8TpU0Fi4ur07vvs8W59enP6eXM6TbvZtdDT51MW2vWX4zTedKWoLeaPQE45oySTeYIhd7gWmh9fOBD1ihFgXQ004qjv1V2+qUWQNl4TlW8T6kUZRLLFbISlkZWiw8MV1SG+98QniXyTLPe16rCqtbIoPYv47C+96bW0ETa6BB8+kPa9t8dSz252DsxRs22xdRDE1Q0TEuSegsIysIdRna4Z1uqNGq4gZUBc1sqaUB0eQZ6v1GWqYltsmm7w03refmicYqoKoQ6Im3bNmqqH2K18JywCGA48Ld14BrLiiHFdnAI2MFmkS3EXWl9AawuNdaWOZuETAV5rHnHRSYyICLhl19No7OOLGwRjiRtR20SkFONB4QjKs83TOFFiiRsGTeomWyxmuIKE1QrhqaGWbR9QR7EZ8TLCz0SrNqHP4N7RWa94eeVmfnWS1TpwstuWshi9LWcGEFrmFIrzCHNa++CxKpuzi0hvskB2KNe1Vq3x2R/+2LgxlVU2o3Qyf4PAI3uefVaZEp/UJx1wEdLJ7NKxr1eG2Kp9uHrv7Q7fXCaHHLKzmAhVWLSjkOTvQr5LalwViztZBpvA+TJJAq2cVycFPX1cWaM9nQeXAzJGV4UhuWttlizzJLKN9v6930b9p6MMYhsJum5nAOhBS1/xL2GGyjbfQPrDxpOg==</source>
  </file>
  <package name="MailMimeParser" full_name="MailMimeParser"/>
  <package name="global" full_name="global"/>
  <namespace name="ZBateson" full_name="ZBateson">
    <namespace name="MailMimeParser" full_name="ZBateson\MailMimeParser">
      <namespace name="Header" full_name="ZBateson\MailMimeParser\Header">
        <namespace name="Consumer" full_name="ZBateson\MailMimeParser\Header\Consumer"/>
        <namespace name="Part" full_name="ZBateson\MailMimeParser\Header\Part"/>
      </namespace>
      <namespace name="Message" full_name="ZBateson\MailMimeParser\Message">
        <namespace name="Helper" full_name="ZBateson\MailMimeParser\Message\Helper"/>
        <namespace name="Part" full_name="ZBateson\MailMimeParser\Message\Part">
          <namespace name="Factory" full_name="ZBateson\MailMimeParser\Message\Part\Factory"/>
        </namespace>
      </namespace>
      <namespace name="Stream" full_name="ZBateson\MailMimeParser\Stream"/>
    </namespace>
  </namespace>
  <deprecated count="0"/>
</project>
