<?xml version="1.0" encoding="utf-8"?>
<project title="MailMimeParser 0.4" version="2.8.5">
  <partials/>
  <file path="Message.php" generated-path="Message.html" hash="61edf58bf08d1573ea53b5dab69c5ec1" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\MimePart</namespace-alias>
    <namespace-alias name="MimePartFactory">\ZBateson\MailMimeParser\Message\MimePartFactory</namespace-alias>
    <namespace-alias name="MessageWriter">\ZBateson\MailMimeParser\Message\Writer\MessageWriter</namespace-alias>
    <namespace-alias name="PartFilter">\ZBateson\MailMimeParser\Message\PartFilter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser" line="23" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\MimePart</extends>
      <name>Message</name>
      <full_name>\ZBateson\MailMimeParser\Message</full_name>
      <docblock line="23">
        <description>A parsed mime message with optional mime parts depending on its type.</description>
        <long-description>A mime message may have any number of mime parts, and each part may have any
number of sub-parts, etc...</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\MimePart" refers="\ZBateson\MailMimeParser\Message\MimePart" link="/classes/ZBateson.MailMimeParser.Message.MimePart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="33" package="MailMimeParser">
        <name>$objectId</name>
        <full_name>\ZBateson\MailMimeParser\Message::objectId</full_name>
        <default></default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;unique ID used to identify the object to&#10;$this-&gt;partStreamRegistry when registering the stream.  The ID is&#10;used for opening stream parts with the mmp-mime-message &quot;protocol&quot;.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
          <tag name="see" line="33" description="" link="\ZBateson\MailMimeParser\SimpleDi::registerStreamExtensions"/>
          <tag name="see" line="33" description="" link="\ZBateson\MailMimeParser\Stream\PartStream::stream_open"/>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="39" package="MailMimeParser">
        <name>$mimePartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message::mimePartFactory</full_name>
        <default></default>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="39" description="&lt;p&gt;a MimePartFactory to create&#10;parts for attachments/content&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="47" package="MailMimeParser">
        <name>$messageWriter</name>
        <full_name>\ZBateson\MailMimeParser\Message::messageWriter</full_name>
        <default>null</default>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="47" description="&lt;p&gt;the part&#10;writer for this Message.  The same object is assigned to $partWriter&#10;but as an AbstractWriter -- not really needed in PHP but helps with&#10;auto-complete and code analyzers.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Writer\MessageWriter" variable="">
            <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriter</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="30" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headerFactory</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the HeaderFactory&#10;     object used for created headers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="36" package="MailMimeParser">
        <name>$headers</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headers</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;array of header&#10;objects&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="41" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parent</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="46" package="MailMimeParser">
        <name>$handle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::handle</full_name>
        <default></default>
        <docblock line="46">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="46" description="&lt;p&gt;the content's resource handle&lt;/p&gt;" type="resource" variable="">
            <type>resource</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="51" package="MailMimeParser">
        <name>$originalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::originalStreamHandle</full_name>
        <default></default>
        <docblock line="51">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="57" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parts</full_name>
        <default>array()</default>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="57" description="&lt;p&gt;array of parts in this&#10;     message&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="63" package="MailMimeParser">
        <name>$partWriter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::partWriter</full_name>
        <default>null</default>
        <docblock line="63">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="63" description="&lt;p&gt;the part&#10;     writer for this MimePart&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser" line="56" package="MailMimeParser">
        <name>from</name>
        <full_name>\ZBateson\MailMimeParser\Message::from()</full_name>
        <docblock line="56">
          <description>Convenience method to parse a handle or string into a Message without
requiring including MailMimeParser, instantiating it, and calling parse.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="&lt;p&gt;the resource handle to the input&#10;       stream of the mime message, or a string containing a mime message&lt;/p&gt;" type="resource|string" variable="$handleOrString">
            <type>resource</type>
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handleOrString</name>
          <default></default>
          <type>resource|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="69" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message::__construct()</full_name>
        <docblock line="69">
          <description>Constructs a Message.</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="69" description="" type="\ZBateson\MailMimeParser\Message\Writer\MessageWriter" variable="$messageWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriter</type>
          </tag>
          <tag name="param" line="69" description="" type="\ZBateson\MailMimeParser\Message\MimePartFactory" variable="$mimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\MimePart::__construct()" refers="\ZBateson\MailMimeParser\Message\MimePart::__construct()" link="/classes/ZBateson.MailMimeParser.Message.MimePart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageWriter</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimePartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="86" package="MailMimeParser">
        <name>getObjectId</name>
        <full_name>\ZBateson\MailMimeParser\Message::getObjectId()</full_name>
        <docblock line="86">
          <description>Returns the unique object ID registered with the PartStreamRegistry
service object.</description>
          <long-description></long-description>
          <tag name="return" line="86" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="97" package="MailMimeParser">
        <name>getTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextPart()</full_name>
        <docblock line="97">
          <description>Returns the text/plain part at the given index (or null if not found.)</description>
          <long-description></long-description>
          <tag name="param" line="97" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="97" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="110" package="MailMimeParser">
        <name>getTextPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextPartCount()</full_name>
        <docblock line="110">
          <description>Returns the number of text/plain parts in this message.</description>
          <long-description></long-description>
          <tag name="return" line="110" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="121" package="MailMimeParser">
        <name>getHtmlPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlPart()</full_name>
        <docblock line="121">
          <description>Returns the text/html part at the given index (or null if not found.)</description>
          <long-description></long-description>
          <tag name="param" line="121" description="" type="" variable="$index"/>
          <tag name="return" line="121" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="134" package="MailMimeParser">
        <name>getHtmlPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlPartCount()</full_name>
        <docblock line="134">
          <description>Returns the number of text/html parts in this message.</description>
          <long-description></long-description>
          <tag name="return" line="134" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="149" package="MailMimeParser">
        <name>getContentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getContentPart()</full_name>
        <docblock line="149">
          <description>Returns the content MimePart, which could be a text/plain part,
text/html part, multipart/alternative part, or null if none is set.</description>
          <long-description>This function is deprecated in favour of getTextPart/getHtmlPart and
getPartByMimeType.</long-description>
          <tag name="deprecated" line="149" description="since version 0.4.2"/>
          <tag name="return" line="149" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="167" package="MailMimeParser">
        <name>getHandleForStringOrHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHandleForStringOrHandle()</full_name>
        <docblock line="167">
          <description>Returns an open resource handle for the passed string or resource handle.</description>
          <long-description>For a string, creates a php://temp stream and returns it.</long-description>
          <tag name="param" line="167" description="" type="resource|string" variable="$stringOrHandle">
            <type>resource</type>
            <type>string</type>
          </tag>
          <tag name="return" line="167" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stringOrHandle</name>
          <default></default>
          <type>resource|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="186" package="MailMimeParser">
        <name>getUniqueBoundary</name>
        <full_name>\ZBateson\MailMimeParser\Message::getUniqueBoundary()</full_name>
        <docblock line="186">
          <description>Creates and returns a unique boundary.</description>
          <long-description></long-description>
          <tag name="param" line="186" description="&lt;p&gt;first 3 characters of a multipart type are used,&#10;     e.g. REL for relative or ALT for alternative&lt;/p&gt;" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="186" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="199" package="MailMimeParser">
        <name>setMimeHeaderBoundaryOnPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::setMimeHeaderBoundaryOnPart()</full_name>
        <docblock line="199">
          <description>Creates a unique mime boundary and assigns it to the passed part's
Content-Type header with the passed mime type.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="199" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="215" package="MailMimeParser">
        <name>setMessageAsAlternative</name>
        <full_name>\ZBateson\MailMimeParser\Message::setMessageAsAlternative()</full_name>
        <docblock line="215">
          <description>Sets this message to be a multipart/alternative message, making space for
a second content part.</description>
          <long-description>Creates a content part and assigns the content stream from the message to
that newly created part.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="243" package="MailMimeParser">
        <name>getContentPartContainerFromAlternative</name>
        <full_name>\ZBateson\MailMimeParser\Message::getContentPartContainerFromAlternative()</full_name>
        <docblock line="243">
          <description>Returns the direct child of $alternativePart containing a part of
$mimeType.</description>
          <long-description>Used for alternative mime types that have a multipart/mixed or
multipart/related child containing a content part of $mimeType, where
the whole mixed/related part should be removed.</long-description>
          <tag name="param" line="243" description="&lt;p&gt;the content-type to find below $alternativePart&lt;/p&gt;" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="243" description="&lt;p&gt;The multipart/alternative part to look&#10;under&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$alternativePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="243" description="false if a part is not found" type="boolean|\ZBateson\MailMimeParser\Message\MimePart">
            <type>boolean</type>
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alternativePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="265" package="MailMimeParser">
        <name>moveAllPartsAsAttachmentsExcept</name>
        <full_name>\ZBateson\MailMimeParser\Message::moveAllPartsAsAttachmentsExcept()</full_name>
        <docblock line="265">
          <description>Moves all parts under $from into this message except those with a
content-type equal to $exceptMimeType.  If the message is not a
multipart/mixed message, it is set to multipart/mixed first.</description>
          <long-description></long-description>
          <tag name="param" line="265" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$from">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="265" description="" type="string" variable="$exceptMimeType">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$exceptMimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="297" package="MailMimeParser">
        <name>removeAllContentPartsFromAlternative</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAllContentPartsFromAlternative()</full_name>
        <docblock line="297">
          <description>Removes all parts of $mimeType from $alternativePart.</description>
          <long-description>If $alternativePart contains a multipart/mixed or multipart/relative part
with other parts of different content-types, the multipart part is
removed, and parts of different content-types can optionally be moved to
the main message part.</long-description>
          <tag name="param" line="297" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="297" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$alternativePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="297" description="" type="boolean" variable="$keepOtherContent">
            <type>boolean</type>
          </tag>
          <tag name="return" line="297" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alternativePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$keepOtherContent</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="336" package="MailMimeParser">
        <name>removeAllContentPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAllContentPartsByMimeType()</full_name>
        <docblock line="336">
          <description>Removes the content part of the message with the passed mime type.  If
there is a remaining content part and it is an alternative part of the
main message, the content part is moved to the message part.</description>
          <long-description>If the content part is part of an alternative part beneath the message,
the alternative part is replaced by the remaining content part,
optionally keeping other parts if $keepOtherContent is set to true.</long-description>
          <tag name="param" line="336" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="" type="boolean" variable="$keepOtherContent">
            <type>boolean</type>
          </tag>
          <tag name="return" line="336" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$keepOtherContent</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="354" package="MailMimeParser">
        <name>removePartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message::removePartByMimeType()</full_name>
        <docblock line="354">
          <description>Removes the 'inline' part with the passed contentType, at the given index
defaulting to the first</description>
          <long-description></long-description>
          <tag name="param" line="354" description="" type="string" variable="$contentType">
            <type>string</type>
          </tag>
          <tag name="param" line="354" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="354" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="378" package="MailMimeParser">
        <name>createAlternativeContentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::createAlternativeContentPart()</full_name>
        <docblock line="378">
          <description>Creates a new mime part as a multipart/alternative and assigns the passed
$contentPart as a part below it before returning it.</description>
          <long-description></long-description>
          <tag name="param" line="378" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$contentPart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="378" description="the alternative part" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$contentPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="397" package="MailMimeParser">
        <name>movePartContentAndChildrenToPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::movePartContentAndChildrenToPart()</full_name>
        <docblock line="397">
          <description>Copies type headers (Content-Type, Content-Disposition,
Content-Transfer-Encoding) from the $from MimePart to $to.  Attaches the
content resource handle of $from to $to, and loops over child parts,
removing them from $from and adding them to $to.</description>
          <long-description></long-description>
          <tag name="param" line="397" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$from">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="397" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$to">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$to</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="419" package="MailMimeParser">
        <name>replacePart</name>
        <full_name>\ZBateson\MailMimeParser\Message::replacePart()</full_name>
        <docblock line="419">
          <description>Replaces the $part MimePart with $replacement.</description>
          <long-description>Essentially removes $part from its parent, and adds $replacement in its
same position.  If $part is this Message, its type headers are moved from
this message to $replacement, the content resource is moved, and children
are assigned to $replacement.</long-description>
          <tag name="param" line="419" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="419" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$replacement">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$replacement</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="440" package="MailMimeParser">
        <name>copyTypeHeadersFromPartToPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::copyTypeHeadersFromPartToPart()</full_name>
        <docblock line="440">
          <description>Copies Content-Type, Content-Disposition and Content-Transfer-Encoding
headers from the $from header into the $to header. If the Content-Type
header isn't defined in $from, defaults to text/plain and
quoted-printable.</description>
          <long-description></long-description>
          <tag name="param" line="440" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$from">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="440" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$to">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$from</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$to</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="467" package="MailMimeParser">
        <name>createNewContentPartFromPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::createNewContentPartFromPart()</full_name>
        <docblock line="467">
          <description>Creates a new content part from the passed part, allowing the part to be
used for something else (e.g. changing a non-mime message to a multipart
mime message).</description>
          <long-description></long-description>
          <tag name="param" line="467" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="467" description="the newly-created MimePart" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="480" package="MailMimeParser">
        <name>setMessageAsMixed</name>
        <full_name>\ZBateson\MailMimeParser\Message::setMessageAsMixed()</full_name>
        <docblock line="480">
          <description>Creates a new part out of the current contentPart and sets the message's
type to be multipart/mixed.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="504" package="MailMimeParser">
        <name>makeSpaceForMultipartSignedMessage</name>
        <full_name>\ZBateson\MailMimeParser\Message::makeSpaceForMultipartSignedMessage()</full_name>
        <docblock line="504">
          <description>This function makes space by moving the main message part down one level.</description>
          <long-description>The content-type, content-disposition and content-transfer-encoding
headers are copied from this message to the newly created part, the
resource handle is moved and detached, any attachments and content parts
with parents set to this message get their parents set to the newly
created part.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="526" package="MailMimeParser">
        <name>createSignaturePart</name>
        <full_name>\ZBateson\MailMimeParser\Message::createSignaturePart()</full_name>
        <docblock line="526">
          <description>Creates and returns a new MimePart for the signature part of a
multipart/signed message</description>
          <long-description></long-description>
          <tag name="param" line="526" description="" type="string" variable="$body">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$body</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="548" package="MailMimeParser">
        <name>overwrite8bitContentEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Message::overwrite8bitContentEncoding()</full_name>
        <docblock line="548">
          <description>Loops over parts of this message and sets the content-transfer-encoding
header to quoted-printable for text/* mime parts, and to base64
otherwise for parts that are '8bit' encoded.</description>
          <long-description>Used for multipart/signed messages which doesn't support 8bit transfer
encodings.</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="570" package="MailMimeParser">
        <name>ensureHtmlPartFirstForSignedMessage</name>
        <full_name>\ZBateson\MailMimeParser\Message::ensureHtmlPartFirstForSignedMessage()</full_name>
        <docblock line="570">
          <description>Ensures a non-text part comes first in a signed multipart/alternative
message as some clients seem to prefer the first content part if the
client doesn't understand multipart/signed.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="592" package="MailMimeParser">
        <name>setAsMultipartSigned</name>
        <full_name>\ZBateson\MailMimeParser\Message::setAsMultipartSigned()</full_name>
        <docblock line="592">
          <description>Turns the message into a multipart/signed message, moving the actual
message into a child part, sets the content-type of the main message to
multipart/signed and adds a signature part as well.</description>
          <long-description></long-description>
          <tag name="param" line="592" description="&lt;p&gt;The Message Integrity Check algorithm being used&lt;/p&gt;" type="string" variable="$micalg">
            <type>string</type>
          </tag>
          <tag name="param" line="592" description="&lt;p&gt;The mime-type of the signature body&lt;/p&gt;" type="string" variable="$protocol">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$micalg</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$protocol</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="615" package="MailMimeParser">
        <name>getSignaturePart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getSignaturePart()</full_name>
        <docblock line="615">
          <description>Returns the signed part or null if not set.</description>
          <long-description></long-description>
          <tag name="return" line="615" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="650" package="MailMimeParser">
        <name>getOriginalMessageStringForSignatureVerification</name>
        <full_name>\ZBateson\MailMimeParser\Message::getOriginalMessageStringForSignatureVerification()</full_name>
        <docblock line="650">
          <description>Returns a string containing the original message's signed part, useful
for verifying the email.</description>
          <long-description>If the signed part of the message ends in a final empty line, the line is
removed as it's considered part of the signature's mime boundary.  From
RFC-3156:

Note: The accepted OpenPGP convention is for signed data to end
with a &lt;CR&gt;&lt;LF&gt; sequence.  Note that the &lt;CR&gt;&lt;LF&gt; sequence
immediately preceding a MIME boundary delimiter line is considered
to be part of the delimiter in [3], 5.1.  Thus, it is not part of
the signed data preceding the delimiter line.  An implementation
which elects to adhere to the OpenPGP convention has to make sure
it inserts a &lt;CR&gt;&lt;LF&gt; pair on the last line of the data to be
signed and transmitted (signed message and transmitted message
MUST be identical).

The additional line should be inserted by the signer -- for verification
purposes if it's missing, it would seem the content part would've been
signed without a last &lt;CR&gt;&lt;LF&gt;.</long-description>
          <tag name="return" line="650" description="or null if the message doesn't have any children, or the&#10;     child returns null for getOriginalStreamHandle" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="673" package="MailMimeParser">
        <name>enforceMime</name>
        <full_name>\ZBateson\MailMimeParser\Message::enforceMime()</full_name>
        <docblock line="673">
          <description>Enforces the message to be a mime message for a non-mime (e.g. uuencoded
or unspecified) message.  If the message has uuencoded attachments, sets
up the message as a multipart/mixed message and creates a content part.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="692" package="MailMimeParser">
        <name>createMultipartRelatedPartForInlineChildrenOf</name>
        <full_name>\ZBateson\MailMimeParser\Message::createMultipartRelatedPartForInlineChildrenOf()</full_name>
        <docblock line="692">
          <description>Creates a multipart/related part out of 'inline' children of $parent and
returns it.</description>
          <long-description></long-description>
          <tag name="param" line="692" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$parent">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="692" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parent</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="714" package="MailMimeParser">
        <name>findOtherContentPartFor</name>
        <full_name>\ZBateson\MailMimeParser\Message::findOtherContentPartFor()</full_name>
        <docblock line="714">
          <description>Finds an alternative inline part in the message and returns it if one
exists.</description>
          <long-description>If the passed $mimeType is text/plain, searches for a text/html part.
Otherwise searches for a text/plain part to return.</long-description>
          <tag name="param" line="714" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="714" description="or null if not found" type="\ZBateson\MailMimeParser\MimeType">
            <type>\ZBateson\MailMimeParser\MimeType</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="737" package="MailMimeParser">
        <name>createContentPartForMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message::createContentPartForMimeType()</full_name>
        <docblock line="737">
          <description>Creates a new content part for the passed mimeType and charset, making
space by creating a multipart/alternative if needed</description>
          <long-description></long-description>
          <tag name="param" line="737" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="737" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
          <tag name="return" line="737" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="767" package="MailMimeParser">
        <name>setContentPartForMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message::setContentPartForMimeType()</full_name>
        <docblock line="767">
          <description>Either creates a mime part or sets the existing mime part with the passed
mimeType to $strongOrHandle.</description>
          <long-description></long-description>
          <tag name="param" line="767" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="767" description="" type="string|resource" variable="$stringOrHandle">
            <type>string</type>
            <type>resource</type>
          </tag>
          <tag name="param" line="767" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stringOrHandle</name>
          <default></default>
          <type>string|resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="792" package="MailMimeParser">
        <name>setTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::setTextPart()</full_name>
        <docblock line="792">
          <description>Sets the text/plain part of the message to the passed $stringOrHandle,
either creating a new part if one doesn't exist for text/plain, or
assigning the value of $stringOrHandle to an existing text/plain part.</description>
          <long-description>The optional $charset parameter is the charset for saving to.
$stringOrHandle is expected to be in UTF-8 regardless of the target
charset.</long-description>
          <tag name="param" line="792" description="" type="string|resource" variable="$stringOrHandle">
            <type>string</type>
            <type>resource</type>
          </tag>
          <tag name="param" line="792" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stringOrHandle</name>
          <default></default>
          <type>string|resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>'UTF-8'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="809" package="MailMimeParser">
        <name>setHtmlPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::setHtmlPart()</full_name>
        <docblock line="809">
          <description>Sets the text/html part of the message to the passed $stringOrHandle,
either creating a new part if one doesn't exist for text/html, or
assigning the value of $stringOrHandle to an existing text/html part.</description>
          <long-description>The optional $charset parameter is the charset for saving to.
$stringOrHandle is expected to be in UTF-8 regardless of the target
charset.</long-description>
          <tag name="param" line="809" description="" type="string|resource" variable="$stringOrHandle">
            <type>string</type>
            <type>resource</type>
          </tag>
          <tag name="param" line="809" description="" type="string" variable="$charset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stringOrHandle</name>
          <default></default>
          <type>string|resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charset</name>
          <default>'UTF-8'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="820" package="MailMimeParser">
        <name>removeTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeTextPart()</full_name>
        <docblock line="820">
          <description>Removes the text/plain part of the message at the passed index if one
exists.  Returns true on success.</description>
          <long-description></long-description>
          <tag name="return" line="820" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="833" package="MailMimeParser">
        <name>removeAllTextParts</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAllTextParts()</full_name>
        <docblock line="833">
          <description>Removes all text/plain inline parts in this message, optionally keeping
other inline parts as attachments on the main message (defaults to
keeping them).</description>
          <long-description></long-description>
          <tag name="param" line="833" description="" type="boolean" variable="$keepOtherPartsAsAttachments">
            <type>boolean</type>
          </tag>
          <tag name="return" line="833" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$keepOtherPartsAsAttachments</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="844" package="MailMimeParser">
        <name>removeHtmlPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeHtmlPart()</full_name>
        <docblock line="844">
          <description>Removes the html part of the message if one exists.  Returns true on
success.</description>
          <long-description></long-description>
          <tag name="return" line="844" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="857" package="MailMimeParser">
        <name>removeAllHtmlParts</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAllHtmlParts()</full_name>
        <docblock line="857">
          <description>Removes all text/html inline parts in this message, optionally keeping
other inline parts as attachments on the main message (defaults to
keeping them).</description>
          <long-description></long-description>
          <tag name="param" line="857" description="" type="boolean" variable="$keepOtherPartsAsAttachments">
            <type>boolean</type>
          </tag>
          <tag name="return" line="857" description="true on success" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$keepOtherPartsAsAttachments</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="869" package="MailMimeParser">
        <name>getAttachmentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::getAttachmentPart()</full_name>
        <docblock line="869">
          <description>Returns the attachment part at the given 0-based index, or null if none
is set.</description>
          <long-description></long-description>
          <tag name="param" line="869" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="869" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="887" package="MailMimeParser">
        <name>getAllAttachmentParts</name>
        <full_name>\ZBateson\MailMimeParser\Message::getAllAttachmentParts()</full_name>
        <docblock line="887">
          <description>Returns all attachment parts.</description>
          <long-description>Attachments are any non-multipart, non-signature and non inline text or
html part (a text or html part with a Content-Disposition set to
'attachment' is considered an attachment).</long-description>
          <tag name="return" line="887" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="910" package="MailMimeParser">
        <name>getAttachmentCount</name>
        <full_name>\ZBateson\MailMimeParser\Message::getAttachmentCount()</full_name>
        <docblock line="910">
          <description>Returns the number of attachments available.</description>
          <long-description></long-description>
          <tag name="return" line="910" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="920" package="MailMimeParser">
        <name>removeAttachmentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::removeAttachmentPart()</full_name>
        <docblock line="920">
          <description>Removes the attachment with the given index</description>
          <long-description></long-description>
          <tag name="param" line="920" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="932" package="MailMimeParser">
        <name>createPartForAttachment</name>
        <full_name>\ZBateson\MailMimeParser\Message::createPartForAttachment()</full_name>
        <docblock line="932">
          <description>Creates and returns a MimePart for use with a new attachment part being
created.</description>
          <long-description></long-description>
          <tag name="return" line="932" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="955" package="MailMimeParser">
        <name>addAttachmentPart</name>
        <full_name>\ZBateson\MailMimeParser\Message::addAttachmentPart()</full_name>
        <docblock line="955">
          <description>Adds an attachment part for the passed raw data string or handle and
given parameters.</description>
          <long-description></long-description>
          <tag name="param" line="955" description="" type="string|\ZBateson\MailMimeParser\handle" variable="$stringOrHandle">
            <type>string</type>
            <type>\ZBateson\MailMimeParser\handle</type>
          </tag>
          <tag name="param" line="955" description="" type="\ZBateson\MailMimeParser\strubg" variable="$mimeType">
            <type>\ZBateson\MailMimeParser\strubg</type>
          </tag>
          <tag name="param" line="955" description="" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="955" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
          <tag name="return" line="955" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$stringOrHandle</name>
          <default></default>
          <type>string|\ZBateson\MailMimeParser\handle</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\strubg</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default>'attachment'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="980" package="MailMimeParser">
        <name>addAttachmentPartFromFile</name>
        <full_name>\ZBateson\MailMimeParser\Message::addAttachmentPartFromFile()</full_name>
        <docblock line="980">
          <description>Adds an attachment part using the passed file.</description>
          <long-description>Essentially creates a file stream and uses it.</long-description>
          <tag name="param" line="980" description="" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="param" line="980" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="param" line="980" description="" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="980" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
          <tag name="return" line="980" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default>'attachment'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1002" package="MailMimeParser">
        <name>getTextStream</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextStream()</full_name>
        <docblock line="1002">
          <description>Returns a resource handle where the 'inline' text/plain content at the
passed $index can be read or null if unavailable.</description>
          <long-description></long-description>
          <tag name="param" line="1002" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="1002" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1020" package="MailMimeParser">
        <name>getTextContent</name>
        <full_name>\ZBateson\MailMimeParser\Message::getTextContent()</full_name>
        <docblock line="1020">
          <description>Returns the content of the inline text/plain part at the given index.</description>
          <long-description>Reads the entire stream content into a string and returns it.  Returns
null if the message doesn't have an inline text part.</long-description>
          <tag name="param" line="1020" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="1020" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1035" package="MailMimeParser">
        <name>getHtmlStream</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlStream()</full_name>
        <docblock line="1035">
          <description>Returns a resource handle where the 'inline' text/html content at the
passed $index can be read or null if unavailable.</description>
          <long-description></long-description>
          <tag name="return" line="1035" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1053" package="MailMimeParser">
        <name>getHtmlContent</name>
        <full_name>\ZBateson\MailMimeParser\Message::getHtmlContent()</full_name>
        <docblock line="1053">
          <description>Returns the content of the inline text/html part at the given index.</description>
          <long-description>Reads the entire stream content into a string and returns it.  Returns
null if the message doesn't have an inline html part.</long-description>
          <tag name="param" line="1053" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="1053" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1068" package="MailMimeParser">
        <name>isMime</name>
        <full_name>\ZBateson\MailMimeParser\Message::isMime()</full_name>
        <docblock line="1068">
          <description>Returns true if either a Content-Type or Mime-Version header are defined
in this Message.</description>
          <long-description></long-description>
          <tag name="return" line="1068" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1080" package="MailMimeParser">
        <name>save</name>
        <full_name>\ZBateson\MailMimeParser\Message::save()</full_name>
        <docblock line="1080">
          <description>Saves the message as a MIME message to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="1080" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1091" package="MailMimeParser">
        <name>getSignableBody</name>
        <full_name>\ZBateson\MailMimeParser\Message::getSignableBody()</full_name>
        <docblock line="1091">
          <description>Returns the content part of a signed message for a signature to be
calculated on the message.</description>
          <long-description></long-description>
          <tag name="return" line="1091" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="1102" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Message::__toString()</full_name>
        <docblock line="1102">
          <description>Shortcut to call Message::save with a php://temp stream and return the
written email message as a string.</description>
          <long-description></long-description>
          <tag name="return" line="1102" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="71" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__construct()</full_name>
        <docblock line="71">
          <description>Sets up class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="$partWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partWriter</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="80" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__destruct()</full_name>
        <docblock line="80">
          <description>Closes the attached resource handle.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="99" package="MailMimeParser">
        <name>addPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::addPart()</full_name>
        <docblock line="99">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="99" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="99" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="118" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removePart()</full_name>
        <docblock line="118">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="118" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="118" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="138" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeAllParts()</full_name>
        <docblock line="138">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="157" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPart()</full_name>
        <docblock line="157">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MimePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="157" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="157" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="157" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="176" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllParts()</full_name>
        <docblock line="176">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="176" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="176" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="200" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartCount()</full_name>
        <docblock line="200">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="200" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="200" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="213" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChild()</full_name>
        <docblock line="213">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="213" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="213" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="213" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="230" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildParts()</full_name>
        <docblock line="230">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="230" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="230" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="244" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildCount()</full_name>
        <docblock line="244">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="244" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="244" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="255" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartByMimeType()</full_name>
        <docblock line="255">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="255" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="255" description="or null" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="267" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllPartsByMimeType()</full_name>
        <docblock line="267">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="267" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="278" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getCountOfPartsByMimeType()</full_name>
        <docblock line="278">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="278" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="278" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="288" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::hasContent()</full_name>
        <docblock line="288">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="288" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="301" package="MailMimeParser">
        <name>isMultiPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isMultiPart()</full_name>
        <docblock line="301">
          <description>Returns true if this part's mime type is multipart/*</description>
          <long-description></long-description>
          <tag name="return" line="301" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="316" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isTextPart()</full_name>
        <docblock line="316">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="316" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="335" package="MailMimeParser">
        <name>attachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachContentResourceHandle()</full_name>
        <docblock line="335">
          <description>Attaches the resource handle for the part's content.  The attached handle
is closed when the MimePart object is destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="335" description="" type="resource" variable="$contentHandle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$contentHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="353" package="MailMimeParser">
        <name>attachOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachOriginalStreamHandle()</full_name>
        <docblock line="353">
          <description>Attaches the resource handle representing the original stream that
created this part (including any sub-parts).  The attached handle is
closed when the MimePart object is destroyed.</description>
          <long-description>This stream is not modified or changed as the part is changed and is only
set during parsing in MessageParser.</long-description>
          <tag name="param" line="353" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="374" package="MailMimeParser">
        <name>getOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getOriginalStreamHandle()</full_name>
        <docblock line="374">
          <description>Returns a resource stream handle allowing a user to read the original
stream (including headers and child parts) that was used to create the
current part.</description>
          <long-description>The part contains an original stream handle only if it was explicitly set
by a call to MimePart::attachOriginalStreamHandle.  MailMimeParser only
sets this during the parsing phase in MessageParser, and is not otherwise
changed or updated.  New parts added below this part, changed headers,
etc... would not be reflected in the returned stream handle.</long-description>
          <tag name="return" line="374" description="the resource handle or null if not set" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="386" package="MailMimeParser">
        <name>detachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::detachContentResourceHandle()</full_name>
        <docblock line="386">
          <description>Detaches the content resource handle from this part but does not close
it.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="398" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setContent()</full_name>
        <docblock line="398">
          <description>Sets the content of the part to the passed string (effectively creates
a php://temp stream with the passed content and calls
attachContentResourceHandle with the opened stream).</description>
          <long-description></long-description>
          <tag name="param" line="398" description="" type="string" variable="$string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="432" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContentResourceHandle()</full_name>
        <docblock line="432">
          <description>Returns the resource stream handle for the part's content or null if not
set.  rewind() is called on the stream before returning it.</description>
          <long-description>The resource is automatically closed by MimePart's destructor and should
not be closed otherwise.

The returned resource handle is a stream with decoding filters appended
to it.  The attached filters are determined by looking at the part's
Content-Encoding header.  The following encodings are currently
supported:

- Quoted-Printable
- Base64
- X-UUEncode

UUEncode may be automatically attached for a message without a defined
Content-Encoding and Content-Type if it has a UUEncoded part to support
older non-mime message attachments.

In addition, character encoding for text streams is converted to UTF-8
if \ZBateson\MailMimeParser\Message\MimePart::isTextPart returns true.</long-description>
          <tag name="return" line="432" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="446" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContent()</full_name>
        <docblock line="446">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description></long-description>
          <tag name="return" line="446" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="465" package="MailMimeParser">
        <name>setRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setRawHeader()</full_name>
        <docblock line="465">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="465" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="465" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="475" package="MailMimeParser">
        <name>removeHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeHeader()</full_name>
        <docblock line="475">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="475" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="488" package="MailMimeParser">
        <name>getHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeader()</full_name>
        <docblock line="488">
          <description>Returns the AbstractHeader object for the header with the given $name</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="488" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="488" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="505" package="MailMimeParser">
        <name>getHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderValue()</full_name>
        <docblock line="505">
          <description>Returns the string value for the header with the given $name.</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="505" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="505" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="505" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="519" package="MailMimeParser">
        <name>getHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaders()</full_name>
        <docblock line="519">
          <description>Returns the full array of headers for this part.</description>
          <long-description></long-description>
          <tag name="return" line="519" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="538" package="MailMimeParser">
        <name>getHeaderParameter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderParameter()</full_name>
        <docblock line="538">
          <description>Returns a parameter of the header $header, given the parameter named
$param.</description>
          <long-description>Only headers of type
\ZBateson\MailMimeParser\Header\ParameterHeader have parameters.
Content-Type and Content-Disposition are examples of headers with
parameters. "Charset" is a common parameter of Content-Type.</long-description>
          <tag name="param" line="538" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$param">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="538" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="552" package="MailMimeParser">
        <name>setParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setParent()</full_name>
        <docblock line="552">
          <description>Sets the parent part.</description>
          <long-description></long-description>
          <tag name="param" line="552" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="562" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getParent()</full_name>
        <docblock line="562">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="562" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="354" code="PPC:ERR-50014">Name of argument $mimeType does not match with the DocBlock's name $contentType in removePartByMimeType()</error>
      <notice line="354" code="PPC:ERR-50013">Parameter $contentType could not be found in removePartByMimeType()</notice>
      <error line="820" code="PPC:ERR-50015">Argument $index is missing from the Docblock of removeTextPart</error>
      <error line="844" code="PPC:ERR-50015">Argument $index is missing from the Docblock of removeHtmlPart</error>
      <error line="1035" code="PPC:ERR-50015">Argument $index is missing from the Docblock of getHtmlStream</error>
    </parse_markers>
    <source>eJztPWtz29aV3/0rEI2npFJSUpK205Fjdx3H3ngmjj1+pDuNvB4IvBTRkAADgFLU2v99z+O+HwAoy2l3pvxgi8S9577O+5x78PVftqvtnePPP7+TfZ69XpVttizXIoP/t3nTZfUy61Yi+9s3eSfaujp7lpfrZ+VGvMibVjTZtqn/LoruCDpj//9al4WoWpGtum57enxcb+FbvWsKcVQ3F8fyaXt83i7m8ssRDJ998+pb6H58p8o3ot3mRXLAe3fu7Nrk07PvRL7Q/z3Ji65uru/19ngm2ja/EGfyp26/1nsN8dem7MxX/jauJw1Vrqm9OqqHeD6tWGQbaJ9tuGV2VXarrN52ZV3la36Ex9hmCwFHsSiri6yushJ+6K63Ao8tY2AOlE1+na3yS5Hl1XVW7TbncNKACAbcDJ4sMpEXK8YSuwPCM33a3flcdhFdcXSkMSXfdau6yf6W56tykckNICQo1nnbZnLtmfi1g4nDd7nld/55J4MP7QJ+ANRl3mRt1+DidlX5y05kT7/Ndrg3XZ2VC1F15fKa0Lg+R2yFn1Vf+tztAO3nD3Car7pG5JuX4qIEgNfZ1UpUWUPfBMFHIC21OcqAWmiksnWg0cBLWBoiP/bh9vIc6IAQymazneOGztWmHwAtdXVRrw+OFDy9wlaI7CyFJa/KzXYtvi1PT9VMeRWPcedawIR2JBzqRcjGf56e8tTf4UokjGP6H6cKGwkLvctb+nQBmBk7l+RoCVLK8sz/BQ6xgGl0wtlm3k7c57zrABE3cMztcVFXsOguNdmNT7f4/GbzjlEzHSxOzJnpFT/DqSKiKcyWCNQCy1N4CQ8B9cuLilH3LoJiyA7A810H7YDWsofncEKwFjn8fJ5VdQcIm6/XQLhCLABQWWUvvntBnVZivWUUdOABKdbzokYs6gRRdlEv8I98ff0P0bRHye10Fn8fyH69ju/po7q6BGoQVYFcBiifFkgcDE58BWOCzKk1GZcVPM01D8AZ1zu9q434ZVfKdsV6R1zNPaUZPGm7HAg/76hdxxyrgI3B7zRwSGbwMxBqI1hkvZeTucvTe45kpXiAaqOmDtPFn8tqu3MPP1PkLwWpzWdnuOJcrRlRNy+JY+ROM3f3d+cgOKEPLKzIlruqQF6fLZt6M/UmekgdmF0SmwOWg4ckrrzdmh7e040a0e2aitoSR2xFAJYbf0idMyxnVwBp6uNL7bMjpWGX7a9eU5fKXLzzm3rcw6f52G7qbXz3rlALmOot6ZvnTO0BfvpmOTOtxkzw0Do3WBewtNNTe3L+LNzBrPOUss2nVLd92Nyb4/0E67S6KDkAbVEIl4tpL6K8JDxriSak0JZMECSqkmPAY7S8fBFIZwUKMPgSdEnZP8Q2idJMZr3HfyG653IZU596FGG4q1VL7FteByrM8XYNtM3KUt7RzxclcETgGAvxazYFRoDMMyuXxMGX9a5aHB0mCAe4Y3aXOvprHC1th7bhNcwZ2015HDjUk/4NgT7UXj8m1KDOM+c3o8ueniLXeloBRxaPWG6/BqV0OjEbNjnUfUdjk9E9vY1vURSSBN6kGJNcU+lrEOkNegQn1Q0gi9wbbrrn+kcvmzqtus36lpDsEyPYdzDTfy2C4V7dAn7pLb9V9FLb88nQi1c/etFSr9bCawamUQnWX1Hv1ovsHJU4j9pmCoy7S7Nss1t3Jf55nOM0K1BkLoV85mBoRV6IVoQsnd0UartKsm4bUeQdq7vL/BKUMzwhi1CPrV0lXVABk9v3zTWu7TVbxd65WeDbElXYS9CKceiToz8cffnJaESeGqF9oMzZm3ffQwWzlukkut0TS0OAvZ460D67z5q8rYPYWGe1NVA+WPoA7LgzJS1MQj1zyq3NkH+R/U+t/ppXjEJXMIvQXg1UdLa/ENNatNCl1g0/eg2D439iaekzaYqiertdoYurE6BVSx0f0aqR0ygjmkjCvuD/nzff0fg+OqnmnhFWXsI0XJ5B3WG2rxx4Uw9+gEm4An4Ep7bEvZtOzNoms2zS/N5HmLJ9x1AD6D7WLMn8nVqjzPwVW7A/ZGINJqELQnohinp7/a6r3/FXf+CZvZDDGGI24grExTTeTLNU/bDXzFFIYB14rvTYc5SreXOdOn917BtJo9mybNou+yorVjka88BbkHflhlOSsy4DM4CcS5qz0kccXRxlLx9/T/jdiDXTMPz98PvX7B4x5DpGJY4g1hta1zdyWVM98RCTcJr3szWA3UwBeFfvtluwL4F7XrxrBAiHAjjS8f9O9crOjqdH//zqw+HR5++PPj+8e1wiut39cj6Zmf05PITf5pPwsKSdMZnD5/6zZy/mk+xITuIoMEuOsskRQAXzSfRbsJq+5XGSKa7OlE6cfTRI4srulzwFVzTR3jbJvud0xmyvGXNG9iDgXVToMLKMFibsLRpAtf6jBlGL0NjeVcf9vCLW6w5jn46PBPh8/gBgvcyvGJSrs03sfZm4utuBBnvvrDmrzjq17/fPDg4ypyl+jiwhkURSPPmDyTg975VAz7ilw+EBk3YT11q0I2eT/0yuXopdANUpgCA3BOhOC61AIYjgrA3O2c0cXLOVMCltUL1jn5Keq9a5VqD/V+JqfS3l1cIZuOf8GdTD9qFZZah7FEYxMYLecxDMH8D4CmtsyW/3nj9g561EiZdS1CnBxYBXPq+Wvy9EumtkvNfMnCzr6h5xXFj1/YNdO8/boiwPJmFHRmJHo5F47aKyr1O53VNalTc9txcNBnT0Y77eOYv6kNhOh+w8SnOGCrezj/qpCXDhQWVSwsoXC+5nTW4GFt4Yd8mibNANVKxKsCxADtr6JmGc4yiVQUoFSJN9QGNvVFjGoV/FflsmGY5hWcS+KX+FboaezRMStfCM5+nMySFiXIGaFFpNohGGSgX8UK9xHjCMBkn92pUyrRqxqS/FYrQ6YbGKOQlD4GFL0HwA1rq+CvbTA2cYvb/vGK1IG284yrquf3aUkwyE6MJy0UrBfV7DovPqvR5rmaPWVy7VgQID1h6KQfXEMpMe8TGI5gnwRpuFWUeQXGBUkiFJeu2ML+JkNsLbYOkxHm+R/NNETfCzqD0GQbyEp5JgIfiRO0sbec95+iFkN4pxbyng7TzeWo/UQkXlMPAPaPsD0spZIWMLtjJUrNW4feL3GeA5SMG1cqgQ8mR3SdBRSMgRzeLXQmzRzVW3MvCdK0AO+otfdvma4mncQ9v5WfZ06QhQiXZ5SO3MB7S4LzvpmkCwfitS51PUarAPV5UgZXee/QSAvOHhmuzjFsS2iYU+JiBTd8CZDzyK9C1iADYnDFDQpxg5Mvg+/clV6/Q2TLL7Dxy6ePL0+9ePX757/D+Pvn/z7WNX45uwYtxSp58CtE6DibcnkI7Yw3bRDbU+b+/Ev7099GW6pwGwXPbUAKKIiYcVk0DuG6mrdK5n2DAu5UFwUbbFVJ5P3vJJBVD51FhksAjeuvRoja2ltNfkQ1JKbzwCtYUb66M+Jwjo4GlaordR0evLXCVwFEBOeQEybsykFuVyKZBvOZwANJjOlmFK1ihIUtByqHgIVlaQo4kzbUDPBkFNvR0tHFNpykrzl6jy32+qDYplrx2K1uzuz0Jsn+OWPHLyIRwB3M9WeC+A9C3p2vZIVX9as3ASAatpNq4Fsb8s75E7RK5qBCBIkowJl6YnNT+4QIJ1xCl5iBHLydims0eVPln4bt1x+kZKSR/yssn5KeahuX7c6uCJ2XyGu/c4ll8obSGmw8QaM0agfi3DIHSQX8TUHz0f8jHxhEKMTMKfnhx6h8FbNH5WJ72zMruURlh3g81fStkyNDK4I7HdYAvOg+Ku23aVEl2gs6zf5c4CwXZOKKPH1qvSXi9UwSx22ZAOliP3kdZU4BBh1Qt4b2CA8KBad7MY7yycIeqRkl07U42yaKkm+gDUqLHJnItK5CrVT87ClgtBB4AnzwsMtWuZZBTbBQ3GEj7IoiiaYYlBwN2AdVlaK57tDWXReBkDRh4NhEmn7a4oYCM8saNyyfoFjxXQsrl/sDzF5n1JA7v96bipYhKDgTObG+wnWWPSdJAtaw5+Qxv1BkxgUhLoCaO0T/aW+2kWSVBQABdimeOmY6odEycHSAaQ1YLutUjny3wUjuK2JhAzmdNgzCuNix97TL8BcstJS/TO3r/PPivhRKXl0P7E630bxP4S6pUWrQUJMQaSEGUjaCd+Blagx6MR28Wh5x64MHtMqIDgs9/9jo7hI8QzE7kD4yOFswkqoN2uc/cpczjhx/MDDky3CqDj9icoUtKhV7HEP9BKldPjrNthL4gF0ydO3SgmL/utFw56WAzVTqWIDh4TGa4SPjq+McKdLoHv4VG30dGedtr1rsc48ZgFK7H9Lnqb9GSXlO/+Ub0tBd8nkVHONpvaHpGZjoR+W7bbui3xiGamu2zZ5FULhvb8cVXUmNJ9aAJc7AE0+FDDYmvQHdnIYtmj4ClVyU//QFcFA6TebOSv63oLRv4lKE3sxyeeoOdGmy5TvmW8jWEQoSwW+pGc0SC2R3x+5qF2HPR4+pRhDCt8WC2ITTSiel17iM2uPht0GKsnbMGcCjwjRlNSQ7CHBKhchtDdxrN6IGynPYeJ2JwNjNuODOUZL5gZArdAGqrkFaNzHOEW43a+X6y2CcNrkXaLER9nlsnSRe88qUB3JadHb0CAI4+BxeI9BVTjG6lKMRB2e3etTACfKaxrHYCY8AaNFDi6TqKIjD3cd5V9Yd8+melLYJpoMb+EbSIbTf1ouD22a1dpilO2lbxzIZFUAcRhnFsufbsTEInt+QseWpCGvFtG9PqZDVFwCfJx/B9W64j+RKoAdevxH/WSt7vzMb8uc+yU0sMGUl9k565CHNkO+XKfIqTbaJrxpijBJeO+UnYMSgtCpKSkUNAUIntyQ6beyACSQCqXvx0py96egAsNkLmadGiTlBVnl0qmKK2UlmwUk/qa64Bl9ssODIfFHJCv6vLzSGLh/ik+EfmxR+8hAdMvDPaTLhqME0oalTdh9U0mTSCj7s91MFC8JAqf5wuJRWOm62PexANG8/cAptYwtI5grJk/1/6FeXHfhaGmESu1aC+6xhDaDZdpDzSLzHLsGuMu7UE0sbOBVDKQygXyF77nYU18+p9EdAn8t99wc5yOmrNZCYczjMfVV+pm4lZqyOeakekLyW2NVy+xIe3VlFJHYdXVBeetVHU1d+6B0yVMbaEoeHaTwz0ldsy0ozy1ucpT04/kxvSbeD+IK8u0UxzLk+nR/LWPMu4G1GY+Fj1MLO9jQIVmIR1mvvHvI9XlfVIvXKQjJKp32pFf7Bo7AvpCOeNbzpfU6GCSX1Xi0bnwQ7p7JCHKgLh3fFYgvmyfIXA+pUBIbG90xNYxD6tkMqoS0cViMXbXvrZCTHaiY1rouevpJQBWNPee0V5OjCAnUCY6JHwXewnT3p4R4RRHavee0Cb/GRCcU3TPrzNj2odB+mxRX1UZ3kBai0uxjlxAclPsZvrbwlNadSu1WpFQWtEsKlAdXigu79pdmlM6Gb1sgRl/hevz0EEunAkzDbbKru2iCfY82QGi4JH1yjq+iRvZ87oQxMLLJmwlZ6vdMuPTkPGcXuEpPambZwq5XpG9KDlDmJHM6CIqEHOFQJR1mLac7n4sf0+eLzmBNVRiBr9FznPEY+IGfm2PCTGvlIu6P4/IXVZvOpEFVTe0utvZwTFSjt+4oVoGOolUXvBC10IOLUxYOJLQJ/0PbomFVGjpvF701w1g7H6lBubVYa8AUXlcFxPhUNyuvkVkd0oJhxjgG4g8fTYGXvwozfObXvbwk+le4J6LLqalq9I44X3d2Fxkb3kCKd/D98b3S0yPdR2LuTkKzkg+jrzP1/sZMdHO+DwooYQaUt6KP/1BgaEI/lXZci+eGKWmo3yY/Pm87CYZDR1JCNcp7ik0b+Wt3UUtyKvR7rbbGhAGwWZqZQqaWmBQ/sVj17iDdMcPocitVyI9ZNS8omj8sz+91MkTjeWFPv2hJy+0R+vADryxTq+3qTzQ0amY7sUOug4HdhqszLjg0lmkjmk68e1e+34Jw7/v3GyZYIw20YBvfses9G1IzDe3cInoYkb5zYZiKgkGGGVQP65a4KyttHDpejFJhgLs4VYmF6DrLlPUEovJaRGiuENL9nRWrEup+HAcaNuIpawExZDdrCEnR4n7anKkdHcsW7QIKHiABgWtUN2TfoLj4j3gfp0pljdwo5vj/Xeb9s7vtNCUQ+K+pAIFG4DmTZNfv2tF3hQrJgYVQJf81csA0DPG7p+pjFAK3atfEkl8VDbJAv3Tydt7YTPnudcBRxjoQ01orzbbmyD5a32BSt9mqFz/jScMZrYFBArCLl/7OC4hmNDoLCIQkbuofD/bjjJ50MEMdCAr95U1oKorsQ4NriAxrcjXF2SGqRphT2E6FyCGrrNHK1H8nMHzGr6uNtm5oMqAViaDB01pF3zDCWvy2YsyMxxUA2FzHraeyTKVk52ZcVL3KdUVwBGXDDzx4NIkrKsAdllsto6QcGx1Pgl5WSHAe6U/jrDEolrkaLt9VL9eT4GlkupL2vYeeveCI1sQS924yd1lH3J4hVnP8OxAPmTcwEf8FzzIFJrgr+rvs4ODqOYrL7n3qmBB81HSIvR5RmycyQ91h1jf74axb3dKDsCWmVuPKFbp5dZrqniG1r8TJUbTyINSP5wa9sVQNr/s594t7JMfunxKpB4hlU5tyouSisoqV699ljPkr8udliBohQBSlstr1R9zmUO+/nQZYoWbO07FX0k7W9LwYrMFHo+ZjOz7wr/COzwoSECjb3EVbbmgUnI2dM3UoYlT4OEoy55YQdaXTx7Nv/rij3869ScOiC9OSWDkBV7vAPjPt6J68d8vcMhLTOng0kQUeOHlLfIuRxVRmBgxX1vMvn708sHX3z95ADQAzKoqMDEeR2DTDycctFAQys1GLEogjvU16p6FWHAw59nTZ49N2YqFWJcbqv0n98vaGAWJvfX2LplecAA/ffV2lv3x6AuqW7pr1SVIpFzZRwMyJ0pLNtNygeJUMIsL9glrj6IzMsdt05tDxqpYi4LD7PmCbghI92Jku1c5tUOxlSGL03uE+j1wC6pKqXdym5cNJv0SFuWgqdPWqKXLszJhNEt3IVMZ1oCnPnW1quC552F69ubVa9xmLksMLD+MoBFSLRalLOJMszK3wXkh5pIADU+lXzXNAVh7G7e7BsSuoBsBRBObsm2plhHsyxXBZePFv+JAzyaXQBzCpO/I5cqSrLCftHVqUweqL9os3yZyZQHpotMqaYhKglkWE31YH1VeQIKHa8fqjZJJcaFIp55SuuKj7CMlCRdPkvKQWMSP1p5GJAZN5n7AoU98Q4kbOinD9BP1iU18epg2rKq62eTr8h8Ch3bK64Suj2NUNd6fNe/PqmNPZ8HPAT4+CH+XVZdgcu8kVrTTwRkfOmB8JW8tKvaEwB9Taw0xKw3bPshOcJ+gA2Kw3WMmp41Sk+HOsy977sW3O6yU7EI4mWXzL3uTJpTwNb168rGNqE15ISg44dpouryMHXanKhUmGs9x+t1Ouv20p7DJdlW7FQUgJ2yhrjoY3GpHrqh724EftuYUvN3W6ZXHbuPaTK6IFq0ZdFRYERqPlPDYPzOBXWoSvSZoXId6LTLfvucSXu9Fazq1pLMqYhX4OuCBlUfCmr3KJjnTtWVAh+9P0YmNg9sw/5HLDaKu+cXRyf55JGHVEjvAry/tKKZLudIc0LPz2YYr2zlpF5ErYXElPZ7Zoe3NlzxlMlXqRl5ikTN9vpz6Y4a3jE3/T5PMbw3gKPby90nKd0yZk25AznZrYxTYspin6phmPUURDj86omctZlREbxtmgFq7EbtOYDVIhWaelKj0e9cqefnSjVq5vMqpu4hMoq60yiB+LduuTVkeMpHKVDHAPGlNy8gh0b8o5JsGvGKmGuhzHbWJtbdqPwO/54nuffXSIiGaZ6yYbz9dYQ0g+wahpKieen7BHZhoEd6TfevvmhGDuAUWALX8v9lp1lsNGj/KC00z9W9kvci9ZOfhFkNZRbLPC51QHQMSUWicfgNVe29A958lr8YHp7gfg3UnPuLCeuLeEP6bFlFhqqNbrlVjDF8pINmqyu5p00Sl9tAC5YsUohfdkGjo7Rj7UqH7WM7jlpxVcTnoEmv0tqmcRvi+ByUa9xd7quGQ2uPXazRaj5qVq/UMA943ztif+tPDy4bZYQSMw2yGbnQk6yn2Z16oLYqnCvqcLhgbuz+Mk3ziQqSCGWT3GEiR6c2yQSdkamWprMOAhagOvXZVSUUPjDlirrqi603Fq0gNQKo1j7376QqgKaRXU6Xi2hQZvmHBBH78XqfnpSo+93GX5GX01omqpnhEUCw5xTS2jDdRGS1TB/4Src3tlOyOlfyW75Fx/eoja1Z74n6b96VCbSOovwcbHUJqL0aw3TuZww9nj+Gz1qAjWa13430g7dBJOOwtjhu+0MTz2Ls1kX3M02q5Rbby+oFKPGf9XTsFiXJNEpVUzK0au3SZULmXL3H/yYJ1ByYHcmXYgLeIqBdWv0hP7XC2VTlqfJ9SKFWE3fw5x9PNRWB/DtBJ/LplAmbXDwz/5vWT+Z/xnTd5A23aVu1nlzcXRrmQA/VzoFthMWFQ27wNJsVGsLAurWOSSM1NcymbNPoY1XjUNG9B+W0xE8e9JcQMTcz/4GWIl+YlMp8ML1Ua0o3Q0i6NM8A0ZZhPoibXj4n6MTITTneL1iRDL1SuqbfCjbez7CPa+xVQ0ao4HnUTqJ4y0KbApLVflucneMnOLFIGS4HjalhOb/RqWzcfZPTPyVuaWjd7FSRVXwuLPSSvvHllscij5xQCvKWDebheq7Npp33jwZFRDtyIU0uX1PEOsGe40aSQ5M+SvaYwXdv5nwbh934lVQ/CK7bh4nvfxmicp935D8r7KK9O5zdDeXWEN8d4k/VkDkCmOdrFz07mmNwsmX7wDiwFLvEqrMESZ7eWOWXWbRFJ6DJ2zsLJ8ncBtP4tF1VSzIIwVFgslt1kH3cE1JgTQ1L0TixkNjbSUUkTfFU2hmyVw3FGX032KDouq1pLM0pDN7qi4YnTXD2zfpR5QrHSGPLGnQI0MTOfuHk+FFDRDyM0vS/G/PR2EGcipx5zOCRuhDhn3ns9BD+jK5A7Pd9GgwpyKzjHnDT3dspfljx8aMK3bhhEb8M0Go6zBvkszNnQQDEYYXwp0XaUwN7rg3BrLKh4Aiccqm8B6KSjf/xLA82bEp3bppeAVfF6KOPfjxhE/uMMXxYY7OVCo9UWiyVoz2GkfOUQZ+6Vc6N4rOvfSrLmwEeeiP3uc+HSuWy50+9dIOL0hRzl3Wszke//3naCb+gO5YGkMWc2ZqCKQDTZ5GMKCPQ69cZfcLrllw5YyDCcDxOTuN4rQ0KRm96qN28ecwqSvV9x3Hu4kOF/D6O8mGCTX3GepkkulC5mK2uFKVT7RyJWg+OokAAG3RS78+HwIIgKUcGwicdWqYBPo7Tli4XPGQI3huX/VtOVr6Rxq/GgI8XSLKLUZACkPPPWEBP8G1/Y574t3MUqu0OJib5T6c0Bgnnzav7w1aOnT4+PKd12XXbHx6Bs1Q2Vf1Id/eIpflwgwii8HvuGQHFUdMqrGXgB0D6QrqA+sPdfAldABwcYUWNgj/BLT5lRS5DE+cR+JL5rTSEjInJcZW/RRBP4w6b2q1h3lPQ8+MYN7JZ49P+NwPHqAui8gmnx9sjbhO74/bAS/KQJroPuxQNQ5uGf3O0/HOC34wCp+iIfS9bmFpFfi+aK727YReItF69K/WHHiIKmAjXsj8MX7tDr8PKF7STZVT0WxZB3JP5y5dDeQBvslXzvcLq4eycttfjbrwO1nJU71Wfw7QGyYV9l3Y9IT4+97V26Zy2PhR3BCCv4B/v/Es5Kpl8Au240d1YDyAvGkmF6r8/W/l8FbcTNEce7Eo2fDaJE7KXIcYTQdUb6y/3vgw3bMZiw9bDgVs59PMWSV+pTEeyedIle4WG6XEnfsZt64rr7/ZPQfYZOQzX819KlcRX+O5NlOqx9S2SJh3oTshxAhn8dWVKsBOYgkxJy963iQFX2BRFVhAj90bJisYKnYkhSv+yNnfVusnKW+Fu6/81pPy1ULSLZ27kLEyonbkUcneeNlXBs8PoYexNK8kvvphbdh6JLtfFsEo97phDcJEKshm8ntvml0dUCZYM9LTyZv+Lt/2b+gKoAyDN+XeuqdCOyu2J8RsVoTWUc54aaiW04F2WLfF3s+JpR7dzTGLgcOkTbdCEThMY39eI65fCN74rf2a6OmTj/Vd10xY4iKwXGg+Senp7imSiv53a1PQXjQ2y2ttmp3s9ixCKeCmwo34F3MYqX/jE78+5dV7P5HhKlZ7ZNzITRfmp+Hyt+YeOcTWNXwBljhgNMkS91hrdFg8bLYl23cfB8fABGHcuHO/8HE/p5bw==</source>
  </file>
  <file path="SimpleDi.php" generated-path="SimpleDi.html" hash="602354499e96f6447ba5547870861423" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="MessageParser">\ZBateson\MailMimeParser\Message\MessageParser</namespace-alias>
    <namespace-alias name="MimePartFactory">\ZBateson\MailMimeParser\Message\MimePartFactory</namespace-alias>
    <namespace-alias name="MessageWriterService">\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</namespace-alias>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="PartStream">\ZBateson\MailMimeParser\Stream\PartStream</namespace-alias>
    <namespace-alias name="UUDecodeStreamFilter">\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter</namespace-alias>
    <namespace-alias name="UUEncodeStreamFilter">\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter</namespace-alias>
    <namespace-alias name="CharsetStreamFilter">\ZBateson\MailMimeParser\Stream\CharsetStreamFilter</namespace-alias>
    <namespace-alias name="ConvertStreamFilter">\ZBateson\MailMimeParser\Stream\ConvertStreamFilter</namespace-alias>
    <namespace-alias name="Base64DecodeStreamFilter">\ZBateson\MailMimeParser\Stream\Base64DecodeStreamFilter</namespace-alias>
    <namespace-alias name="Base64EncodeStreamFilter">\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter</namespace-alias>
    <namespace-alias name="CharsetConverter">\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser" line="31" package="MailMimeParser">
      <extends/>
      <name>SimpleDi</name>
      <full_name>\ZBateson\MailMimeParser\SimpleDi</full_name>
      <docblock line="31">
        <description>Dependency injection container for use by ZBateson\MailMimeParser - because a
more complex one seems like overkill.</description>
        <long-description>Constructs objects and whatever dependencies they require.</long-description>
        <tag name="author" line="31" description="Zaahid Bateson"/>
        <tag name="package" line="31" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;singleton 'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="42" package="MailMimeParser">
        <name>$partStreamRegistry</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::partStreamRegistry</full_name>
        <default></default>
        <docblock line="42">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="42" description="&lt;p&gt;singleton&#10;'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\PartStreamRegistry" variable="">
            <type>\ZBateson\MailMimeParser\Stream\PartStreamRegistry</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="48" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::headerFactory</full_name>
        <default></default>
        <docblock line="48">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="48" description="&lt;p&gt;singleton 'service'&#10;instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="54" package="MailMimeParser">
        <name>$headerPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::headerPartFactory</full_name>
        <default></default>
        <docblock line="54">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="54" description="&lt;p&gt;singleton&#10;'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="60" package="MailMimeParser">
        <name>$mimeLiteralPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::mimeLiteralPartFactory</full_name>
        <default></default>
        <docblock line="60">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="60" description="&lt;p&gt;singleton 'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="66" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::consumerService</full_name>
        <default></default>
        <docblock line="66">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="66" description="&lt;p&gt;singleton&#10;'service' instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="73" package="MailMimeParser">
        <name>$messageWriterService</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::messageWriterService</full_name>
        <default></default>
        <docblock line="73">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="73" description="&lt;p&gt;singleton 'service' instance for getting MimePartWriter and MessageWriter&#10;instances&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Writer\MessageWriterService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser" line="78" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::__construct()</full_name>
        <docblock line="78">
          <description>Constructs a SimpleDi - call singleton() to invoke</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser" line="87" package="MailMimeParser">
        <name>singleton</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::singleton()</full_name>
        <docblock line="87">
          <description>Returns the singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="87" description="" type="\ZBateson\MailMimeParser\SimpleDi">
            <type>\ZBateson\MailMimeParser\SimpleDi</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="104" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getInstance()</full_name>
        <docblock line="104">
          <description>Returns a singleton 'service' instance for the given service named $var
with a class type of $class.</description>
          <long-description></long-description>
          <tag name="param" line="104" description="&lt;p&gt;the name of the service&lt;/p&gt;" type="string" variable="$var">
            <type>string</type>
          </tag>
          <tag name="param" line="104" description="&lt;p&gt;the name of the class&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="104" description="the service object" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="117" package="MailMimeParser">
        <name>newMessageParser</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::newMessageParser()</full_name>
        <docblock line="117">
          <description>Constructs and returns a new MessageParser object.</description>
          <long-description></long-description>
          <tag name="return" line="117" description="" type="\ZBateson\MailMimeParser\Message\MessageParser">
            <type>\ZBateson\MailMimeParser\Message\MessageParser</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="131" package="MailMimeParser">
        <name>newMessage</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::newMessage()</full_name>
        <docblock line="131">
          <description>Constructs and returns a new Message object.</description>
          <long-description></long-description>
          <tag name="return" line="131" description="" type="\ZBateson\MailMimeParser\Message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="145" package="MailMimeParser">
        <name>getMessageWriterService</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getMessageWriterService()</full_name>
        <docblock line="145">
          <description>Returns a MessageWriterService instance.</description>
          <long-description></long-description>
          <tag name="return" line="145" description="" type="\ZBateson\MailMimeParser\Message\Writer\MessageWriterService">
            <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="160" package="MailMimeParser">
        <name>newCharsetConverter</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::newCharsetConverter()</full_name>
        <docblock line="160">
          <description>Constructs and returns a new CharsetConverter object.</description>
          <long-description></long-description>
          <tag name="param" line="160" description="&lt;p&gt;source charset&lt;/p&gt;" type="string" variable="$fromCharset">
            <type>string</type>
          </tag>
          <tag name="param" line="160" description="&lt;p&gt;destination charset&lt;/p&gt;" type="string" variable="$toCharset">
            <type>string</type>
          </tag>
          <tag name="return" line="160" description="" type="\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter">
            <type>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fromCharset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toCharset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="173" package="MailMimeParser">
        <name>getPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getPartFactory()</full_name>
        <docblock line="173">
          <description>Returns the part factory service instance.</description>
          <long-description></long-description>
          <tag name="return" line="173" description="" type="\ZBateson\MailMimeParser\Message\MimePartFactory">
            <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="189" package="MailMimeParser">
        <name>getHeaderFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getHeaderFactory()</full_name>
        <docblock line="189">
          <description>Returns the header factory service instance.</description>
          <long-description></long-description>
          <tag name="return" line="189" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="203" package="MailMimeParser">
        <name>getPartStreamRegistry</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getPartStreamRegistry()</full_name>
        <docblock line="203">
          <description>Returns the part stream registry service instance.  The method also
registers the stream extension by calling registerStreamExtensions.</description>
          <long-description></long-description>
          <tag name="return" line="203" description="" type="\ZBateson\MailMimeParser\Stream\PartStreamRegistry">
            <type>\ZBateson\MailMimeParser\Stream\PartStreamRegistry</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="216" package="MailMimeParser">
        <name>getHeaderPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getHeaderPartFactory()</full_name>
        <docblock line="216">
          <description>Returns the part factory service</description>
          <long-description></long-description>
          <tag name="return" line="216" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="226" package="MailMimeParser">
        <name>getMimeLiteralPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getMimeLiteralPartFactory()</full_name>
        <docblock line="226">
          <description>Returns the MimeLiteralPartFactory service</description>
          <long-description></long-description>
          <tag name="return" line="226" description="" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="236" package="MailMimeParser">
        <name>getConsumerService</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::getConsumerService()</full_name>
        <docblock line="236">
          <description>Returns the header consumer service</description>
          <long-description></long-description>
          <tag name="return" line="236" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="253" package="MailMimeParser">
        <name>registerStreamExtensions</name>
        <full_name>\ZBateson\MailMimeParser\SimpleDi::registerStreamExtensions()</full_name>
        <docblock line="253">
          <description>Registers stream extensions for PartStream and CharsetStreamFilter</description>
          <long-description></long-description>
          <tag name="see" line="253" description="" link="\ZBateson\MailMimeParser\stream_filter_register"/>
          <tag name="see" line="253" description="" link="\ZBateson\MailMimeParser\stream_wrapper_register"/>
        </docblock>
      </method>
    </class>
    <source>eJzFWetv2zYQ/+6/gh8K2A782BtDu25L0xQp0KxBkq5AESCgJTrmIokqScc1hv7vO5J6UBKph11gAgJb8d3v7n7HO75++yPdpKPlyckInaDbDRVoTSOC4DPFXCK2RnJD0KdXWBLBkrtLTKNLGpMrzAXhKOXsHxLIBSgr/T8jGpBEELSRMn2+XLIU3tiWB2TB+MMy+1UsVyKcZy8LMI9e3bwG9eUowTERKQ68Bl+MRlvh/fXukgiBH0j+mev0UjH/km9wIBnf91P6yKksX83bDeFPEFo7wAXBIXycsURsY+vLEGXz0cvfG8kJju9UfOZrL/EPH16TgIXEvL6hkewis1A8Tw5SPNuoVzlcjyVPhA/Xe4UF+eWnA6M0ygdGekGiVOXdBJz5r8d3VoqvCdROSJJgj2iiaoyyBAUskZgmUHhrxpEys9p7a3OOViTASggrwJhxAgBxGpEviCUECUJigSL6SBAD6480ilQdI/WnxqPk20AKxFbKukA4CdFuA6ZAFoW5d5QI1SD2iJPPW8pJ0QnwVm7Ax08Yb2iIMhd1kQcRFgLdUOXJazr6d4Tg0VGrB1SfMEd3A+sVCZo8REQCSWNhimgMxAmJk4BkyEv9CS1LQkAkRM9Su97Vb8NcaVTVNXmgQJvlTA40zKcq2iGuuVqEi6IcrcurTbXXHOyQ4ir77kzecL42dbBjvVP/fqcaOY4s1BznkGEWOxGP8NM3bRzDY1CfgYZ712NWRH141M3tgUgJMiivcwOju1AFuD6ChTcLzknaFaXV/HDRp6CdBjiKSscnUyQZmH1ij3VS6RMQhNbbxHTt+/sgR5xMtYjpeV+d1q+J3PJEd1WLpTy8RS5WpIRr+ZYulTfaio/bFay/EGBK+Cg8tYKz/FRPJvms9OglSrZR9KKQoGs0sX9+aQSmFoh6qghkVxA8mZZYX4tvWXSl1ose1OHu4aXYfaBPBGLORqZae8IwgRGew+2o3ACWma/kPiVqNfxMvzbTAH0bx0ATV4NWoWgTCjRfQ2eGPBqZlZqO/m891TH9Ap5akNkc7Rn5RXahpN5mHEyUh7PMaj3XOpMStgLz33Ug3lTaMjqXBq89k6VSWyrtGoSS50VmlZnK8j4LfnhhODcLriopCATbFeFGlWQmGz5OXLyVaJPpzCUA+bLmi3ah6pIhc0w902NZPpbfnoz24NLJIsRfWeX4aXLNR5Np86ee2ejHcNmSnNNhZ1t3abUy6g3UX+SumbGr6N06drZq5rtbgn+CPmDw1jdW3lFc7cJrzuJMFZmDCxSYV4+CZLl4SAQsWLDZp9V0Oufo1k1hVwXV5Sd2GDPLx5YSa2BUk24D1oZDDj6sHtTspQ+Y1vkWoG9FDN0ZdlVLs6idRWLtFbtqoyJqSqLqUpVcS7OrmVVFW+q8losyH1bam972TZzZc33D1Lm2q115qxHlz1xl79qVu5qwzl7VUsl/bfc1mfZg27GR7lkoQvcIgMvPGOqsI3QLsjGRGxYiHAmWQxkVwrM9hcEhXyRJhOJytdc7G9XOcknTj85zEcdyt2dHay5N+pSjczHjrcra2UtHgn0h9pmh7AX0uGl6PIOt3l+nl+c3V6dn5/f3aIHGfiLGR/XJQ0vMfQDTr9baOmULUY0TGidPrf7158p9evNNWGs9GPIvxpxaQ/hzHx91kug23J/JrMnn50LHUug7s+rir9Fk/c2gdoTV1Qka4mYhVLPXOVW3bNGq4q0jIX96dCHnSZ0vn3nnr3d9oU9Byq6kl9CO65dGugXJp5D7tZa4zzuqS2THcZo2ZbxHFP7uXEu724WJ68rq+fOb2+vz08v7N2/f3Z5f66Jp6dQuiLGVFq/l5k3QYMtNiB6WHVkbaNiB4LBbz+WkHD2FvY/Xp1dXYPDq+v3t+7P373rNiLat4styiRinD7CjiiJYoICcHigwaC8u/r7UF1mw11rRiMr9DK22agMW0FAdjDF9MwY9LLbR1DoJCladrK22EOOcJnlVGEZNSXASUWxg0XyOqMzuyQDORisgVvoWcB7qMaOriOgkVrFRyIiAAU8kwMbbYFPHE+rQD+obFmFY6BDHIrPPEiBgx/ijQOqINgZCVDvW8ALtNoSTOhpJJOWFC8AVGAdf83NR8H69Jnxhq7yFn8OQqiqcKVnN8o+L739W2Dy/LQRuVxClKt1VROKiXgHWBhsHZh+5+LyFEg/nKQhIDBoZT8uMIwhQMAUa48csfGhV+kDYhqtlNt4jANdr1zypivfEUAhexXE6zz04qQUJIf06/3Hxw3ezMrc7MoYIEyaR8lGZUReiO7WvKkM5GdtI2ZCZKf8TttN3oApEXRGYk2S3E54arswBY1vVw+C4OtP4S7t5M17G0d1bBvhlUvp/+OW7iHd2wX7u+SCP9LHn5DTER8dk1TyJ+Tr6DxOuOls=</source>
  </file>
  <file path="Stream/UUDecodeStreamFilter.php" generated-path="Stream.UUDecodeStreamFilter.html" hash="0303a1ae4d82b55f66de519ff80afb8c" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="php_user_filter">\php_user_filter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="16" package="MailMimeParser">
      <extends>\php_user_filter</extends>
      <name>UUDecodeStreamFilter</name>
      <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter</full_name>
      <docblock line="16">
        <description>Stream filter converts uuencoded text to its raw binary.</description>
        <long-description></long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Stream" line="21" package="MailMimeParser">
        <name>STREAM_FILTER_NAME</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::STREAM_FILTER_NAME</full_name>
        <value>'mailmimeparser-uudecode'</value>
        <docblock line="21">
          <description>Name used when registering with stream_filter_register.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="27" package="MailMimeParser">
        <name>$leftover</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::leftover</full_name>
        <default>''</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;Leftovers from the last incomplete line that was parsed, to&#10;     be prepended to the next line read.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="40" package="MailMimeParser">
        <name>getLines</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::getLines()</full_name>
        <docblock line="40">
          <description>Returns an array of complete lines (including line endings) from the
passed $bucket object.</description>
          <long-description>If the last line on $bucket is incomplete, it's assigned to
$this-&gt;leftover and prepended to the first element of the first line in
the next call to getLines.</long-description>
          <tag name="param" line="40" description="" type="object" variable="$bucket">
            <type>object</type>
          </tag>
          <tag name="return" line="40" description="" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$bucket</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="66" package="MailMimeParser">
        <name>isEmptyOrStartLine</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::isEmptyOrStartLine()</full_name>
        <docblock line="66">
          <description>Returns true if the passed $line is empty or matches the beginning header
pattern for a uuencoded message.</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="string" variable="$line">
            <type>string</type>
          </tag>
          <tag name="return" line="66" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$line</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="78" package="MailMimeParser">
        <name>isEndLine</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::isEndLine()</full_name>
        <docblock line="78">
          <description>Returns true if the passed $line is either a backtick character '`' or
the string 'end' signifying the end of the uuencoded message.</description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="string" variable="$line">
            <type>string</type>
          </tag>
          <tag name="return" line="78" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$line</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="90" package="MailMimeParser">
        <name>filterLine</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::filterLine()</full_name>
        <docblock line="90">
          <description>Filters a single line of encoded input.  Returns NULL if the end has been
reached.</description>
          <long-description></long-description>
          <tag name="param" line="90" description="" type="string" variable="$line">
            <type>string</type>
          </tag>
          <tag name="return" line="90" description="the decoded line" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$line</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="109" package="MailMimeParser">
        <name>filterBucketLines</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::filterBucketLines()</full_name>
        <docblock line="109">
          <description>Filters the lines in the passed $lines array, returning a concatenated
string of decoded lines.</description>
          <long-description></long-description>
          <tag name="param" line="109" description="" type="array" variable="$lines">
            <type>array</type>
          </tag>
          <tag name="param" line="109" description="" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
          <tag name="return" line="109" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$lines</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="132" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUDecodeStreamFilter::filter()</full_name>
        <docblock line="132">
          <description>Filter implementation converts encoding before returning PSFS_PASS_ON.</description>
          <long-description></long-description>
          <tag name="param" line="132" description="" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="132" description="" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="132" description="" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
          <tag name="param" line="132" description="" type="boolean" variable="$closing">
            <type>boolean</type>
          </tag>
          <tag name="return" line="132" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closing</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <source>eJy9V21v2zYQ/u5fcSuM2U4dK1mWAmvmrUnrrgHixIiTAWucqrRE21wkSqCoukWb/747kpItufa6DZiARBbveK/P3ZE//5ou0oa3t9eAPbhZiAxmIuKA75QpDckM9ILD2zOmeZbIyZCJaChiPmIq4wpSlfzJA93DzbT/RSQCLjMOC63T556XpPiV5CrgvUTNPUfNvGkW7ruPHqqHs/Er3O41JIt5lrJgq8LJWCvO4pNGI0ctuNXHt/LRZM0Vrjo/LBfYZQgS+YErnUGecxkkIQ9B848adAICVxVbwlRIpj6VbrBcLxIFbxlbiBCcKcbCIGJZBre3rzgJsnpeWzUoksswq1vV+NwAfIxl9OzBJXoJyBHCcsElKD4XGTIKOYel0AvIjFS33S/IPbfdM2/0KdMwvrkenA791+cXN4Nr//J0OIA+tGIMWYwhS03I9vM8NMa2TszOujUvPjBFKkn9BZ/pBGOFIFBJbDKP/moQGLY4jbjGbyE5EpiGJTMYQT+6GMpCnHmmmBvFMfkm1okRJCnkZjd6F1a9SZX4gEGGZuQMIDe22HvNda5kBkwCU4p9IohWrMugjfZGeUgeGYVoB/7OOiuvCmEpZhNNbE7z4IEj2qcOzZZavM9nq1AYgYkst2ChrKLTRUC10LQsE3NpXC9ENDWW1v4vpX9MhpshmgmFGnjEYy7L0rOLRq2QhbgyoAGLIto+5/qCfN+w/QWmCEvBelZYXRKVCaZL/939V5Myy2WgBbpc6Gg7KR3DZuFNT9NGv0+Ozf0sjYRul0R6Wl777t1ETeT90zv76nitboXFid7/JWSaVUn7h9Xv0fXgN388uji/8V8NLs6H/svT0c3t9QC+rJMur/zBcHTzR7m1c1L+FDNo1xPzXZ+g11lza+Xa3cE9elff0VtRT6qbaowrTNPzuBY3AlafYNq2ouo2EsMdJini0n50YB8O742xTybyyYa5G5pNqfhpkm5qWBni0GA5LMPjzhrUKudkIcGxKCWL1Ax4nGosTgUx08ECcUFMU2xmUlJhLrAJYHN0AlOmscVJmCE/W+vTOA4yNufbUO3altFZx/Q0SaLdeBbZgGy8UmONo46gbYNTx7UTaInQNwCBL18szI137Zb3zrgGk/Dz0SP09poIbGtXp/OfI4lDgVoGTFnwoEXwAMEC3Q9o6LTetzDG623BxaSFaGoB9SEx+0QLRMO1oq38fzGW4T8K7XsT27UFcmRnDO38xbaL7sp55GYU+ll4KGSa6x6Uwb68vbgogk0hWeAkm3JedlccUIjY8N9ExNFIsp26IayxbQmSnfTbo9QMcqrhCGXHbWX+G74uFr+eSGylB5OPB2dPOl/vbV/DOUrs1LuGc6HSpHAaZbwqq8jnDhEyj6IdDcYdyPziZGJlfUuKzRg2UwZrrV4rme1yXaeG8sBIV4DBlvgXFtJckhAh6znaOjvtMcOqqJEEzukmncXyeCW+ioVvSf2ZGXp2uK5r68L3pfQNUNCErM0UbJ8EXVdPdBBxPag+Hwqh8LQP5VwhxtoEs+YhXzn2NrBa3WGgstqF9UtYqOunZ4qmPlQ3P1aVGwd7/ZUVu2YWMf89gkDQQY2OV8yEv7wamFZBoJhyCuIahEbj12N/dDoe+1eX2xCiuL3lQHN1RNsgJbn+JvRYGrVWJEZJtsJQiSzcWIVVPsXrVB1VbbSma/Su46hbSq0jarmgm19xuoN+cRGx3zjpHri/VEJzNo04Cd8o//IE6MCycWI82YAhhX8TX+sFUZTCqhKqUiofnlcIssbT/MxlmAQ5JR17OsC5vbrMElyHKEkeTKPQ8ObN70M8vLt0UV+oS6bTCd0Yndk9QT96e3VQYWt6aTnOkcEBjw78/GMaMXQmrAvOkpgv6U5luhqajJ06eLhCEbMoWWKTm/PnxZ06I1LiSD28eXjMOzo8PPrh2Y/PvKOj44Pjn+risctFTNl+GPN4iubgpU9QGs0FAuPfsuFq2bK0jXb0ZlR3rX3cO+5tyEfDI06n0l6FUoUPS1NzwDVwrJIkX7YrWeuuQaOz66i6XpxF9T82/gLIUelI</source>
  </file>
  <file path="Stream/Base64EncodeStreamFilter.php" generated-path="Stream.Base64EncodeStreamFilter.html" hash="e0280daa0433ecd8ca31dcd2852ded1b" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="php_user_filter">\php_user_filter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="20" package="MailMimeParser">
      <extends>\php_user_filter</extends>
      <name>Base64EncodeStreamFilter</name>
      <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter</full_name>
      <docblock line="20">
        <description>Unfortunately neither the built-in base64 encoder in PHP, nor the HHVM
implementation for their ConvertFilter seem to handle large streams
correctly.  There appears to be no provision for data coming in when they're
not split on 3 byte-chunks (each 3-byte chunk trnaslates to 4-bytes of base64
encoded data).</description>
        <long-description></long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Stream" line="25" package="MailMimeParser">
        <name>STREAM_FILTER_NAME</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter::STREAM_FILTER_NAME</full_name>
        <value>'mmp-convert.base64-encode'</value>
        <docblock line="25">
          <description>Name used when registering with stream_filter_register.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="30" package="MailMimeParser">
        <name>$numBytesWritten</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter::numBytesWritten</full_name>
        <default>0</default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;number of bytes written for chunk-splitting&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="35" package="MailMimeParser">
        <name>$leftovers</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter::leftovers</full_name>
        <default></default>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="35" description="" type="\ZBateson\MailMimeParser\Stream\StreamLeftover" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamLeftover</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="43" package="MailMimeParser">
        <name>convertAndAppend</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter::convertAndAppend()</full_name>
        <docblock line="43">
          <description>Base64-encodes the passed $data string and appends it to $out.</description>
          <long-description></long-description>
          <tag name="param" line="43" description="&lt;p&gt;data to convert&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="43" description="&lt;p&gt;output bucket stream&lt;/p&gt;" type="resource" variable="$out">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="65" package="MailMimeParser">
        <name>readAndConvert</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter::readAndConvert()</full_name>
        <docblock line="65">
          <description>Reads from the input bucket stream, converts, and writes the uuencoded
stream to $out.</description>
          <long-description></long-description>
          <tag name="param" line="65" description="&lt;p&gt;input bucket stream&lt;/p&gt;" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="65" description="&lt;p&gt;output bucket stream&lt;/p&gt;" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="65" description="&lt;p&gt;incremented by number of bytes read from $in&lt;/p&gt;" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="93" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter::filter()</full_name>
        <docblock line="93">
          <description>Filter implementation converts encoding before returning PSFS_PASS_ON.</description>
          <long-description></long-description>
          <tag name="param" line="93" description="" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="93" description="" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="93" description="" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
          <tag name="param" line="93" description="" type="boolean" variable="$closing">
            <type>boolean</type>
          </tag>
          <tag name="return" line="93" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closing</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="102" package="MailMimeParser">
        <name>onCreate</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64EncodeStreamFilter::onCreate()</full_name>
        <docblock line="102">
          <description>Sets up the leftovers object</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="35" code="PPC:ERR-50007">No summary for property $leftovers</error>
    </parse_markers>
    <source>eJydV21P40YQ/p5fMT2ljUPjBIkTJ5WGAncgKh0UEXqVrlTR2pkQF3vX2l1DoxP/vbMvjo3t5E5nCZzszusz88xufv0tX+W9yd5eD/bgbpUoWCYpAr1zJjWIJegVwuczplEJfn/FkvQqyfCGSYUScin+xViPSdnon6RJjFwhrLTOf5lMRE7fRCFjHAv5MPG7ahKpRei/jMk9nM0+kPqkx1mGKmfxVof3My2RZUe9XkFeSHVObzmnkDVKWvV5/MmXQuqCk410DRwTykHaRKKCRMOEQ8QUHr4F5LFY0B6t3FzejIALJ3d5+enKWEqyPMUMuWY6ERyWbjuR8F7wJ5T6wnoGhZiBFrBifEHopUw+ICgbqzJmYiEl4ZSux0Ago0RgeY6UklGKkNwaKJ8SVTpZMM1IK0v4g4nteYXcOF4PJBp7XGhQeZpQgTgcQLTWGMargj8qCJDFKzgIzRrYNdCSM5UaQI27t3ZLmdI6EIxBh8PC+h2acoKtJyv0iqL5zNgqWYCviS1VnDKlaMUYOLfKrjQeEPxPI1+oZol6X3pAjy2TefbgmkoOJLFwOUp8SBQJmryfqWweRK8+L7fHXn1i37HgSsPs7vb89Gp+8fvHu/Pb+fXp1TlMYZBleRi7Wo1duqHLdXBkdZvxnDwx0w0aeJFFlIhBycL1LBNNOdnqWFhDWwBNkb4KJpfJE+EEfTJwZjT/8opT2N/h0qH3EZdaUKzdFlO/q7rtnNXTU7aNcyoSQdu37URQGlipRW33mfJQA1FH9EWhS0RhExXxn2WlkrNg/5GCB7QhKtFx3doD+svpFRXxI2pfxs60lgWPLbm81VO+OLXhBdbpyJobWhXXPebpe2FKburbeO4Sd1rDo0q0LARJUhgp8qDSrsklSwj6miZgeNws3Q9Uu2HNuzNLPU4mg3eHEG7V/BHeHQ6H9nX0Wr2egCoiiqwW1gj2R87DEMbw5l7e8zf0QVIxssB239x2X9Ch6dRG1nHl8wUwpZH5ZXsQbeM1mOqWKmS7c/55WmFeqXkiu36YM19hKu2oscXxuUTTbYygHchLJwNukVFTL6XIbPcnvNWBo7LL1MgSwbDac6Uo/BAsrTmNrxGk6nqa0x0ev5ckpYKZRSZ/VWRUpoTH0p5H9Dlat4YU6S9c/hTNbrYZUaKaP8cCkndMG8FPG3dN1j2vzN0g6Pt4p43KZewR5xZRFqVoTA5brLEjZFq2zmaihcdPLC2QetwbD4+NZJszDgbTYnU5InVDlN9ixhJe47wdC8TEg4akFh4DE1bbqR0LG2vTjklQo0IrHzqBBkffIO1b79MWpU727vZbTgY3Q8MyheF3RNOYr90uOw3XoH0dz/72kF4a5bHe2mfDxrY/IJoDqntC+OtJ41pXzgR3DTLnXYR0ziORRBeSm4Wb2cVsfnM6m83/uP6WUbCL9rsY3tiLhEhpMxWqumfAiQvLKL7meBHRrbqiuLs0dVN7tLHaOlod4tvnQzUeKsx9RHWUdg3qGRLYRW7n7qaRQETmx8TOlAR/T4FpDJpRG5omdNnRZX9a/NTfg435wT/tadRo5WowdWh/7Sxt26KTrHGvCzra9KX3P3cGDrw=</source>
  </file>
  <file path="Stream/CharsetStreamFilter.php" generated-path="Stream.CharsetStreamFilter.html" hash="e182535fee35370ad7fe14e10e21ffa8" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="SimpleDi">\ZBateson\MailMimeParser\SimpleDi</namespace-alias>
    <namespace-alias name="php_user_filter">\php_user_filter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="23" package="MailMimeParser">
      <extends>\php_user_filter</extends>
      <name>CharsetStreamFilter</name>
      <full_name>\ZBateson\MailMimeParser\Stream\CharsetStreamFilter</full_name>
      <docblock line="23">
        <description>Implements a filter converting the stream's character encoding while reading
from it, so the charset of strings returned by read operations are guaranteed
to be encoded to UTF-8.</description>
        <long-description>The underlying charset is set on the filtername used when creating the
stream with stream_filter_append - it is assumed the charset is after a '.'
character in the name.</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Stream" line="28" package="MailMimeParser">
        <name>STREAM_FILTER_NAME</name>
        <full_name>\ZBateson\MailMimeParser\Stream\CharsetStreamFilter::STREAM_FILTER_NAME</full_name>
        <value>'mailmimeparser-encode'</value>
        <docblock line="28">
          <description>Name used when registering with stream_filter_register.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="34" package="MailMimeParser">
        <name>$converter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\CharsetStreamFilter::converter</full_name>
        <default>null</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;the charset&#10;     converter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter" variable="">
            <type>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="45" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\CharsetStreamFilter::filter()</full_name>
        <docblock line="45">
          <description>Filter implementation converts encoding before returning PSFS_PASS_ON.</description>
          <long-description></long-description>
          <tag name="param" line="45" description="" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="45" description="" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="45" description="" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
          <tag name="param" line="45" description="" type="boolean" variable="$closing">
            <type>boolean</type>
          </tag>
          <tag name="return" line="45" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closing</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="69" package="MailMimeParser">
        <name>onCreate</name>
        <full_name>\ZBateson\MailMimeParser\Stream\CharsetStreamFilter::onCreate()</full_name>
        <docblock line="69">
          <description>Overridden to extract the charset from the params array and check if the
passed charset is supported or listed in the translation table in
CharsetStreamFilter::translatedCharsets.</description>
          <long-description>Unfortunately __construct doesn't seem to be called for this class, so
setting up 'availableCharsets' in the constructor doesn't work out.</long-description>
        </docblock>
      </method>
    </class>
    <source>eJx9Vllv20YQftevmAJCKbkSWcd14MiNG8exYQH1gcjpQ+pCWJEjaytyl9hdWjEK//fOXrosmy88Zuf+5hv+/kc9q1vZ3l4L9uBuxjVMeYlA95opA3IKZobw/TMzqKW4v2K8vOIV3jKlUUGt5L+Ym5SUrf6nkucoNMLMmHqQZbKmN9moHFOpHrIg1dlEF/3wkpJ7+Dz6QupZS7AKdc3yVx3ej4xCVh23Wo1+4xCv6hK/8GN3ihyM6a7GlJhBRboh26E9VaEwGhh4IeRSPKIyXDy4vLVzl2jIZ0yx3J5AkcvCyhczWyiS2zdrb6pkBdz0QEunbHU0uhqSHTqk6bRplMACJk9OE6hCihkuBcWgEB4aciMMYmENGgkT9A5Jhd6+3V30j2yxwXcLoREFqvLJxhPdUeucV+GC8HnZwgIVoaCoUUBOvmOO1pJPExbczMJzKNaY1dTCAvqUlzXMtG4qG8taevbz1FaGQZIm1tyqWNwHYd0vMcIaM5MKvjM24wWEFrr25yXZhzNv13f6wrcFfxgKQ2/3svVfC+hy/bTXHlxvJqrwgWs66Pr1MrsoToN65u6EAW1gdPf1/PRqfDH88+786/j69OocPkJSEdIqQlrtkNb3vUmOnd52LJ8emYL7t5F8f4klQeA+JH3m4UcZr1U42oMQnD+xETLNoaE5pLTbywMUrmjKkvC+FVeoKY/wd/iLhvUK4BOcSoUBs/bD7ehiNL49HY3GN9exZLDMlkpCGFLoBx7aXLwqko3ZknFhXOgOXluyiZQlCUup3aAFmQ/LKm5WopkQs8C0EblLy3e6Q9H0nN8e/Lz001ta7TpdjyZ7+dnutCdNPieIf4y48e/jis1xvFDcIJuUaI13u2va9lr2oSDttiFi7Z8sW7N8jB76JwUzrHv8woQft19cACWKN89vvGRZ9BqGm8aUyELmjW05FinA0MCCEd9L+g6llHPbY2bg8vKvK6K80CwL8G3LhAsiBB0xk3L7kO5tQ4qmPwB6SAcC7Bg5wx91ybiInV4Z1rLCxYxicMRBIY8My+c3ZGJaygWtpAccxOWirUgGUZrLKmPZwf7+wbv3v73PDg4Ofz38sG2+QKIYRwYMKqwmFA7NKLdNhJyVJZU6CZQPE7rNtZvD28vb7dQ6h+lh+sI+BV4i06abbkg2weMptePBuCkSuOhsdK23hqPuWrufl09hDNZH0x973slJtpSKFwVxI+0TolVL1Bt07raY/eCGz64lxZ5c1/IZ5nPgU781vL2aGBuLjd3T1LV0uCeQlJZei7gGyJnQpS+gcUVfccQO1h8MogIWQaxf0M43QWA0jaBD5ROMx468VUNJFRK1SAwtQ6zCKg09tvB16HILx+7raI1cuL3Y1JCwRyJsG2X0ncQ8lj7ITvSykGoO1NL0TTaS4syuXuxsE047VpB2zHB00z86OvzQ309WHW9TBiRzfwBrn6kbnZ+wqs1TBI5v299JMJj8s4Oalr5e09mFtNddGbnLiwt4x8ldtldpFpy04g/cYGDJuUQjRae7XotNOrV+Ct4/ofHZ3qOdmGzPBtSNo/Hc+h+ZoGwd</source>
  </file>
  <file path="Stream/StreamLeftover.php" generated-path="Stream.StreamLeftover.html" hash="0ba3f3baa720adda68067f62c1f60a1a" package="MailMimeParser">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="14" package="MailMimeParser">
      <extends/>
      <name>StreamLeftover</name>
      <full_name>\ZBateson\MailMimeParser\Stream\StreamLeftover</full_name>
      <docblock line="14">
        <description>Unfortunately using a class object specifically to handle leftovers seems to
be the only way.  The last call to php_user_filter with $closing set to true
doesn't seem to be 'writable' to $out, if the entire stream is in a single
buffer.  If, however, the stream is large enough to be buffered multiple
times, the before last call seems to both contain data and have $closing set
to true.</description>
        <long-description></long-description>
        <tag name="author" line="14" description="Zaahid Bateson" link="mailto:zbateson@mail.ubc.ca"/>
        <tag name="package" line="14" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="16" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamLeftover::value</full_name>
        <default>''</default>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="17" package="MailMimeParser">
        <name>$encodedValue</name>
        <full_name>\ZBateson\MailMimeParser\Stream\StreamLeftover::encodedValue</full_name>
        <default>''</default>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="16" code="PPC:ERR-50007">No summary for property $value</error>
      <error line="17" code="PPC:ERR-50007">No summary for property $encodedValue</error>
    </parse_markers>
    <source>eJxVUdGK2zAQfPdXzEPAEELuAy5tQ98KPTi4ax9CIKzkdaxDloy0SkhL/70rO6V3epJWO7Mzs7sv0zA1gUbOE1nG4SsJ5xiOT+T8kxv5mVLmdHyRxDQ+Ns3Det1gjR+hj0lK0G5/Q8kunEGwnnJGNG9sBXli63pnyWuHRAwUOs/w3Eu8cMrIzGPWn8pnGDIwYtDeK922wKs+lU5QCSpehZ6Kajn1zgsnXJ0MWFkf5+GZpTZJKlz5usg5tDLPqHXlb6/JCRnPbS2sYpENXD+P5SAuMfJsEi7DBXVTef3MZkrfc1JR3/oNhnhl1b+Zkf8hntK5MsVyHu4TFxh3GIsXNy1coqHmBWxYQ3zv8l8iMFG92RiEVElHQtDwNMELf3A88y2mt3qvzz0VGWLCgWhwHe7rxO6XWW77URe7LcZuLX1WwEOzLG1Z8Pf7cprfDfRMxXhnsbqQL4xPaNvHD3UONnbc/Xz3/af5C0q5yVc=</source>
  </file>
  <file path="Stream/PartStreamRegistry.php" generated-path="Stream.PartStreamRegistry.html" hash="a8fb24f35d77e900f11072ca74cd1115" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\MimePart</namespace-alias>
    <namespace-alias name="Message">\ZBateson\MailMimeParser\Message</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="24" package="MailMimeParser">
      <extends/>
      <name>PartStreamRegistry</name>
      <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry</full_name>
      <docblock line="24">
        <description>Factory class for PartStream objects and registration class for Message
handles.</description>
        <long-description>PartStreamRegistry is used for \ZBateson\MailMimeParser\Message\MessageParser to
register Message stream handles for opening with PartStreams, and to open
file handles for specific mime parts of a message.  The PartStreamRegistry
maintains a list of opened resources, closing them either when unregistering
a Message or on destruction.</long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="29" package="MailMimeParser">
        <name>$registeredHandles</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::registeredHandles</full_name>
        <default></default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;Array of handles, with message IDs as keys.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="35" package="MailMimeParser">
        <name>$numRefCountsForHandles</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::numRefCountsForHandles</full_name>
        <default></default>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="35" description="&lt;p&gt;number of registered part stream handles with message IDs as&#10;keys&lt;/p&gt;" type="array&lt;mixed,integer&gt;" variable="">
            <type>array&lt;mixed,integer&gt;</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="43" package="MailMimeParser">
        <name>register</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::register()</full_name>
        <docblock line="43">
          <description>Registers an ID for the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="43" description="" type="string" variable="$id">
            <type>string</type>
          </tag>
          <tag name="param" line="43" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="57" package="MailMimeParser">
        <name>unregister</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::unregister()</full_name>
        <docblock line="57">
          <description>Unregisters the given message ID and closes the associated resource
handle.</description>
          <long-description></long-description>
          <tag name="param" line="57" description="" type="string" variable="$id">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="69" package="MailMimeParser">
        <name>increaseHandleRefCount</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::increaseHandleRefCount()</full_name>
        <docblock line="69">
          <description>Increases the reference count for streams using the resource handle
associated with the message id.</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="integer" variable="$messageId">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$messageId</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="81" package="MailMimeParser">
        <name>decreaseHandleRefCount</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::decreaseHandleRefCount()</full_name>
        <docblock line="81">
          <description>Decreases the reference count for streams using the resource handle
associated with the message id.  Once the reference count hits 0,
unregister is called.</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="integer" variable="$messageId">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$messageId</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="95" package="MailMimeParser">
        <name>get</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::get()</full_name>
        <docblock line="95">
          <description>Returns the resource handle with the passed $id.</description>
          <long-description></long-description>
          <tag name="param" line="95" description="" type="string" variable="$id">
            <type>string</type>
          </tag>
          <tag name="return" line="95" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="110" package="MailMimeParser">
        <name>attachEncodingFilterToStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::attachEncodingFilterToStream()</full_name>
        <docblock line="110">
          <description>Attaches a stream filter on the passed resource $handle for the part's
encoding.</description>
          <long-description></long-description>
          <tag name="param" line="110" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="110" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="138" package="MailMimeParser">
        <name>attachCharsetFilterToStream</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::attachCharsetFilterToStream()</full_name>
        <docblock line="138">
          <description>Attaches a mailmimeparser-encode stream filter based on the part's
defined charset.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="138" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="159" package="MailMimeParser">
        <name>attachContentPartStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::attachContentPartStreamHandle()</full_name>
        <docblock line="159">
          <description>Creates a part stream handle for the start and end position of the
message stream, and attaches it to the passed MimePart.</description>
          <long-description></long-description>
          <tag name="param" line="159" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="159" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="159" description="" type="integer" variable="$start">
            <type>integer</type>
          </tag>
          <tag name="param" line="159" description="" type="integer" variable="$end">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$start</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$end</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="182" package="MailMimeParser">
        <name>attachOriginalPartStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStreamRegistry::attachOriginalPartStreamHandle()</full_name>
        <docblock line="182">
          <description>Creates a part stream handle for the start and end position of the
message stream, and attaches it to the passed MimePart.</description>
          <long-description></long-description>
          <tag name="param" line="182" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="182" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="182" description="" type="integer" variable="$start">
            <type>integer</type>
          </tag>
          <tag name="param" line="182" description="" type="integer" variable="$end">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$start</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$end</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
    </class>
    <source>eJztWNtu20YQfddXTAGhklJdUqDog1UlTewYMVAjgaz2IbZhrMiVuA1FsrtLO0bhf+/MXkiKpCQnTos+hIAkS7tzO3NmZte/vMyirDN59qwDz2ARCQUrEXPAz4xJDekKdMThw2umuUqTq3Mm4nOx4e+ZVFxCJtM/eaDHKEzyv8Yi4IniEGmdHU0maYbf0lwGfJzK9cStqslShSP3ZYzm4fXFCYpPOgnbcJWxYKfBqwstOdtMO51c7d50zpVia37lftLTx+xGnQ6FUxboVN5DEDOFcKQSSIm1DOmSAlbAkhAkXwulJdMiTSq7nUJSFeG2mCvCB+hVKppb2XtCGr0LjeTVwYjsp0Nfp6TTesELu6Csp862UUyJEMka7oSOKk6ooYlDp2YDKTPJr0qqjAdiJQLYoDeGE4pIwWBjrY0BWcNbAiNtGyYSjS+EC2L8lSTJEifsLDHQhSBOFTmHRNsARw8xlruIJ5AnPjZcJn2siJFiSiDkaCkPCP+CgizXEa5+YCwSITg8Dbtshlo8/bsD+Jjs04NKbpkEJiW7h1fmHf12oAwthi56ODvB2BR85PeUZCM9MZ+ZFLdoG7o+BB6+tRqmZr3VJKJ1eQ1JvlkiBGizlLXVWMtsiydeHTnU7g9qn/PVcZonWp2msnCq7tDc2Saqo3JDBmoFGYJYyZ9zxgcPRTzoMLqKHlNquyKsLRTyXatg29l8ie0BVnliclvg0Ec9Qy8xMFtt7ugRK+h/J9A53e9qbGSjFw3oL1H+ejCoCNGzdzfMvL1pm1A7ml7yeSnz0LHvdZh/LziuDLxrcYvML5NqCpQqhNt1RD8NBGayTIFX9ZmZ8LxINTY0akAe7bLsCO86zCvjzAGIy7jz5GBChs0MlEXaovahtYDOkgD3e5gkX6GeBPkVUG5sK7M9D9ut6zZ1EntVFYxNidFWnxER7gIYixe6bttZuJfPwvlqg/ME6pfSddAPsK2Qu4YfZvDjPphO+H8FE8A7UtxmJhI4RZ4PvaKScDQNAxbH/GugHPJ/DeVRgTI91HkeLzubYWPY0YOqpVe6ebiLzLnOZaLaslXmxnXu7m4Kt3RraTTXe0074Guq9GbH+OLG7GwneRzXIags79W5rxReac2CiNPhxA1WPP0QCTGUtknn5kBlEkrdKyYu0jsNEb1d2B4+27nTKnRJ8WeNSzfbi0QwE9kb59GpiWqR2oba37azc5x2fUA4xxAencbpHdGShEYvMNVvOQu5/IPFOe/3jtNE80SPFpIlCot95I33BhX6KuRiEGGxeN31jAdYrtD7K8eZFI4wLDw9LmPeO9raZDSZWG5swm5YhofKsO8iGUJvs8lGQZrccqnHdW0j7AtpyHtDuFjM37w6vzk9+23xZn6Df58Mpg1LSzT0cdri5RLff/7pab5ZHV/Lo0+jPDfI1hGrLLeu7BVrCj0mSOQ43Rgyw3E0/OQQQ75ieaybntT2Pjyu4msO2vhrfYCyE5bdoFrt6I2ga0wQkbz+/xT9sXXoy2reDDJb4EIt+CdNMv1GX27NfSMvngyNhTo5HPeaG5tUae65hJ7LQQ9mL6Dent4TkJzmadmi7jPiYSE2gOstrY8Yt8cYvzY0al7LivGgNK3R8R3hgQzvuCZN9j8qXtNm685ur+PMs1RouppXRpFP4y667WWTvzr7g0Xbwcr43LaAIewd/Y58FuL66b1Bv7orQ2d5aAw1JhHe42fFXpPcd+a/MGdhf7B9CuObTN9/3VOGn/ozTCwSvW/6N7F35Bw6mkx6MDZejqH30gQyw1+2z3eWDbjhe4xwZgTwD6Sh7FViqB9F9w7yWi1P24XbG8JuWVtAW/mcuz7ksrkt1N5pv1VIe4W8k2ItEhZ/K5Gnl0iVqR7XLUzrRH3o/AN7LeAn</source>
  </file>
  <file path="Stream/Base64DecodeStreamFilter.php" generated-path="Stream.Base64DecodeStreamFilter.html" hash="25f9ef14645d998edebd85e2f632ea64" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="php_user_filter">\php_user_filter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="22" package="MailMimeParser">
      <extends>\php_user_filter</extends>
      <name>Base64DecodeStreamFilter</name>
      <full_name>\ZBateson\MailMimeParser\Stream\Base64DecodeStreamFilter</full_name>
      <docblock line="22">
        <description>Unfortunately neither the built-in base64 decoder in PHP, nor the HHVM
implementation for their ConvertFilter seem to handle large streams
correctly.  There appears to be no provision for data coming in when they're
not split on 4 byte-chunks (each 4-byte chunk of base-64 encoded data
translates to 3-bytes of unencoded data).</description>
        <long-description>encoded data).</long-description>
        <tag name="author" line="22" description="Zaahid Bateson"/>
        <tag name="package" line="22" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Stream" line="27" package="MailMimeParser">
        <name>STREAM_FILTER_NAME</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64DecodeStreamFilter::STREAM_FILTER_NAME</full_name>
        <value>'mmp-convert.base64-decode'</value>
        <docblock line="27">
          <description>Name used when registering with stream_filter_register.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="33" package="MailMimeParser">
        <name>$leftover</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64DecodeStreamFilter::leftover</full_name>
        <default>''</default>
        <docblock line="33">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="33" description="&lt;p&gt;Leftovers from the last incomplete line that was parsed, to&#10;     be prepended to the next line read.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="46" package="MailMimeParser">
        <name>getRawBytes</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64DecodeStreamFilter::getRawBytes()</full_name>
        <docblock line="46">
          <description>Returns an array of complete lines (including line endings) from the
passed $bucket object.</description>
          <long-description>If the last line on $bucket is incomplete, it's assigned to
$this-&gt;leftover and prepended to the first element of the first line in
the next call to getLines.</long-description>
          <tag name="param" line="46" description="" type="object" variable="$bucket">
            <type>object</type>
          </tag>
          <tag name="return" line="46" description="" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$bucket</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="70" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Base64DecodeStreamFilter::filter()</full_name>
        <docblock line="70">
          <description>Filter implementation converts encoding before returning PSFS_PASS_ON.</description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="70" description="" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="70" description="" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
          <tag name="param" line="70" description="" type="boolean" variable="$closing">
            <type>boolean</type>
          </tag>
          <tag name="return" line="70" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closing</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <source>eJx9Vm1v2zYQ/u5fcQO82U5tKW1egDVLl6ZNkABJGsTZPnQZDEo621wkUiCpuMGQ/747UvKLnEyAIYv39tzdwyN/+72cl514Z6cDO3A/lxamMkegdymMAz0FN0f4fiocWq0eroXMr2WBt8JYNFAa/Q+mLiJjtj/JZYrKIsydKz/GsS7pS1cmxUibWVxLbZzYbFR/RBQeTsdfyTzuKFGgLUX6ZsCHsTMoiqNOp6IoZDqht5kQZIeGVus8/lBTbVylyEf+DAol5WB8IklFqiOpIBEWD/chw1RnJKOV24vbISgd9C4u/rxmT7IocyxQOeGkVjANYmngi1ZPaNy5jwwWsQCnYS5URtXLhZkhWI/VsptUG0N1yp8joCKjQRBliZQSGyVIYbmUT9I2QTLhBFkVUs0Y22KOigM/9wyyP6Ud2DKX1CAF+5A8Oxyl80o9WuijSOewP+I18GvcRE53RPmi4nwz758dOSOUzbnWjGTPW1k2qNS66oA7DPx7ffVEVG5OsL8LMZcZ1M3zPU1zYS2tcLm/+mqHHtaVwx8OVWbbvez82wF6fD/52YEb4gaQRhaKYXAmLSlygRbU37ratfmkEUe1eezfqVbWwfj+7uzz9eT88ur+7G5y8/n6DI6hVxTlKA1NjQI5RoEcvSNv28Zz8iQMB2UAVzh1mixp8xhdeAJR1o46Ry0kAlEncqmQBMLBQvi9RZkMqeaNO/8QE0qDtGm4wtQPdqSoQsGa8ss28ymNfKJSQzevAXAib+C9Q1cZZUEoEMaIZ27yBjqiDuHNq4wz8gEJB/23g1VWjbOSekoQu0mVPiKRMKmnQJA278vpqhTeIZG1MaEBs6rOEKTrETRr5Uz51BsXXUcjafRpmR/tr+0STaWhCBg2ajOywqIPK1XjblnQVOQ5m8/QXXHuW9hPqEWiqDNrUC+Fxhezbv9ff7/alGmlUj80KMadWJzyzurXjgZeM3Ccn64RC+odZTYj6pY5jcB+L36w7+LekDo6bACMPvl9d7Q0lFPot2v00zGzYLDmfi1EWznygqNN1ZbOilT8vKxQq6uVCtUiR9VnbwP4GfZbGFeqDG93C91WSFsl5NL7G8JoZT84ei2tDe3dtwxW0OsGrnJ/6bQ3TD2gWidAPSJsGIS8VRKkgY21R164HZ+PJ7efx+PJt5u3eGUwnIvQXZFzS6Qr15JJ4neXp1hVYNaSJVrnJMy1JRBtppLhJkmrhA7gFUfD2OwTmqGPO4RflnGGS69t2i7mfFdoSB1IwEM4fE8K8YiThZEORZIjOx9s9T0cOEtevrZXWg1XX2pca6R7Y3d4/SYNeHe8ZrytxG31TsP0n4Tp3w8IW043PuK4QR/S59lWqUynFdMGMzrzL8PYn2pah1zrR+YJnQV8zaDBVzec47U982VAEt2ao0nyn2jrYkJ3hPpGckkKNXV5WOIPmiY04bK2Y6sLXPB5JPlmQZDHTqSP38jFNNcLmvAz/Njc4yyLdC2KaGrHIt57/37vw+H+Yby3d7B78GvbPVWPbkE+TSiwSAgOHZiSieCHL1W6F8rVg4RedHPh4UyXsHZq/YPoINryT8BzpINlEG1INgnIlyyV9QOhN0UKF/2Nrg3XSDD4v5mxvr2b2fHS+Q9rJG0O</source>
  </file>
  <file path="Stream/UUEncodeStreamFilter.php" generated-path="Stream.UUEncodeStreamFilter.html" hash="645dc442039db672e5387839d0109441" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="php_user_filter">\php_user_filter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="16" package="MailMimeParser">
      <extends>\php_user_filter</extends>
      <name>UUEncodeStreamFilter</name>
      <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter</full_name>
      <docblock line="16">
        <description>Stream filter converts binary streams to uuencoded text.</description>
        <long-description></long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Stream" line="21" package="MailMimeParser">
        <name>STREAM_FILTER_NAME</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::STREAM_FILTER_NAME</full_name>
        <value>'mailmimeparser-uuencode'</value>
        <docblock line="21">
          <description>Name used when registering with stream_filter_register.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="26" package="MailMimeParser">
        <name>$leftovers</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::leftovers</full_name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="" type="\ZBateson\MailMimeParser\Stream\StreamLeftover" variable="">
            <type>\ZBateson\MailMimeParser\Stream\StreamLeftover</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="31" package="MailMimeParser">
        <name>$headerWritten</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::headerWritten</full_name>
        <default>false</default>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="31" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="39" package="MailMimeParser">
        <name>convertAndAppend</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::convertAndAppend()</full_name>
        <docblock line="39">
          <description>UUEncodes the passed $data string and appends it to $out.</description>
          <long-description></long-description>
          <tag name="param" line="39" description="&lt;p&gt;data to convert&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="39" description="&lt;p&gt;output bucket stream&lt;/p&gt;" type="resource" variable="$out">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="56" package="MailMimeParser">
        <name>writeUUEncodingHeader</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::writeUUEncodingHeader()</full_name>
        <docblock line="56">
          <description>Writes out the header for a uuencoded part to the passed stream resource
handle.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="resource" variable="$out">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="72" package="MailMimeParser">
        <name>getUUEncodingFooter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::getUUEncodingFooter()</full_name>
        <docblock line="72">
          <description>Returns the footer for a uuencoded part.</description>
          <long-description></long-description>
          <tag name="return" line="72" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="85" package="MailMimeParser">
        <name>readAndConvert</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::readAndConvert()</full_name>
        <docblock line="85">
          <description>Reads from the input bucket stream, converts, and writes the uuencoded
stream to $out.</description>
          <long-description></long-description>
          <tag name="param" line="85" description="&lt;p&gt;input bucket stream&lt;/p&gt;" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;output bucket stream&lt;/p&gt;" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;incremented by number of bytes read from $in&lt;/p&gt;" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="119" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::filter()</full_name>
        <docblock line="119">
          <description>Filter implementation converts encoding before returning PSFS_PASS_ON.</description>
          <long-description></long-description>
          <tag name="param" line="119" description="" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="119" description="" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="119" description="" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
          <tag name="param" line="119" description="" type="boolean" variable="$closing">
            <type>boolean</type>
          </tag>
          <tag name="return" line="119" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closing</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="128" package="MailMimeParser">
        <name>onCreate</name>
        <full_name>\ZBateson\MailMimeParser\Stream\UUEncodeStreamFilter::onCreate()</full_name>
        <docblock line="128">
          <description>Sets up the leftovers object</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="26" code="PPC:ERR-50007">No summary for property $leftovers</error>
      <error line="31" code="PPC:ERR-50007">No summary for property $headerWritten</error>
    </parse_markers>
    <source>eJylV2tv40QU/Z5fcakCSUoSFwn6gZBlu0srkLalarogLUHZsXNTm7XH1sy4oWL737nzsB2/wgKWWsv23Ne5Z86dfPd9FmYD7/R0AKdwH0YSdlGMQPeMCQXpDlSI8O4VUyhTvr5mUXwdJXjLhEQBmUj/wEDNyVjbv4yjALlECJXKvvW8NKOnNBcBzlPx4Lmv0vPlduYe5hQeXq1+IHNvwFmCMmNBb8D1SglkyWIwyCkKmW7oLjaUskJBb10ddhXY1xCk/BGFkuBHnIknkOarBJVCniMP0i1uQeGfVRksV2Eq4B1jYbQFl4rJMIiZlPD27aUxs3GubBhygHwrm1kN/hoAXSYzfZ3CDVUJtGIL+xA5CHyIJC2M+APsIxW6/Jz5pvg8d+aeuVNNUsHq/u7y4npz9dOb+8u7zc3F9SUsYZQQZAlBlhnIZkWNo4WxbGbz8pEJB9gb3KmUoKpFykT0SADAMHZf5RE/fprG3dYhsi2KX0WkCCXKcsdiid2eCnSloV5GgBNUwy1TTEOjYWJ8CyzLDNyR0o0cprkqEIIyJUKAaOCMrAfzjwwcKRpLBVq6Gn9Afxnd/Dz4gMq1pbO6Xc4DFaW88HrBtxcmvbEJOjXuJsbEskFfQ7eYiluSJ3ygVmcxkX888tZizT+uxcc190ZTONGPJ9PC+6boqPU+mSwOfMbIuPEoqOpkLHOf8h7bhyriZApnU5h9RbbW0POo9oTaC5Q1xBFHeA9BSKAEqiAEXdEOxlWMJZFtNDkoSV8CVS54ldJzV3K2IpiX76r1jv0W9A1zMBJ+08YnjvvxUJFizV7YD9PSWwHJcye/NAmJXLrDmmCWmbCjDc8OBMHIHxHlgIM2TEmSwl9IdIyxj301Sh1nz14n5thPjP3RJDbu5I6hMcHvkzpwOD8/h9Gi1qWIMlYFPiYT+dtIS7vW2NHvk2bbrMf5EnpNDloKSJu3z8GI53E86iLA/2rtIdW7+3pnmGdVY5emqqep7UZZyjqdON6iB1RVg65MkHGzOc6d4fh7/Y/KPDmeOCMh24k0MblHvKU65d6XUyN+e0thvbosrvDmWPoPoljRkvjTEfG/CmNhEHFlFE7mCeEe8YDkBbkWO/8JeJ741B06XPhPug6y39r6KZvjDdBLSV5fWzjGtN6q6xS+KMM1G7IP9ZFmPHT5LhtsS9gH3BhEmR+jdtmzO8rNUY7C2YtHFueohcw6m73QKxc1Y70dP3OWtTHYjGIi2XVHpGDRZ9McsUrkWF/8XC+qbM+Xy3r+tOXrhkN+h3Ss4BY7+uxGD3wOX3/TWKpS1xyNVzcalTsaIWdHYGgBrSdOLwAHq92e+MUZuQWdu7cBUZe2Hc/IzVg36mdFcf2N6s+zmIstS311TPT2iaA7y0k18Dtdz/8FQq0m1+s/64egQT8bsX1kKn27c1NzlHSLqDuFR0kWG6VhhwcyCehqAh9pKKATaf3idnW12txerFabn28+RS0/Yb53imDjmz4q6wNLKquhU44iMqzLYO7T76VKBe1vg271m5ZeW6cGi3i/hFYKWmHuMjpE6dgsWyGBnWdmNJUshNTXPxOPlpTy15SYwtY47T3NlO67jjONfQCtg82BdZtgz4O/AWhraBE=</source>
  </file>
  <file path="Stream/Helper/CharsetConverter.php" generated-path="Stream.Helper.CharsetConverter.html" hash="2b0e48e64391444d9bb55acdabe61a36" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="http =&gt; //opensource.org/licenses/bsd-license.php BSD"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream\Helper" line="18" package="MailMimeParser">
      <extends/>
      <name>CharsetConverter</name>
      <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter</full_name>
      <docblock line="18">
        <description>Helper class for converting strings between charsets.</description>
        <long-description>CharasetConverter tries to convert using mb_convert_encoding when possible,
defining as many aliases as possible for supported encodings.  If not
supported, iconv is attempted.</long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
      </docblock>
      <property static="true" visibility="public" namespace="ZBateson\MailMimeParser\Stream\Helper" line="29" package="MailMimeParser">
        <name>$mbAliases</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::mbAliases</full_name>
        <default>array('CP850' =&gt; 'CP850', 'GB2312' =&gt; 'GB2312', '646' =&gt; 'ASCII', 'ANSIX341968' =&gt; 'ASCII', 'ANSIX341986' =&gt; 'ASCII', 'CP367' =&gt; 'ASCII', 'CSASCII' =&gt; 'ASCII', 'IBM367' =&gt; 'ASCII', 'ISO646US' =&gt; 'ASCII', 'ISO646IRV1991' =&gt; 'ASCII', 'ISOIR6' =&gt; 'ASCII', 'US' =&gt; 'ASCII', 'USASCII' =&gt; 'ASCII', 'BIG5' =&gt; 'BIG-5', 'BIG5TW' =&gt; 'BIG-5', 'CSBIG5' =&gt; 'BIG-5', '1251' =&gt; 'WINDOWS-1251', 'CP1251' =&gt; 'WINDOWS-1251', 'WINDOWS1251' =&gt; 'WINDOWS-1251', '1252' =&gt; 'WINDOWS-1252', 'CP1252' =&gt; 'WINDOWS-1252', 'WINDOWS1252' =&gt; 'WINDOWS-1252', 'WE8MSWIN1252' =&gt; 'WINDOWS-1252', '1254' =&gt; 'WINDOWS-1254', 'CP1254' =&gt; 'WINDOWS-1254', 'WINDOWS1254' =&gt; 'WINDOWS-1254', '1255' =&gt; 'ISO-8859-8', 'CP1255' =&gt; 'ISO-8859-8', 'ISO88598I' =&gt; 'ISO-8859-8', 'WINDOWS1255' =&gt; 'ISO-8859-8', '850' =&gt; 'CP850', 'CSPC850MULTILINGUAL' =&gt; 'CP850', 'IBM850' =&gt; 'CP850', '866' =&gt; 'CP866', 'CSIBM866' =&gt; 'CP866', 'IBM866' =&gt; 'CP866', '932' =&gt; 'CP932', 'MS932' =&gt; 'CP932', 'MSKANJI' =&gt; 'CP932', '950' =&gt; 'CP950', 'MS950' =&gt; 'CP950', 'EUCJP' =&gt; 'EUC-JP', 'UJIS' =&gt; 'EUC-JP', 'EUCKR' =&gt; 'EUC-KR', 'KOREAN' =&gt; 'EUC-KR', 'KSC5601' =&gt; 'EUC-KR', 'KSC56011987' =&gt; 'EUC-KR', 'KSX1001' =&gt; 'EUC-KR', 'GB180302000' =&gt; 'GB18030', 'CHINESE' =&gt; 'GB2312', 'CSISO58GB231280' =&gt; 'GB2312', 'EUCCN' =&gt; 'GB2312', 'EUCGB2312CN' =&gt; 'GB2312', 'GB23121980' =&gt; 'GB2312', 'GB231280' =&gt; 'GB2312', 'ISOIR58' =&gt; 'GB2312', 'GBK' =&gt; 'CP936', '936' =&gt; 'CP936', 'ms936' =&gt; 'CP936', 'HZGB' =&gt; 'HZ', 'HZGB2312' =&gt; 'HZ', 'CSISO2022JP' =&gt; 'ISO-2022-JP', 'ISO2022JP' =&gt; 'ISO-2022-JP', 'ISO2022JP2004' =&gt; 'ISO-2022-JP-2004', 'CSISO2022KR' =&gt; 'ISO-2022-KR', 'ISO2022KR' =&gt; 'ISO-2022-KR', 'CSISOLATIN6' =&gt; 'ISO-8859-10', 'ISO885910' =&gt; 'ISO-8859-10', 'ISO8859101992' =&gt; 'ISO-8859-10', 'ISOIR157' =&gt; 'ISO-8859-10', 'L6' =&gt; 'ISO-8859-10', 'LATIN6' =&gt; 'ISO-8859-10', 'ISO885913' =&gt; 'ISO-8859-13', 'ISO885914' =&gt; 'ISO-8859-14', 'ISO8859141998' =&gt; 'ISO-8859-14', 'ISOCELTIC' =&gt; 'ISO-8859-14', 'ISOIR199' =&gt; 'ISO-8859-14', 'L8' =&gt; 'ISO-8859-14', 'LATIN8' =&gt; 'ISO-8859-14', 'ISO885915' =&gt; 'ISO-8859-15', 'ISO885916' =&gt; 'ISO-8859-16', 'ISO8859162001' =&gt; 'ISO-8859-16', 'ISOIR226' =&gt; 'ISO-8859-16', 'L10' =&gt; 'ISO-8859-16', 'LATIN10' =&gt; 'ISO-8859-16', 'CSISOLATIN2' =&gt; 'ISO-8859-2', 'ISO88592' =&gt; 'ISO-8859-2', 'ISO885921987' =&gt; 'ISO-8859-2', 'ISOIR101' =&gt; 'ISO-8859-2', 'L2' =&gt; 'ISO-8859-2', 'LATIN2' =&gt; 'ISO-8859-2', 'CSISOLATIN3' =&gt; 'ISO-8859-3', 'ISO88593' =&gt; 'ISO-8859-3', 'ISO885931988' =&gt; 'ISO-8859-3', 'ISOIR109' =&gt; 'ISO-8859-3', 'L3' =&gt; 'ISO-8859-3', 'LATIN3' =&gt; 'ISO-8859-3', 'CSISOLATIN4' =&gt; 'ISO-8859-4', 'ISO88594' =&gt; 'ISO-8859-4', 'ISO885941988' =&gt; 'ISO-8859-4', 'ISOIR110' =&gt; 'ISO-8859-4', 'L4' =&gt; 'ISO-8859-4', 'LATIN4' =&gt; 'ISO-8859-4', 'CSISOLATINCYRILLIC' =&gt; 'ISO-8859-5', 'CYRILLIC' =&gt; 'ISO-8859-5', 'ISO88595' =&gt; 'ISO-8859-5', 'ISO885951988' =&gt; 'ISO-8859-5', 'ISOIR144' =&gt; 'ISO-8859-5', 'ARABIC' =&gt; 'ISO-8859-6', 'ASMO708' =&gt; 'ISO-8859-6', 'CSISOLATINARABIC' =&gt; 'ISO-8859-6', 'ECMA114' =&gt; 'ISO-8859-6', 'ISO88596' =&gt; 'ISO-8859-6', 'ISO885961987' =&gt; 'ISO-8859-6', 'ISOIR127' =&gt; 'ISO-8859-6', 'CSISOLATINGREEK' =&gt; 'ISO-8859-7', 'ECMA118' =&gt; 'ISO-8859-7', 'ELOT928' =&gt; 'ISO-8859-7', 'GREEK' =&gt; 'ISO-8859-7', 'GREEK8' =&gt; 'ISO-8859-7', 'ISO88597' =&gt; 'ISO-8859-7', 'ISO885971987' =&gt; 'ISO-8859-7', 'ISOIR126' =&gt; 'ISO-8859-7', 'CSISOLATINHEBREW' =&gt; 'ISO-8859-8', 'HEBREW' =&gt; 'ISO-8859-8', 'ISO88598' =&gt; 'ISO-8859-8', 'ISO885981988' =&gt; 'ISO-8859-8', 'ISOIR138' =&gt; 'ISO-8859-8', 'CSISOLATIN5' =&gt; 'ISO-8859-9', 'ISO88599' =&gt; 'ISO-8859-9', 'ISO885991989' =&gt; 'ISO-8859-9', 'ISOIR148' =&gt; 'ISO-8859-9', 'L5' =&gt; 'ISO-8859-9', 'LATIN5' =&gt; 'ISO-8859-9', 'CSKOI8R' =&gt; 'KOI8-R', 'KOI8R' =&gt; 'KOI8-R', '8859' =&gt; 'ISO-8859-1', 'CP819' =&gt; 'ISO-8859-1', 'CSISOLATIN1' =&gt; 'ISO-8859-1', 'IBM819' =&gt; 'ISO-8859-1', 'ISO8859' =&gt; 'ISO-8859-1', 'ISO88591' =&gt; 'ISO-8859-1', 'ISO885911987' =&gt; 'ISO-8859-1', 'ISOIR100' =&gt; 'ISO-8859-1', 'L1' =&gt; 'ISO-8859-1', 'LATIN' =&gt; 'ISO-8859-1', 'LATIN1' =&gt; 'ISO-8859-1', 'CSSHIFTJIS' =&gt; 'SJIS', 'SHIFTJIS' =&gt; 'SJIS', 'SHIFTJIS2004' =&gt; 'SJIS-2004', 'SJIS2004' =&gt; 'SJIS-2004')</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;aliased charsets supported by mb_convert_encoding.&#10;The alias is stripped of any non-alphanumeric characters (so CP367&#10;is equal to CP-367) when comparing.&#10;Some of these translations are already supported by&#10;mb_convert_encoding on &quot;my&quot; PHP 5.5.9, but may not be supported in&#10;other implementations or versions since they're not part of&#10;documented support.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="public" namespace="ZBateson\MailMimeParser\Stream\Helper" line="189" package="MailMimeParser">
        <name>$iconvAliases</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::iconvAliases</full_name>
        <default>array('BIG5HKSCS' =&gt; 'BIG5HKSCS', 'HKSCS' =&gt; 'BIG5HKSCS', '037' =&gt; 'CP037', 'EBCDICCPCA' =&gt; 'CP037', 'EBCDICCPNL' =&gt; 'CP037', 'EBCDICCPUS' =&gt; 'CP037', 'EBCDICCPWT' =&gt; 'CP037', 'CSIBM037' =&gt; 'CP037', 'IBM037' =&gt; 'CP037', 'IBM039' =&gt; 'CP037', '1026' =&gt; 'CP1026', 'CSIBM1026' =&gt; 'CP1026', 'IBM1026' =&gt; 'CP1026', '1140' =&gt; 'CP1140', 'IBM1140' =&gt; 'CP1140', '1250' =&gt; 'CP1250', 'WINDOWS1250' =&gt; 'CP1250', '1253' =&gt; 'CP1253', 'WINDOWS1253' =&gt; 'CP1253', '1256' =&gt; 'CP1256', 'WINDOWS1256' =&gt; 'CP1256', '1257' =&gt; 'CP1257', 'WINDOWS1257' =&gt; 'CP1257', '1258' =&gt; 'CP1258', 'WINDOWS1258' =&gt; 'CP1258', '424' =&gt; 'CP424', 'CSIBM424' =&gt; 'CP424', 'EBCDICCPHE' =&gt; 'CP424', 'IBM424' =&gt; 'CP424', '437' =&gt; 'CP437', 'CSPC8CODEPAGE437' =&gt; 'CP437', 'IBM437' =&gt; 'CP437', '500' =&gt; 'CP500', 'CSIBM500' =&gt; 'CP500', 'EBCDICCPBE' =&gt; 'CP500', 'EBCDICCPCH' =&gt; 'CP500', 'IBM500' =&gt; 'CP500', '775' =&gt; 'CP775', 'CSPC775BALTIC' =&gt; 'CP775', 'IBM775' =&gt; 'CP775', '860' =&gt; 'CP860', 'CSIBM860' =&gt; 'CP860', 'IBM860' =&gt; 'CP860', '861' =&gt; 'CP861', 'CPIS' =&gt; 'CP861', 'CSIBM861' =&gt; 'CP861', 'IBM861' =&gt; 'CP861', '862' =&gt; 'CP862', 'CSPC862LATINHEBREW' =&gt; 'CP862', 'IBM862' =&gt; 'CP862', '863' =&gt; 'CP863', 'CSIBM863' =&gt; 'CP863', 'IBM863' =&gt; 'CP863', '864' =&gt; 'CP864', 'CSIBM864' =&gt; 'CP864', 'IBM864' =&gt; 'CP864', '865' =&gt; 'CP865', 'CSIBM865' =&gt; 'CP865', 'IBM865' =&gt; 'CP865', '869' =&gt; 'CP869', 'CPGR' =&gt; 'CP869', 'CSIBM869' =&gt; 'CP869', 'IBM869' =&gt; 'CP869', '949' =&gt; 'CP949', 'MS949' =&gt; 'CP949', 'UHC' =&gt; 'CP949', 'ROMAN8' =&gt; 'ROMAN8', 'HPROMAN8' =&gt; 'ROMAN8', 'R8' =&gt; 'ROMAN8', 'CSHPROMAN8' =&gt; 'ROMAN8', 'ISO2022JP2' =&gt; 'ISO2022JP2', 'THAI' =&gt; 'ISO885911', 'ISO885911' =&gt; 'ISO885911', 'ISO8859112001' =&gt; 'ISO885911', 'JOHAB' =&gt; 'CP1361', 'MS1361' =&gt; 'CP1361', 'MACCYRILLIC' =&gt; 'MACCYRILLIC', 'CSPTCP154' =&gt; 'PT154', 'PTCP154' =&gt; 'PT154', 'CP154' =&gt; 'PT154', 'CYRILLICASIAN' =&gt; 'PT154', 'TIS620' =&gt; 'TIS620', 'TIS6200' =&gt; 'TIS620', 'TIS62025290' =&gt; 'TIS620', 'TIS62025291' =&gt; 'TIS620', 'ISOIR166' =&gt; 'TIS620')</default>
        <docblock line="189">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="189" description="&lt;p&gt;aliased charsets supported by iconv.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream\Helper" line="282" package="MailMimeParser">
        <name>$fromCharset</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::fromCharset</full_name>
        <default></default>
        <docblock line="282">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="282" description="&lt;p&gt;charset to convert from&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream\Helper" line="287" package="MailMimeParser">
        <name>$toCharset</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::toCharset</full_name>
        <default></default>
        <docblock line="287">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="287" description="&lt;p&gt;charset to convert to&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream\Helper" line="293" package="MailMimeParser">
        <name>$fromCharsetMbSupported</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::fromCharsetMbSupported</full_name>
        <default>true</default>
        <docblock line="293">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="293" description="&lt;p&gt;indicates if $fromCharset is supported by&#10;mb_convert_encoding&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream\Helper" line="298" package="MailMimeParser">
        <name>$toCharsetMbSupported</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::toCharsetMbSupported</full_name>
        <default>true</default>
        <docblock line="298">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="298" description="&lt;p&gt;indicates if $toCharset is supported by mb_convert_encoding&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream\Helper" line="306" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::__construct()</full_name>
        <docblock line="306">
          <description>Constructs the charset converter with source/destination charsets.</description>
          <long-description></long-description>
          <tag name="param" line="306" description="" type="string" variable="$fromCharset">
            <type>string</type>
          </tag>
          <tag name="param" line="306" description="" type="string" variable="$toCharset">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fromCharset</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toCharset</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream\Helper" line="323" package="MailMimeParser">
        <name>convert</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::convert()</full_name>
        <docblock line="323">
          <description>Converts the passed string's charset from $this-&gt;fromCharset to
$this-&gt;toCharset.</description>
          <long-description>The function attempts to use mb_convert_encoding if possible, and falls
back to iconv if not.  If the source or destination character sets aren't
supported, a blank string is returned.</long-description>
          <tag name="param" line="323" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="323" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream\Helper" line="352" package="MailMimeParser">
        <name>findSupportedCharset</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::findSupportedCharset()</full_name>
        <docblock line="352">
          <description>Looks up the passed $cs in mb_list_encodings, then strips non
alpha-numeric characters and tries again, then failing that calls
findAliasedCharset.  The method returns the charset name that should be
used in calls to mb_convert_encoding or iconv.</description>
          <long-description>If the charset is part of mb_list_encodings, $mbSupported is set to true.</long-description>
          <tag name="param" line="352" description="" type="string" variable="$cs">
            <type>string</type>
          </tag>
          <tag name="param" line="352" description="" type="boolean" variable="$mbSupported">
            <type>boolean</type>
          </tag>
          <tag name="return" line="352" description="the final charset name to use" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$cs</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$mbSupported</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream\Helper" line="380" package="MailMimeParser">
        <name>findAliasedCharset</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::findAliasedCharset()</full_name>
        <docblock line="380">
          <description>Looks up the passed $comp and $stripped strings in self::$mbAliases, and
returns the mapped charset if applicable.  Otherwise calls
$this-&gt;findAliasedIconvCharset.</description>
          <long-description>$mbSupported is set to false if the charset is not located in
self::$mbAliases.</long-description>
          <tag name="param" line="380" description="" type="string" variable="$comp">
            <type>string</type>
          </tag>
          <tag name="param" line="380" description="" type="string" variable="$stripped">
            <type>string</type>
          </tag>
          <tag name="param" line="380" description="" type="boolean" variable="$mbSupported">
            <type>boolean</type>
          </tag>
          <tag name="return" line="380" description="the mapped charset" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$comp</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stripped</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$mbSupported</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream\Helper" line="399" package="MailMimeParser">
        <name>findAliasedIconvCharset</name>
        <full_name>\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter::findAliasedIconvCharset()</full_name>
        <docblock line="399">
          <description>Looks up the passed $comp and $stripped strings in self::$iconvAliases,
and returns the mapped charset if applicable.  Otherwise returns $comp.</description>
          <long-description></long-description>
          <tag name="param" line="399" description="" type="string" variable="$comp">
            <type>string</type>
          </tag>
          <tag name="param" line="399" description="" type="string" variable="$stripped">
            <type>string</type>
          </tag>
          <tag name="return" line="399" description="the mapped charset (if mapped) or $comp otherwise" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$comp</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stripped</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>eJy1Wntz28YR/1+f4prxhJIrvsCHyLhKQ8KsCJsUOQRVp05cDQhCJmo8WAC0q8nku3f38DoccAfaaT2T6HD7u33d7r24f/nr8XC8aL98eUFeku3BDsmT7VgE/h6NICL+E4kOFnk/NSIr9L1fl4btLG3XWhtBaAXkGPj/ssyoBYNx/E+ObVpeaJFDFB3J7Y+k3faP0OGfAtNq+cHHdgII27tw30w+WqABmeqvgUP7wjNcKzwaplDmr3oUWIb769xyjlbw6iLVPf4mpmOEYIMPLd/7bAWR7X0kYRTAn5DsrOiLZXnEPCCrKES9Cf6nQocBPWo8BvjACCskkZ+yIacQObm7x6Tj0fJMf499Xw7A8uiHob1zrGtkt7eebA9JRkhcw3smhmMD+xC/UyDVMTwdjz7I25OUW9giRHsinh8ho4x+TWyUi/NiRJHlHqEv87pxig7A7L1hHOw9SdxGvRl7Q43NzYy7+O2CwD/qOPwHLD4bATGCwEhV3Wc+YnTcPVfZ30qZ0H9biBbKAlVFvx+PMBLCCN3g+V7TcI4Hwzu5VmCbVIhhgkohuQx9oq57w5sCO2Bi/ftkODgT6roJ5KvY36bvQoCWxOu+ayVBC2EYBYYXOkZk+x74LUDNIHb2zwWbCuOr5tf3yHfu83dkPV+TQWvQGl+T3SmCiUWDIggqhp3tFdj5oEdAbPfoWK7lRYkmMFcgIaRtiCqIdYA9N0A/5JfkXYHP3jdPyAAkJLJSs9v07/G0g2QCf4MEk7xwd5Mk4G7JLzEQ57vN2g0WoDQQ75z2VHM03rHD3PI4j0J0KbgNYqrVamXcGup6NOg0MMuT5nVOu5sqva4SE5P2NatHkg/5gGF/GKMnuqppLKvJva793Ot3x8NRHWIk4kHjSkTT465qqjZdiodq+gr0ftClZG3z9+543BVjtI1IbSHnB6nOU+1uEJOg1RzwpO07AVHVJSO7yiCx4Z12/3r1Tm/SnoKT6zFJfz0QvpUSQimJq8Hk4uqAs9FSB2I9Er77JUS/pFgNJlesBgjfyYxApDRHo8G4OSoJkyKgFztHmgyU6yPlJU54VV+r0LV8WGy1hXZ/9zBZCJCQUWI2o+Ewo0CzIAAHCslS4rinpBRsMpSlLqO9ndy/0QTUcW7DuGgD8BTSZg/qm3VMg2YT2mxWv9F0EQ163m5yIrQZ4tvVZja5F1J1dTDsdGvIsHreiCE/dztiDnfT7qjT6yidTidd8WlHccmPtwG65+Amk2xB2YbEzPRcu5/pM8HmgYGgrwajmDDqiGCgpnovIcadYkjcA14RSqjTgC7tg5F4+Ns8tLhwHQoobiimzd/fTWPS/D3fn2/GRRr1pdJRlDQoMe3xm4u+r0RBJPRLyCbtrRKeBnYGLobXeSjKbTHZavdDbgXrdjhu2NvtnIeCrVupQ2qb7uBGClrIdfoKtXs8qleF6vOofiUKjBvVIdUZrOhqHQpcMB5LQQu5JOqCWmWo2vwO1R1UoUruHFailGxdEyO1jaLI2S3K4TQsWVeDyQOYDzh+VcHOszD5mi7EwcSVHFDALKSS6vXNzeJDtypyz8KAWXyk8Dg0i4/HAmYhlVSvb24Wn2tVMXsWpsKsijQrRVExjaSS6vXNzVL/sdEWi1LmFy8MZ2AS6/ikrcRUeIDHgQf6vAUFzGQzmZY0KiTaRF+ubjq8IEEu1rObqctJt7TiVq02/BpSianI2fJ61FWkmFz9u81s9paD3pS1551RhCxW27EihdSKoQApi8R+3q5KTIWPeBz6iPf3TbWP5rPpZvZOdu2pR6SXrHMwFVHO40D7nhSTa88n1rhCJL8SVmJArTocJh+vVgGzkGpTr6+qv11po+Sgh80md8+REJEbv8EWb8rgeSkg82npRMDfNOWMEo+eAZELSjAV0c7jcLsrnS6KBxQpFY2uBUhZqLo+1/62zW6wOrYY+nnU/OKAiNKNQZdCPryif+j/vuVpmz6wS59VKULwsho/z6fv/M0mMYjjR/lTtEvlx6/P7Itxbh0+vs3hNp74KP9kV6Iaeqd3k14Pscmu4lP1taaqa3VSA7hf1ADSV0kh4N1WAKBvOGIV64ljAbHbUbJrMW3zQmWAGjLs7dlrDm1zQyXkrpI/BNE2Q8tf3IQQ+O4xtF71cCEEvocMbVg9XAiB7xuGdlM9XAiB7xFDE7w2CiF9pZ+SsMnPp5icBuF8JgBIR/fz+OvzsbtWR+rq9Ww9uZuJYchdSBx0srnGJm+UmJwaNZ3VANS5ACBlf3MzSCnY5KyGrukkfwQoYYC1mMFomD/1Dssmi8lS4mjYzSncLq/pIlIsUDRSShwNlZyilOJiqJROkiUg5S/iMhr2cgp/0cSBIrKUOBr2c0o5icRkKXE0HOSUQQVXEVlKHA3HOaV4KFzfbUSkWKBopJQ47mcUbDKUpS6mPcxVAWWzWk7SF6ykzW7cazl9I6Soet1YLXt3zU5o6TeD2s4n+U9A8cGy8rR5DqbwalbGvVnNJ9NsZe8VU2mp0x4RdaIWXxXYjmLabWF0+vPZetst/m4mp0ppibSJrqW/qZQwW00fKsnilLRL1BqyMlDGZ0C6Ikh86k9/8irQZQfhuBImPQGz9S1Pge8WD7+BH1kmHo5fIC0pIvkm3pEv4hz59Xx3vu9Yhkdsb2+bWNxC7KeCTrTUpKKio6KY4wwLlzs943VLouBkfbVumVW8Zl+jUsbkXIVU34MpOJlwscGarXQezKym6YsdHUhcjNXeW2Fke7QghS2HijllJh6NwHDTiWWdJEBkOlddo55OnknlPaIPYlUvWabXDIMrOvK3LOBfRAc7bP7Izvpt1gnez1yUUEuM+eGMV69e8WLyCawRkgGvS0PLAn4XTRvOTzxpRyPEG2rsz0aYTSIqXuWDLLNK4kuTiZVZ2RQkRWS0wu2E19OKuieI5KyqjRjenjwZjhOm7HaG+QlHJ3VptGQtrl1DO+Iow0onPtBouReh128jsLxGFkpMrZtBdo7hfUrDCpIosKJT4NGaN2mIwt+MEo9JSNKATEy/xOF84MHdHou44hs83tyxHMrdNStK9+iP2+U3BXIJItxn4ti7+BurqmxIAMMzLVbO/D2YCh7JeVzFjg/BzXHB2cE4Hi0PNDIgJgzboUWGXtX04chYPisifoYAfjiYWJ8pL//08QArGS4OsWAcmoVBaKGLI8t5brGcHjwwIzp5lBK7qIEeIB8DC5T7AoLw8YPOPtZIQl/27kJL8T6DBgYWQvqJntRWVkQSpDgeAg2mzNuDqGxTwTCLpz2ZmsjHLSeMnOdrrLQ0/ZOzZ8tAn+wgjAoT61MneRCRrrW3wRRyOdH1h+V6q63uf0j5fgFDD5kpDMPy+KuMPWQEjSfyp9tb0mhcMSGVkWWLEvn+e+mSwvHDf0nAVwQD1aS8RFWti8ximK9ZnAQ6XRXqlyWQFmm029vN5F5faNt2W7u7X21mjWuaqYyoXEwiAumyVXPh+59Ccjqyq+YLM6wsY7xGULwQHDFEsxpNWovarChGxaSLK4CNj4btJQzShKPZZ7KLIW4O8cNgujW04lJY14L02idGFfdlrHSOWYUHGqk7K2V3CuOCTCoDo6yyLDUoPllmS2KyBJv5ESQt5a7wzAuXCTk8rcQnNzxl1K21ZsgR0sMQy7N6NaYKgtMMh3MH3Y24E5H9GRMzW6yrN2ITbPmeFVw6QLiCYxQlYjkx9IJ2kQ8oK0CO7LkgX65u49fkR9c4XjbyARDTJfdeXjEsMONt75EOvqQCrxm2V3xCp3mAwKo8eZEVV9+Cj6yPj4F1dAzTumy0f/nnpPm+0xx/+HMbtGpgtiEXoS4pp7P0ScGy3M1PTMWkyMxmJLpnHpOqEx6nDZM190Za6w/pE1rO0w8/5NXQzAbzspCSrkGHZhnzRKADTgjoCEjkFe5uX2w4JhWSvmymhvkoOn8JMg0OVcDYLuUsLZTz8U7BVpXzJtXmKDhIfFSiHvtjSVx0XX3m1gaENIkxbuPs+2Q9P1r/gWwLUx68a0QRzON+oeM/MPFMLJiSalG5nt8uLuXxoTKti8sUjY5X9QnGRl7Jqf+nvGJ/DrvOtlRv/22plQ6isv+XYV0Xs7ASPiVdV7ipxsb7qWJnh7R8Cr4+kFn3CoOL/jLJgf9YQP8BsdLALu9nv1/8fvFfs45TBw==</source>
  </file>
  <file path="Stream/PartStream.php" generated-path="Stream.PartStream.html" hash="ba71d0899777e6b4172c48816e693e33" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="SimpleDi">\ZBateson\MailMimeParser\SimpleDi</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="24" package="MailMimeParser">
      <extends/>
      <name>PartStream</name>
      <full_name>\ZBateson\MailMimeParser\Stream\PartStream</full_name>
      <docblock line="24">
        <description>Implementation of a stream wrapper representing content for a specific MIME
part of an email message.</description>
        <long-description>Basically defines character boundaries for a "parent" stream - namely the
main stream for a message - where read operations are not permitted beyond
the character boundaries of a specific part.  The boundaries are parsed from
parameters passed as the "path" to stream_open (with fopen, etc...)

Note that only read operations are permitted.</long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Stream" line="30" package="MailMimeParser">
        <name>STREAM_WRAPPER_PROTOCOL</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::STREAM_WRAPPER_PROTOCOL</full_name>
        <value>'mmp-mime-message'</value>
        <docblock line="30">
          <description>The protocol name used to register the stream with
stream_wrapper_register</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="35" package="MailMimeParser">
        <name>$id</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::id</full_name>
        <default></default>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="35" description="&lt;p&gt;the message ID this PartStream belongs to&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="41" package="MailMimeParser">
        <name>$handle</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::handle</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;The resource handle for the opened part.  Essentially the&#10;MIME message's stream handle.&lt;/p&gt;" type="resource" variable="">
            <type>resource</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="47" package="MailMimeParser">
        <name>$start</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::start</full_name>
        <default></default>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="47" description="&lt;p&gt;The offset character position in $this-&gt;handle where the current&#10;mime part's content starts.&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="53" package="MailMimeParser">
        <name>$end</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::end</full_name>
        <default></default>
        <docblock line="53">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="53" description="&lt;p&gt;The offset character position in $this-&gt;handle where the current&#10;mime part's content ends.&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Stream" line="58" package="MailMimeParser">
        <name>$registry</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::registry</full_name>
        <default></default>
        <docblock line="58">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="58" description="&lt;p&gt;The registry service object.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\PartStreamRegistry" variable="">
            <type>\ZBateson\MailMimeParser\Stream\PartStreamRegistry</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="63" package="MailMimeParser">
        <name>$position</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::position</full_name>
        <default></default>
        <docblock line="63">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="63" description="&lt;p&gt;the current read position.&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="68" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::__construct()</full_name>
        <docblock line="68">
          <description>Constructs a PartStream.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="84" package="MailMimeParser">
        <name>parseOpenPath</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::parseOpenPath()</full_name>
        <docblock line="84">
          <description>Extracts the PartStreamRegistry resource id, start, and end positions for
the passed path and assigns them to the passed-by-reference parameters
$id, $start and $end respectively.</description>
          <long-description></long-description>
          <tag name="param" line="84" description="" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="84" description="" type="string" variable="$id">
            <type>string</type>
          </tag>
          <tag name="param" line="84" description="" type="integer" variable="$start">
            <type>integer</type>
          </tag>
          <tag name="param" line="84" description="" type="integer" variable="$end">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$start</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$end</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="120" package="MailMimeParser">
        <name>stream_open</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::stream_open()</full_name>
        <docblock line="120">
          <description>Called in response to fopen, file_get_contents, etc.</description>
          <long-description>.. with a
PartStream::STREAM_WRAPPER_PROTOCOL, e.g.,
fopen('mmp-mime-message://...');

The \ZBateson\MailMimeParser\Message object ID must be passed as the
'host' part in $path.  The start and end boundaries of the part must be
passed as query string parameters in the path, for example:

fopen('mmp-mime-message://123456?start=0&amp;end=20');

This would open a file handle to a MIME message with the ID 123456, with
a start offset of 0, and an end offset of 20.

TODO: $mode is not validated, although only read operations are
implemented in PartStream.  $options are not checked for error reporting
mode.</long-description>
          <tag name="param" line="120" description="&lt;p&gt;The requested path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="120" description="&lt;p&gt;The requested open mode&lt;/p&gt;" type="string" variable="$mode">
            <type>string</type>
          </tag>
          <tag name="param" line="120" description="&lt;p&gt;Additional streams API flags&lt;/p&gt;" type="integer" variable="$options">
            <type>integer</type>
          </tag>
          <tag name="param" line="120" description="&lt;p&gt;The full path of the opened resource&lt;/p&gt;" type="string" variable="$opened_path">
            <type>string</type>
          </tag>
          <tag name="return" line="120" description="true if the resource was opened successfully" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$opened_path</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="133" package="MailMimeParser">
        <name>stream_close</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::stream_close()</full_name>
        <docblock line="133">
          <description>Decreases the ref count for the underlying resource handle, which allows
the PartStreamRegistry to close it once no more references to it exist.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="144" package="MailMimeParser">
        <name>stream_read</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::stream_read()</full_name>
        <docblock line="144">
          <description>Reads up to $count characters from the stream and returns them.</description>
          <long-description></long-description>
          <tag name="param" line="144" description="" type="integer" variable="$count">
            <type>integer</type>
          </tag>
          <tag name="return" line="144" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$count</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="164" package="MailMimeParser">
        <name>stream_tell</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::stream_tell()</full_name>
        <docblock line="164">
          <description>Returns the current read position.</description>
          <long-description></long-description>
          <tag name="return" line="164" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="174" package="MailMimeParser">
        <name>stream_eof</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::stream_eof()</full_name>
        <docblock line="174">
          <description>Returns true if the end of the stream has been reached.</description>
          <long-description></long-description>
          <tag name="return" line="174" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="189" package="MailMimeParser">
        <name>streamSeekSet</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::streamSeekSet()</full_name>
        <docblock line="189">
          <description>Checks if the position is valid and seeks to it by setting
$this-&gt;position</description>
          <long-description></long-description>
          <tag name="param" line="189" description="" type="integer" variable="$pos">
            <type>integer</type>
          </tag>
          <tag name="return" line="189" description="true if set" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$pos</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="205" package="MailMimeParser">
        <name>stream_seek</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::stream_seek()</full_name>
        <docblock line="205">
          <description>Moves the pointer to the given offset, in accordance to $whence.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="" type="integer" variable="$offset">
            <type>integer</type>
          </tag>
          <tag name="param" line="205" description="&lt;p&gt;One of SEEK_SET, SEEK_CUR and SEEK_END.&lt;/p&gt;" type="integer" variable="$whence">
            <type>integer</type>
          </tag>
          <tag name="return" line="205" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$offset</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$whence</name>
          <default>SEEK_SET</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="230" package="MailMimeParser">
        <name>stream_stat</name>
        <full_name>\ZBateson\MailMimeParser\Stream\PartStream::stream_stat()</full_name>
        <docblock line="230">
          <description>Returns information about the opened stream, as would be expected by
fstat.</description>
          <long-description></long-description>
          <tag name="return" line="230" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJzFWWtv20YW/e5fMQ0MW05l2ZtuFqhTpUlsATW2rg3bRYEmhTAih9JsSA6XM/RjF/nve+48KD5ERcVisQICi5yZ+zj33McoP/xYrIq9k5cv99hLdr+SmiUyFQx/C14aphJmVoL9/oEboVX+6YrL9Epm4oaXWpSsKNU/RGQmOEzn36UyErkWbGVMcXZyogo8qaqMxESVyxO/qk8WOj72DxOoZx/uLnD8ZC/nmdAFjwYVfrozpeDZm729Sm/ZJLMiFRcS27xjl/QiE7nhRqqcvOJMW1HsseRFAVdKUZRCY4vMlyxSucFXlqiSdhYikomM2NXl1YzEBWh4zkQG3Qxma74UhAOjfx+4lhFP02cWi0TmQrNoxUseGShaqCqPeSnx0ol/AXFQ9iJYdMwIB5wF8iQMGvKw5k54ddj5uBKlgO08ZgC7tO5pBnksV4bhTSaNETFbiGeVxySNwrnRGAdKcJVcnDAwQjT3kOCCQI5ZUqrMYwFrIYsYo2mFa6sEbpnVC2aUt31ObGCjR2lWcAPfx0yYaDKZHAXUflFG4CgHtjnc3+RV7VFNOV6ZFUD5nfOVjJlnhGVTlMIeBk4Yx5q9f+8xfCwl6PPSegcKGxWp1ILOKnIAJpdiKTUBRJ4EpsDycNK75MkzD9v98on9CxJpw+7ub2fvr+a/3b6/uZndzm9ur++vz69/ZlN2mGXFcQbaHvt4Hr6x57pWvnvgJZNgI9kSQn95gUfZdA8xTlW+BPiqZQY5iByFX/sy3qIB7LepalGpH1Y8j1EPiHeknuIGSZ4dM20TxhLdktWJsx/KlWDtoQ4YOnGTIQPd8ldgIPtUkmhhGkQulJY2t5Er+4TM8VtvuksRS/uqpERrmUn4W3dgY8h6bfCsB420y/9vG0UeD1uIxS32rSlza2lbPvuQ+weU0AcUZ6YWtrazIS3hwA6s9V65lA4wdM2XD0heth+WN4s9p6Qqq8igHjQ86ciqFmgvLKnyyOI9n0fh2OjI7nClgD77sUQuhpZxdqZR/1NhVD46erPe5KJVQzSlY8dvl8L0wQznvmy0f/ZkiA2uRG6IRJ14Mh47Io7RZmKKdw2cbRxBIMnxhZcKrt2MR7nMrY6Mqtl6z/Hi+bgUCdiWR6JRu4O0fVLrGG4lEZXIJrQFIx/QlALQrI6zFUL5TY1zn2wYWJJxZ4HY4XRtWhB5vJEgdVRtI7pGQbqBzpHVPGYH1oODfQ/dAYnphRzU1Ijhxz8aEab8opdW6rwqUyexQQKZsNE3IivM88jt/ni4Utoc/nHEDg5YZ+WflSifsXTU0Gu9sOIBSXfn2JnV0GfNQk+bsra6zg4XrCmB9sBhNUn5eGjfQn9nM4WzuxXvWhu/bKHvOWo9mIYCRqRQNOuBX76d0+Q4R07MfZHSocPb1sl4ELKm/dnZQHvEyclyMg4nrIJRr2FixIT0w2D7mpRUzz4NjYdXvoW6+kadNKvQqBeiPcAEWQ51N/NR4SZW+MlonSeEa3uWcjmHZS88iFvrsIEP2dEYo6DEHSY+U+MVT5yq01nXy2FU/vLqu7++/tuP1r7p6QGsm7463YgTRohHVaV20MpRUu3077sSIstbfdzFkYwDaE7HuDUWcQ+Jb32A4dSVL5qU8Wf9/tVpr5LcX19cn7H9TMX2/kEDLFgqY0QRKc1TzHnVcjU4GwYxMsz6jqeNHgH+q6I9IUcrEX2maZZgLktl7wGqpEtAkEf27FL1fBNFVLXxxXhgt/WwvduiT+83VcJg9Ps4tvWfp36cwqubS5akfKkHVLl5bV7bl1Rp6vqEp6gf6ELbqcWUwlRlDk6rVCB46J2CCqBpzoaPILE/r6soAkdI/PPWVty4C4SSbfEY125S0W6Y3SverhXXs9SUnfb69MbO4Ndsg3NffY/wT9QoepJ8Jky7E4Dt/aNa5PCogNU8gsta/GRF3YrkHHVi81kP+qit/JvplOUUN3SZpuWbFijJwuutc8iFcFZpH9IEk2Xlb7z0BqVMlOkzkahzF0DGr2SEcp6m6rHm3cA4gxISpQpdQtKlLqKkA83tldUPIXRfoVXxhBPbxzjPHSuwP8d1cY/FTrhvhucW9UWzqiDj9h0y9Ryv7d23eTPkdkii2LmZa6hc2Gy20rp55vJ1F++p8o2ckB4ESApQNTEiTdscanAMBVh8bq+2E4J9282xJrsz/rTOBmLbcU3XHU7nhCvOZzL3PoytyOYeIEKX48P24OWPvmWn3YnKH0gcMB2/7KnebNMsFaGOfDslhFMqSxD4VcBwrp+4dHI7q2qObL8SsS4/ZE2ZreSwke/SIhjXdngnOxtV37XvJutXKP8LIWgU5Oij8aDxvons4oBQSc9+G/5utNqUfdukZJcg3gpyZhMR/HLCUy22gXJOo4IOcKzv8tpNKbYIEFVCQVvQTdo0J4mOE9uKBPZ8rRVD+Pb7kYP0DibdUa8ixm5ClopGB84fmglOzYX2AON+7vWaMW1987+A/0o9+GZVKEBEP825i+0S99LcT5Zjmvh4FKky5tRtqHo/rqjNbC3J7vCmFXeYXef0cw67m83+Pr+b3Y/dt/Nfb23U7cPsl4vJf0F8V2SCF0HvtFY5UOv9iTWwGuM4mvPIS+gGLEJDrI0/ay1ZvE/YuwjT2DnALjHwXy5zNOu79RW9vdf+AgnLM8t5XKAinkZVSgO7HSQyQfHInhmkaf/D+81PN2z0evJ68v1RT2Rwqp/sXTfDZwHwPvdfb/ZjFn5R6IGB4PXB8NaMWs2umSdHf9KyWCS8Sk1fU2dvLzlqpb2E3qWKyxyxyNz/fHBcUk1z8Hcyx3QfdfdARFE8Fe4nvkWY5dEEDTeDBZ6XJd9p7Ccp/ckNx6mB28WhsaX54wv2fzzU8l9iw+8rzcXuoNKM3Ta0ISLg+mXvP1ML+28=</source>
  </file>
  <file path="Stream/ConvertStreamFilter.php" generated-path="Stream.ConvertStreamFilter.html" hash="4548a77cb53de3c7d007d97794354f46" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description>Idea taken from HHVM's ConvertFilter and coded to avoid requiring a
different license and because I don't want to deal with legalities.

Unfortunately the HHVM version seems to fail for larger base64-encoded files
(both encoding and decoding).  Once the stream needs to be buffered, if it
isn't buffered on a 3-byte chunk for encoding, or 4 byte-chunk for decoding,
it won't make sense.  Currently it is only used for quoted-printable encoding
and decoding.</long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="php_user_filter">\php_user_filter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Stream" line="20" package="MailMimeParser">
      <extends>\php_user_filter</extends>
      <name>ConvertStreamFilter</name>
      <full_name>\ZBateson\MailMimeParser\Stream\ConvertStreamFilter</full_name>
      <docblock line="20">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="20" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Stream" line="25" package="MailMimeParser">
        <name>STREAM_FILTER_NAME</name>
        <full_name>\ZBateson\MailMimeParser\Stream\ConvertStreamFilter::STREAM_FILTER_NAME</full_name>
        <value>'mmp-convert.*'</value>
        <docblock line="25">
          <description>Name used when registering with stream_filter_register.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="31" package="MailMimeParser">
        <name>$leftover</name>
        <full_name>\ZBateson\MailMimeParser\Stream\ConvertStreamFilter::leftover</full_name>
        <default>''</default>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="31" description="&lt;p&gt;Leftovers from the last incomplete line that was parsed, to&#10;     be prepended to the next line read.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="36" package="MailMimeParser">
        <name>$fnFilterName</name>
        <full_name>\ZBateson\MailMimeParser\Stream\ConvertStreamFilter::fnFilterName</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;function to call for encoding/decoding&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="43" package="MailMimeParser">
        <name>onCreate</name>
        <full_name>\ZBateson\MailMimeParser\Stream\ConvertStreamFilter::onCreate()</full_name>
        <docblock line="43">
          <description>Sets up which function should be called.</description>
          <long-description></long-description>
          <tag name="return" line="43" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Stream" line="66" package="MailMimeParser">
        <name>getFilteredBucket</name>
        <full_name>\ZBateson\MailMimeParser\Stream\ConvertStreamFilter::getFilteredBucket()</full_name>
        <docblock line="66">
          <description>Sets up a remainder of read bytes if one of the last two bytes
read is an '=' since quoted_printable_decode wouldn't work if one
read operation ends with "=3" and the next begins with "D" for
example.</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="string" variable="$data">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Stream" line="92" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Stream\ConvertStreamFilter::filter()</full_name>
        <docblock line="92">
          <description>Filter implementation converts calls the relevant encode/decode filter
and chunk_split if needed, before returning PSFS_PASS_ON.</description>
          <long-description></long-description>
          <tag name="param" line="92" description="" type="resource" variable="$in">
            <type>resource</type>
          </tag>
          <tag name="param" line="92" description="" type="resource" variable="$out">
            <type>resource</type>
          </tag>
          <tag name="param" line="92" description="" type="integer" variable="$consumed">
            <type>integer</type>
          </tag>
          <tag name="param" line="92" description="" type="boolean" variable="$closing">
            <type>boolean</type>
          </tag>
          <tag name="return" line="92" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$in</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$out</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$consumed</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closing</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="20" code="PPC:ERR-50005">No summary for class \ZBateson\MailMimeParser\Stream\ConvertStreamFilter</error>
    </parse_markers>
    <source>eJyNVm1v2zgM/p5fwRXBnBR5ub3gPtwuu70WK7B2xdK7D7cNhmzTia6O5Elyu2Hrfz9Skp3EzXZnIC8WKfIh+ZDS73/U63owPz4ewDFcrqWFUlYI9FsL40CX4NYIf78QDq1WH8+ErM7kBi+EsWigNvofzN2MN/PntEABTlyhgtLoDbx589dZYuGlVtdo3ImsHG0SqoBcF1iA0yCutSzA4OdGGqlWINhMIcsSDSoHlcxRWfR7MsxFQ/9PodAqcXAjSIFMkM8KbqRbQ4UrUUkn0XaI/lSlNq5RhL/66mNhTEBwrNQKLOLGspGSAgNShUqYFYHMhMVfH09RBaScFMv2RpkmR37ZwyVcBYaX8QzgncrRe7HOoNiAQiy8/Qwha3xUxQRkCdKxNWk5kFYABEjAo2n21SHk60ZdeUStswnQy2Ng6XQrbb1PvD3Kis/NhmpAwVHqCNTLxnAyKX6SU2W1or+UycIb+Nxoh8W0pvQ7kVHtW39scDc+zimvPWuLsnau/m0+1zW96cbkONNmNY9SO89sMY0vMyIZvFi+ou3zgRIbtLXIf0irj0ufvCeDAZebtqb0a9LS04dW80rYjlRBN1ILvzhUlPDensG3AdDjWc7PMZwThpCCmzWR1eBKWlLkknomhfLF7WkrnsXtc/+ba2UdLC/fv35+lp6cvr18/T49f372GhaQbDb1NA8AZ8cJYe75f3YtDDthh2+xdJoJGXqG2UMBUqWoDpu6QiJDJRXTSjDpfWdappHTrTn/EMVqg1SM2FpsSFFGwm6Kp9jHTxW/pvzDsIoAGDhhZdnP8JaNyh03D/nIRVXtkXTesuWwq1KFSnH+D3taorPQ1FQXma+3vuxaNxXPAO8Su1CgQ2jQNUZBpnW177vJiIVbS1q9pFw4HI29OFDDg5j7CGsaeuV+BZNOZ8jkpTzZJiPd0dDRxJw+DTRh0QQePBw/2aqLEK6lLR+6VX6SftvFUZPA4ik40+DkP9R9ng+pf9q6pzkzuietRTfqkHzwIXwaj3ci5yemrxSVxa2F220oMdSdAnIeHHdHXVE3j5JpMoEkpS/vYicN0TbjDIu3dxqiLbsg5Y2QxGHDhw+z1k88y8Fo4nE8kXyHuBsdhK0Vr04TTihIFglYyeM4pC7tUpeG1NGkJEb5g0Sbq2h+zxANNiM8Z/xQ8YPhaPHoyE/FrrsyGg6qlb464m5oreAXwQ3ccrWjKjUwnQ2xnYaFcOJgt3SUXWE8O7F40eRXXE7e1CfwkPJMNYmV6rp6Flzs0+JgOReLlmh3spX0+UJTQwUC0J8Ru94puFfAz0Fuam29woSL0tNiLCNWvUfOPfnGcP8++CXG491M4QF8/w69tYd3OLzD052Z1vaqR0A2egh2Mren+csh5VtAgvi/3LajtNt6oKliY7DDtjH4u98c8XSTTKYNneSBlHE6WT8RrSekwQqv+VoUhsk8Mj2egtGav3/x/SG1dcU3gtJfU/hEyZDYixEWk/NiebJML54vl+m787sjN/DYYDj9YSjVD0W6cT0Z8QuGfIY2Gyx6Mh7iJKy03Z4k3YSnjT8d8CHaEaGZeL8TuN/5mXRW+81D5w3dfUbDzDdYYC5fAcJ7yheq9MZIh9wUbPwO+4Zl7NFtDx5o3GBv+tQ3cK9jeI02cz3j9YViOtSqk62zno191KLm68AoZGFfpPCmtRwEk+B/PD40/WPqd+nQEvb2X2ZqquY=</source>
  </file>
  <file path="Message/MimePartFactory.php" generated-path="Message.MimePartFactory.html" hash="05dbc945e8af3a80d51219f334d0b35b" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="MessageWriterService">\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="17" package="MailMimeParser">
      <extends/>
      <name>MimePartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Message\MimePartFactory</full_name>
      <docblock line="17">
        <description>Description of MimePartFactory</description>
        <long-description></long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="23" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePartFactory::headerFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;the HeaderFactory&#10;     instance&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="29" package="MailMimeParser">
        <name>$messageWriterService</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePartFactory::messageWriterService</full_name>
        <default></default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;the&#10;MessageWriterService responsible for returning writers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Writer\MessageWriterService" variable="">
            <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="37" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePartFactory::__construct()</full_name>
        <docblock line="37">
          <description>Creates a MimePartFactory instance with its dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="37" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="37" description="" type="\ZBateson\MailMimeParser\Message\Writer\MessageWriterService" variable="$messageWriterService">
            <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$messageWriterService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="48" package="MailMimeParser">
        <name>newMimePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePartFactory::newMimePart()</full_name>
        <docblock line="48">
          <description>Constructs a new MimePart object and returns it</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="58" package="MailMimeParser">
        <name>newNonMimePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePartFactory::newNonMimePart()</full_name>
        <docblock line="58">
          <description>Constructs a new NonMimePart object and returns it</description>
          <long-description></long-description>
          <tag name="return" line="58" description="" type="\ZBateson\MailMimeParser\Message\NonMimePart">
            <type>\ZBateson\MailMimeParser\Message\NonMimePart</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="69" package="MailMimeParser">
        <name>newUUEncodedPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePartFactory::newUUEncodedPart()</full_name>
        <docblock line="69">
          <description>Constructs a new UUEncodedPart object and returns it</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="69" description="" type="string" variable="$filename">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>438</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>'bin'</default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>eJzFlU1r20AQhu/6FXMwRDa21ZMPTZuWNC29uBTSUAiGsF6NrS32rtgdxZSS/95ZfTiSIssVtHQvYj/mnZlnZldv3qVJGkSTSQAT+JYoBxu1Q+BvKiyB2QAlCPfXgtAZvVoKtVuqPX4V1qGF1JofKGnOxt7+/U5J1A4hIUpfR5FJeWYyK3Fu7DYqd120dvGsnMzZPVzf3rB5FGixR5cKedLhaonOiS1eBkHmTp/6jCI+fj4JScb+vOy1KHVX362i52kxu0X7yMGyzxLTDTppVUrKaA+olKHSUcVCZJQYC/dCJCqG0m+eptwJ516Y/QqAR+7CD1Z4FBZWQ3LMa9VYqbTyobQjoSWWi1H+5RISlxBjGCVNXn53WEx/QNGHWIl17lvuAKOdWnMXbpifRcqsVnoLh/ycOxX9vrNmXUl8sOjjB9GuwZEQHBQloMhBjNzDMWqp0M0rgSMNviNi3yTewtg62plyZ+jNNLM13xfYZFrmXffwIJkR2UxS2Od9OsDhOPdUdKEfI+LXYHbV0IO3nV1SO96l7K1OV+epu0ZVfr5MGg/HUoFZ+ycHhI7L3nBcqBeVKbbOt2ol24ub/Vfnwjam0lE9xLAL3bSP0Oxqi1SZFzvheDyIzxej/xGimvI5SrWjfaDqx/4Hq7u7j1qaGOMBtIr7qzRxL7Npa531/RM18j9P/xc7B6oRQZgr8i15tVgsps8ivHKxVvqih2RL56+wnBYZ1gI50n0KfgN4lKNV</source>
  </file>
  <file path="Message/MimePart.php" generated-path="Message.MimePart.html" hash="8c9a515f3c9ab97a4994e71748f040eb" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="ParameterHeader">\ZBateson\MailMimeParser\Header\ParameterHeader</namespace-alias>
    <namespace-alias name="MimePartWriter">\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="24" package="MailMimeParser">
      <extends/>
      <name>MimePart</name>
      <full_name>\ZBateson\MailMimeParser\Message\MimePart</full_name>
      <docblock line="24">
        <description>Represents a single part of a multi-part mime message.</description>
        <long-description>A MimePart object may have any number of child parts, or may be a child
itself with its own parent or parents.

The content of the part can be read from its PartStream resource handle,
accessible via MimePart::getContentResourceHanlde.</long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="30" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headerFactory</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the HeaderFactory&#10;     object used for created headers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="36" package="MailMimeParser">
        <name>$headers</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headers</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;array of header&#10;objects&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="41" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parent</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="46" package="MailMimeParser">
        <name>$handle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::handle</full_name>
        <default></default>
        <docblock line="46">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="46" description="&lt;p&gt;the content's resource handle&lt;/p&gt;" type="resource" variable="">
            <type>resource</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="51" package="MailMimeParser">
        <name>$originalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::originalStreamHandle</full_name>
        <default></default>
        <docblock line="51">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="57" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parts</full_name>
        <default>array()</default>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="57" description="&lt;p&gt;array of parts in this&#10;     message&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="63" package="MailMimeParser">
        <name>$partWriter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::partWriter</full_name>
        <default>null</default>
        <docblock line="63">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="63" description="&lt;p&gt;the part&#10;     writer for this MimePart&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="71" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__construct()</full_name>
        <docblock line="71">
          <description>Sets up class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="$partWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partWriter</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="80" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__destruct()</full_name>
        <docblock line="80">
          <description>Closes the attached resource handle.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="99" package="MailMimeParser">
        <name>addPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::addPart()</full_name>
        <docblock line="99">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="99" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="99" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="118" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removePart()</full_name>
        <docblock line="118">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="118" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="118" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="138" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeAllParts()</full_name>
        <docblock line="138">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="157" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPart()</full_name>
        <docblock line="157">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MimePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="157" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="157" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="157" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="176" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllParts()</full_name>
        <docblock line="176">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="176" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="176" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="200" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartCount()</full_name>
        <docblock line="200">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="200" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="200" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="213" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChild()</full_name>
        <docblock line="213">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="213" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="213" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="213" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="230" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildParts()</full_name>
        <docblock line="230">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="230" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="230" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="244" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildCount()</full_name>
        <docblock line="244">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="244" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="244" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="255" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartByMimeType()</full_name>
        <docblock line="255">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="255" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="255" description="or null" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="267" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllPartsByMimeType()</full_name>
        <docblock line="267">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="267" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="278" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getCountOfPartsByMimeType()</full_name>
        <docblock line="278">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="278" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="278" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="288" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::hasContent()</full_name>
        <docblock line="288">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="288" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="301" package="MailMimeParser">
        <name>isMultiPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isMultiPart()</full_name>
        <docblock line="301">
          <description>Returns true if this part's mime type is multipart/*</description>
          <long-description></long-description>
          <tag name="return" line="301" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="316" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isTextPart()</full_name>
        <docblock line="316">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="316" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="335" package="MailMimeParser">
        <name>attachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachContentResourceHandle()</full_name>
        <docblock line="335">
          <description>Attaches the resource handle for the part's content.  The attached handle
is closed when the MimePart object is destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="335" description="" type="resource" variable="$contentHandle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$contentHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="353" package="MailMimeParser">
        <name>attachOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachOriginalStreamHandle()</full_name>
        <docblock line="353">
          <description>Attaches the resource handle representing the original stream that
created this part (including any sub-parts).  The attached handle is
closed when the MimePart object is destroyed.</description>
          <long-description>This stream is not modified or changed as the part is changed and is only
set during parsing in MessageParser.</long-description>
          <tag name="param" line="353" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="374" package="MailMimeParser">
        <name>getOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getOriginalStreamHandle()</full_name>
        <docblock line="374">
          <description>Returns a resource stream handle allowing a user to read the original
stream (including headers and child parts) that was used to create the
current part.</description>
          <long-description>The part contains an original stream handle only if it was explicitly set
by a call to MimePart::attachOriginalStreamHandle.  MailMimeParser only
sets this during the parsing phase in MessageParser, and is not otherwise
changed or updated.  New parts added below this part, changed headers,
etc... would not be reflected in the returned stream handle.</long-description>
          <tag name="return" line="374" description="the resource handle or null if not set" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="386" package="MailMimeParser">
        <name>detachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::detachContentResourceHandle()</full_name>
        <docblock line="386">
          <description>Detaches the content resource handle from this part but does not close
it.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="398" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setContent()</full_name>
        <docblock line="398">
          <description>Sets the content of the part to the passed string (effectively creates
a php://temp stream with the passed content and calls
attachContentResourceHandle with the opened stream).</description>
          <long-description></long-description>
          <tag name="param" line="398" description="" type="string" variable="$string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="432" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContentResourceHandle()</full_name>
        <docblock line="432">
          <description>Returns the resource stream handle for the part's content or null if not
set.  rewind() is called on the stream before returning it.</description>
          <long-description>The resource is automatically closed by MimePart's destructor and should
not be closed otherwise.

The returned resource handle is a stream with decoding filters appended
to it.  The attached filters are determined by looking at the part's
Content-Encoding header.  The following encodings are currently
supported:

- Quoted-Printable
- Base64
- X-UUEncode

UUEncode may be automatically attached for a message without a defined
Content-Encoding and Content-Type if it has a UUEncoded part to support
older non-mime message attachments.

In addition, character encoding for text streams is converted to UTF-8
if \ZBateson\MailMimeParser\Message\MimePart::isTextPart returns true.</long-description>
          <tag name="return" line="432" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="446" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContent()</full_name>
        <docblock line="446">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description></long-description>
          <tag name="return" line="446" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="465" package="MailMimeParser">
        <name>setRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setRawHeader()</full_name>
        <docblock line="465">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="465" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="465" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="475" package="MailMimeParser">
        <name>removeHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeHeader()</full_name>
        <docblock line="475">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="475" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="488" package="MailMimeParser">
        <name>getHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeader()</full_name>
        <docblock line="488">
          <description>Returns the AbstractHeader object for the header with the given $name</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="488" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="488" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="505" package="MailMimeParser">
        <name>getHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderValue()</full_name>
        <docblock line="505">
          <description>Returns the string value for the header with the given $name.</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="505" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="505" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="505" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="519" package="MailMimeParser">
        <name>getHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaders()</full_name>
        <docblock line="519">
          <description>Returns the full array of headers for this part.</description>
          <long-description></long-description>
          <tag name="return" line="519" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="538" package="MailMimeParser">
        <name>getHeaderParameter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderParameter()</full_name>
        <docblock line="538">
          <description>Returns a parameter of the header $header, given the parameter named
$param.</description>
          <long-description>Only headers of type
\ZBateson\MailMimeParser\Header\ParameterHeader have parameters.
Content-Type and Content-Disposition are examples of headers with
parameters. "Charset" is a common parameter of Content-Type.</long-description>
          <tag name="param" line="538" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$param">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="538" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="552" package="MailMimeParser">
        <name>setParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setParent()</full_name>
        <docblock line="552">
          <description>Sets the parent part.</description>
          <long-description></long-description>
          <tag name="param" line="552" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="562" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getParent()</full_name>
        <docblock line="562">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="562" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="255" code="PPC:ERR-50015">Argument $index is missing from the Docblock of getPartByMimeType</error>
      <error line="255" code="PPC:ERR-50014">Name of argument $index does not match with the DocBlock's name $mimeType in getPartByMimeType()</error>
      <error line="51" code="PPC:ERR-50007">No summary for property $originalStreamHandle</error>
    </parse_markers>
    <source>eJzNW21zG7cR/q5fAWc0IemQUjLT6XSUyont1ON8cOLaStqJrNFAd6CI9njHHnCSNYnz27u7eDkAvDfJ8bT6YJM8YLHYffYN2PvrN7vN7uD48eMD9pidbaRia1kIBv/veK1ZtWZ6I9gvz7gWqirfveKyeCW34jWvlajZrq7+JTJ9BJNx/reFzESpBNtovTs5Pq528K1q6kwcVfX1sX2qjq9UvrJfjmB59uztdzD9+KDkW6F2POtd8N0roRS/Fl8fHDSqf9RLwXP/3wue6aq++3rKDPgGLGhRm+/Dcywv7/5RS41fzRNtvgKHVqhvxK4WSpRaMc6ULK9BvE62nG2bQssVfd8CAbY1RJ1EnzJHllVXKGq25Xdsw28E4+UdK5vtFagBKGUbWeREVy1ZVdOwKxhkHiApqZUo1uxW6g1+ZtVtieOBMRxvPim37hkoPatKTU8NBojHjJdItgbxsHVdbYkSsvdWw29beGD0DSyWeSGWSItnGWxKXsG+byT3Gzo5uRb6uVnjjZ32kpdF7jf/LW/0Bnj7hfONzJlVAyElK7hSntTBrwcM/kjg+AdTb3jN3t0HH7TH6BdHi/6s9AEPsHHgKYPtavi8oRnKjj2m/8EqNAyGp4ebGIIPYvPpldI1UDBfzy8Yr2vQLqjFUHfEDIsjrKj7MuFQ7nFoMYNw6FvKDOlZyUNEtxibqRQ5vbugp1/Tzyn5vjlVLa9lyQuD0ZeWwseJIVQDWR2TJexIqgg11poH5AQTT9n5xUPZ6fQ93lwjXm7NMwQv8tkazwBzlt4pOJqi2OfxrQD2mx0z1pgLcPe5KDMp0I/QEL+bHXrW2L4S60iGJlsK2IkZbq4gkrB1U2ZaViW7vARIgb00mZ4PrbYcWGBBlI1Pwb9DlNfqSTQfZJIadzI8kl9A3Qz8sCfM50UFsZF0x7Xm2QaUkBjF0cjWc2F3nu5ArtlcqktHbu52RFQXi2Ak/q0zZCUZ1O7vwxjZLnsbWaRzSrrkvszeiGupQKbKQl6he6ZAxZWLfS5+ZU3tHZcTpHMZ7Hsz5nBXKUnC3LlMAFOhsipXaAFLxvNctdGQ62BdR8qTkGAM73sMYbq7PQwN2c6WpW5ZHcQE8ItU5jG5ZbBRY9tdgKGh7NHpqUF0qkB6vHqihH5N7t6oMlAa/pGPvFQ7zPbmgWFAkjIPeDi1XLBvICI0jpYdumAnLb9L9uWSnZvF2UUHRPDffZhsqxtrW22iZBIY8oVGmyUanG7qUlFa49mrfIhFJlE2UrNbrsoZ0AB28z04/QBeFCgDPmSQPBGSYB2WyxqTiQCeloclDTZMdCHKMEbAokQOYg5xakLyPONFgZEUd2tyRvPcrOfJ0ejFH4xMwzRBEyKMExTul0Q0iNKW4wSoe57Y7vTUoe/aoy+AAoGXZErgtXM+/9x/fOTxFkPa7sEOWz0J+DLsBHBjooDaIDWJ1qos8gWvs83cWV1kAOCqRWIuxuwcEWRzzWGZlM8RywqM5atkgWiXdlQ84sPB/ic7wyQB7aM+MwMU2pyITACECeWIpoB2dRd6apTsC1mAl92zoKlobEmwwzX9PwFpT4sC56n5/uwefwhZk4CQzJykAXeeiJ25wJhjYJLCwswZQlNvfDPuKI041/JGlOzL1RVHMZI/WMZmV1IND855wDchpbWslYmJ3u3gxDRg2urxiJkzgjbNrdaQv0Pqp2TNscLD9PI/jaghBzSlJg+0vGTi6PqIFVX1b6iDaSx3hLzh21lqJzK5Bt3ZEnF1drezfNvaVnEt1Vp6VDlKXYG+K4CS2JIHvXDyDm6yfxzEofFbAASru8lA9DXDABBjT/hIgq1ZyKlzs+DFXjq2Z+KdHiAm0pfJhqgNlbEkzxCdVGDMDX6gM5Gi8JrEJzCdVTuUGjy5Y2aPCB8gvzVoIfOoqxuZDzuVs37A8+KW38UsO0W2oDdod9Ra0HOMy+2Ryw0vZN4C2lRc0zjshSFIykuBfSQyzy/GsHl/B3nIX7ti1kCTXbQ4Sr2n0XWvu/SkTIzbivoaQpz5dRlEfs+lyc0pnvbWKY/EdqfvvI304N+sCApshJqbL2bCfC+MOob2Hpw7US3ZzHyYsYtoVDeXzsYM3SnGpSsNaGgPAaODCLItb3CA6JFIELt7hUczCuBai3zJVEVDtrKU22brvNdzTNWDWPAVWWPVYIq7jvB9by8LDnqK/yQOpoPUEo9KjC4HuhjOcloFRIn8/WKzIxeE6P/DIPUcd/aHRCmi9L+NU0PaREOJtEkUus4JwoSG7kmsWze1W/yM7yA/xwRFoAu03EHsmu73P6GTDzQyWbFUoNgRI1VUvyuNq5VOdznsIYP5Uy21dZKhljG3gOJU1G0J/nDVTPBZJPI/xml12NNiSswwZYRSVSbpAqNNoExNRrdQGnNtc84h3kul+85zlaZM7BAnYX7+YLQ6BznF6T+7e2WXm/uFl9ZTggy/7BFgK7qezPvkBA+EbLkRk58WEbgFvc1imUtzpsmal/4InGTuY0YFM+pbqcSnVsL5xVQ1uIjZpYpR8Xcklx8t+tjEjeDpzMEWCk7ie0K6pyyn2Dga6o/rh8unK7GZJKBe4UBibA8iazGjg3F7tavMrW03RDuqZ8vrVVUVgg+fPG+4sux23kZElwtjoQQ3MBAP6IxsuhCsowdBBPanzE08Pjh+PLDtwT1L9QqJkH9JN318zDKuNOGxIlJLSB3E9SXB1B88f2XKRWA23eUc5yzYvJ0U1ySz39sdvLv94nc5i0uTFmDmXuxnjMzzWXi8MoMQrMV7fbwruCxnCz9/ohGOibilvTSfN3pboM/Z4HWNI0dPHlP5Qr9Dob2WWKbPsg06Lj3DC7JaXjVa7Efr6bo6g3U6VXVI/J4+RGLpITQRAnDP/HZn7LffWPrAzr4f+g+tODo4fe1ur/a5dTIMWHUA8wSdOeKZeT/ciPNPh7QUZU/NpaiyVyTRxWh7xmJQZ/0bndwE16lRawHVuHgHCU5vI0qanjbbSLzVBidZ3Ym8J/p6Tg7toi87+hfSWzliaL/3BebNYzLTXSfdb+w9Sag99KI3JpySHfINg1qrXWuUi9LuGtgFJjyccJRcx017YTeXZVY0OU7GZijVXFEjlVp06z0ouh+i9+AUEU/WDYP2Sm9b5ZJOorEzCFa7ho88yLcRau7nks4bq7Lw6R6aXN5Q4gGjsUUMz3BsdmZytVHwdXXNdKLux46b9rmdPoC2rgv6Luz1jnNLfHwbQADIztVO4y6hkZy9laFVqQULJPDVLUELm75qDNrU9RbC1CvQzAzwaJut0vPthTluuwVsUCcZEDWwHru/iI6wCVJogeA6qepIzcZuATHW3lZDVYGXhVLDj4A4R/DqDvNBLFeAmbY3rx8sYFxJF2iCZWVM1CLa2gChegfxXOxhe+lsAi3JFzteGtZuwLKaXY4eABj4Qdy66irP6XwFlBVeo7tZVg9LX1np7OjoiN1WDagE16NmxnVhep5kGd2/x+LsTTWihrbUxSV34a3ge+uHTgOd2NAzqfOmFoDr/N4mF9cp3T11ZkZqa9+JIAa40mMvgsfNGJDcsbwSBhTkI3zY1kkblG9Z81LMRX987Wvucr4jvORON/LWgLu7NVZXYaFpC8m5WK+BOXkjwOqMqfsgxMEesEtai+3OQS09IXALkR/B7g4/uT+FaIlg/7WHcV/Dhyt5zf+D6FS+YXduh+9J08txjYvPZ+0WMeWrvwjzzjW1JLrgs3QsRJmpgepeamK1NphIRZOGD8V6YkB3VpnYdOD5jjzHCwr5oDD0XMarWNLpUXCA59DHe47wFLnRFWTgMqMLUJu7gN923npms5UGGxEJKmqDDs7Rs37OTuw9TjoLXV9qnpK61wOQ5iKrKNSZw0c668b2T78q2IPcy8D9YBBBjgXKlio72IxrCvA9dbgvR8uVDn8r7aLGr1vq68rFamGfmwVsIA2CU7PbVTW4ipNk6yv29wa8SL56DQDUeKfbPnkGMevPf2q//3P100/Eh0iIuJ/9RXCktlYEqCPXGRzcmNkqt3fLqNeoF8JEdlMiu7Vz74vsXh25qsBTbmxkDF8zsFxtbet/tJ3vqXvQ9hFhZcgzPKR2IjbGASWcRYWyd4Y3otYms/np7MXqL95rr9mv3xay/Pf048iTk7ZGd2S6nn3whydYKfedWTlAj4XfaVHjfg21ccQdqLPiGLsZjKpvN6DerNEuM0WdWAMNowbEEXltHQ0O5dbhg+1YD+jdhPVpPqJh/MUeR/O6SXJo2CfnCWGklfLw0WB7gLjfUYXAO7WsXALBS8ud6pXyBEVEKoAVBlQ0lCY8xSZhbn1UG43NxfAhvuREmjmku7FUjs9NkgDzS0hy7/duiCtfue+3BHZdh7S0TdHWdQ4nA8hkzyPieixNeMNvDUtzIrW00wY769U5LKErcOVu2uKiPduKmu1XT0A435dK8xKNL1qiP963TcDdqgk2PS6Wof7CcOvplpuSbrnHNj4pbenWvstaBvCX7LJtBKHg4ItXiJ4zfOcLijYlSuwWvRm7hIqAM3YB1QniMdcxJFzjlqcJuK/5d2ziA51CqDcrLMLrFHWlMv9U+oofQULCm0L/HNj7Pb18ePzrjDSk2tc9YkWxf65tdZCcstvhY13dZhhRMywNhuCQzyk6XWP0TN7MU+3bVkPXafd9AXCa2NVecO1E+NjeePAqjC13rbytQJcWqTZtsENRTz4IHdLv6fZ/xOMpJygkHdy3jonEX3BY10cpil+97duJEuYwg/5OKt9nj7WCeM+3u0KoUHloio5QQJt99tzck3xmqqKs2m6jN4aARLjuiAXGL3EmD+nbJ7bP9rLIa9SsO9FaIex0mqohlhorjsbjYvxf2ggOAksU2mfDMKs14BdVPe/k9KMN2x/07PhYK/nD3pfpTZxem7dZRl6D8Q1Qwcsw406qvZU1M+/tjx7Q4t6V5O+1cdHLwob7Dwf/BRJLoOk=</source>
  </file>
  <file path="Message/UUEncodedPart.php" generated-path="Message.UUEncodedPart.html" hash="3d5cbcb9a539dd0a1cf5fdaa2debd776" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="MimePartWriter">\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="27" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\NonMimePart</extends>
      <name>UUEncodedPart</name>
      <full_name>\ZBateson\MailMimeParser\Message\UUEncodedPart</full_name>
      <docblock line="27">
        <description>A specialized NonMimePart representing a uuencoded part.</description>
        <long-description>This represents part of a message that is not a mime message.  A multi-part
mime message may have a part with a Content-Transfer-Encoding of x-uuencode
but that would be represented by a normal MimePart.

UUEncodedPart extends NonMimePart to return a Content-Transfer-Encoding of
x-uuencode, a Content-Type of application-octet-stream, and a
Content-Disposition of 'attachment'.  It also expects a mode and filename to
initialize it, and adds 'filename' parts to the Content-Disposition and
'name' to Content-Type.</long-description>
        <tag name="author" line="27" description="Zaahid Bateson"/>
        <tag name="package" line="27" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\NonMimePart" refers="\ZBateson\MailMimeParser\Message\NonMimePart" link="/classes/ZBateson.MailMimeParser.Message.NonMimePart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="32" package="MailMimeParser">
        <name>$mode</name>
        <full_name>\ZBateson\MailMimeParser\Message\UUEncodedPart::mode</full_name>
        <default>null</default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the unix file permission&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="37" package="MailMimeParser">
        <name>$filename</name>
        <full_name>\ZBateson\MailMimeParser\Message\UUEncodedPart::filename</full_name>
        <default>null</default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="37" description="&lt;p&gt;the name of the file in the uuencoding 'header'.&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="30" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headerFactory</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the HeaderFactory&#10;     object used for created headers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="36" package="MailMimeParser">
        <name>$headers</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headers</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;array of header&#10;objects&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="41" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parent</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="46" package="MailMimeParser">
        <name>$handle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::handle</full_name>
        <default></default>
        <docblock line="46">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="46" description="&lt;p&gt;the content's resource handle&lt;/p&gt;" type="resource" variable="">
            <type>resource</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="51" package="MailMimeParser">
        <name>$originalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::originalStreamHandle</full_name>
        <default></default>
        <docblock line="51">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="57" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parts</full_name>
        <default>array()</default>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="57" description="&lt;p&gt;array of parts in this&#10;     message&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="63" package="MailMimeParser">
        <name>$partWriter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::partWriter</full_name>
        <default>null</default>
        <docblock line="63">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="63" description="&lt;p&gt;the part&#10;     writer for this MimePart&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="47" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\UUEncodedPart::__construct()</full_name>
        <docblock line="47">
          <description>Initiates the UUEncodedPart with the passed mode and filename.</description>
          <long-description></long-description>
          <tag name="param" line="47" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="47" description="" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="$partWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
          <tag name="param" line="47" description="&lt;p&gt;the unix file mode&lt;/p&gt;" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="param" line="47" description="&lt;p&gt;the filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\NonMimePart::__construct()" refers="\ZBateson\MailMimeParser\Message\NonMimePart::__construct()" link="/classes/ZBateson.MailMimeParser.Message.NonMimePart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partWriter</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="73" package="MailMimeParser">
        <name>getUnixFileMode</name>
        <full_name>\ZBateson\MailMimeParser\Message\UUEncodedPart::getUnixFileMode()</full_name>
        <docblock line="73">
          <description>Returns the file mode included in the uuencoded header for this part.</description>
          <long-description></long-description>
          <tag name="return" line="73" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="83" package="MailMimeParser">
        <name>getFilename</name>
        <full_name>\ZBateson\MailMimeParser\Message\UUEncodedPart::getFilename()</full_name>
        <docblock line="83">
          <description>Returns the filename included in the uuencoded header for this part.</description>
          <long-description></long-description>
          <tag name="return" line="83" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="71" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__construct()</full_name>
        <docblock line="71">
          <description>Sets up class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="$partWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partWriter</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="80" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__destruct()</full_name>
        <docblock line="80">
          <description>Closes the attached resource handle.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="99" package="MailMimeParser">
        <name>addPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::addPart()</full_name>
        <docblock line="99">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="99" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="99" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="118" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removePart()</full_name>
        <docblock line="118">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="118" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="118" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="138" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeAllParts()</full_name>
        <docblock line="138">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="157" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPart()</full_name>
        <docblock line="157">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MimePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="157" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="157" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="157" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="176" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllParts()</full_name>
        <docblock line="176">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="176" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="176" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="200" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartCount()</full_name>
        <docblock line="200">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="200" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="200" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="213" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChild()</full_name>
        <docblock line="213">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="213" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="213" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="213" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="230" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildParts()</full_name>
        <docblock line="230">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="230" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="230" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="244" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildCount()</full_name>
        <docblock line="244">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="244" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="244" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="255" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartByMimeType()</full_name>
        <docblock line="255">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="255" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="255" description="or null" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="267" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllPartsByMimeType()</full_name>
        <docblock line="267">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="267" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="278" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getCountOfPartsByMimeType()</full_name>
        <docblock line="278">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="278" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="278" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="288" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::hasContent()</full_name>
        <docblock line="288">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="288" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="301" package="MailMimeParser">
        <name>isMultiPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isMultiPart()</full_name>
        <docblock line="301">
          <description>Returns true if this part's mime type is multipart/*</description>
          <long-description></long-description>
          <tag name="return" line="301" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="316" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isTextPart()</full_name>
        <docblock line="316">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="316" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="335" package="MailMimeParser">
        <name>attachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachContentResourceHandle()</full_name>
        <docblock line="335">
          <description>Attaches the resource handle for the part's content.  The attached handle
is closed when the MimePart object is destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="335" description="" type="resource" variable="$contentHandle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$contentHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="353" package="MailMimeParser">
        <name>attachOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachOriginalStreamHandle()</full_name>
        <docblock line="353">
          <description>Attaches the resource handle representing the original stream that
created this part (including any sub-parts).  The attached handle is
closed when the MimePart object is destroyed.</description>
          <long-description>This stream is not modified or changed as the part is changed and is only
set during parsing in MessageParser.</long-description>
          <tag name="param" line="353" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="374" package="MailMimeParser">
        <name>getOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getOriginalStreamHandle()</full_name>
        <docblock line="374">
          <description>Returns a resource stream handle allowing a user to read the original
stream (including headers and child parts) that was used to create the
current part.</description>
          <long-description>The part contains an original stream handle only if it was explicitly set
by a call to MimePart::attachOriginalStreamHandle.  MailMimeParser only
sets this during the parsing phase in MessageParser, and is not otherwise
changed or updated.  New parts added below this part, changed headers,
etc... would not be reflected in the returned stream handle.</long-description>
          <tag name="return" line="374" description="the resource handle or null if not set" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="386" package="MailMimeParser">
        <name>detachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::detachContentResourceHandle()</full_name>
        <docblock line="386">
          <description>Detaches the content resource handle from this part but does not close
it.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="398" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setContent()</full_name>
        <docblock line="398">
          <description>Sets the content of the part to the passed string (effectively creates
a php://temp stream with the passed content and calls
attachContentResourceHandle with the opened stream).</description>
          <long-description></long-description>
          <tag name="param" line="398" description="" type="string" variable="$string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="432" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContentResourceHandle()</full_name>
        <docblock line="432">
          <description>Returns the resource stream handle for the part's content or null if not
set.  rewind() is called on the stream before returning it.</description>
          <long-description>The resource is automatically closed by MimePart's destructor and should
not be closed otherwise.

The returned resource handle is a stream with decoding filters appended
to it.  The attached filters are determined by looking at the part's
Content-Encoding header.  The following encodings are currently
supported:

- Quoted-Printable
- Base64
- X-UUEncode

UUEncode may be automatically attached for a message without a defined
Content-Encoding and Content-Type if it has a UUEncoded part to support
older non-mime message attachments.

In addition, character encoding for text streams is converted to UTF-8
if \ZBateson\MailMimeParser\Message\MimePart::isTextPart returns true.</long-description>
          <tag name="return" line="432" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="446" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContent()</full_name>
        <docblock line="446">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description></long-description>
          <tag name="return" line="446" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="465" package="MailMimeParser">
        <name>setRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setRawHeader()</full_name>
        <docblock line="465">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="465" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="465" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="475" package="MailMimeParser">
        <name>removeHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeHeader()</full_name>
        <docblock line="475">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="475" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="488" package="MailMimeParser">
        <name>getHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeader()</full_name>
        <docblock line="488">
          <description>Returns the AbstractHeader object for the header with the given $name</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="488" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="488" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="505" package="MailMimeParser">
        <name>getHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderValue()</full_name>
        <docblock line="505">
          <description>Returns the string value for the header with the given $name.</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="505" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="505" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="505" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="519" package="MailMimeParser">
        <name>getHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaders()</full_name>
        <docblock line="519">
          <description>Returns the full array of headers for this part.</description>
          <long-description></long-description>
          <tag name="return" line="519" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="538" package="MailMimeParser">
        <name>getHeaderParameter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderParameter()</full_name>
        <docblock line="538">
          <description>Returns a parameter of the header $header, given the parameter named
$param.</description>
          <long-description>Only headers of type
\ZBateson\MailMimeParser\Header\ParameterHeader have parameters.
Content-Type and Content-Disposition are examples of headers with
parameters. "Charset" is a common parameter of Content-Type.</long-description>
          <tag name="param" line="538" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$param">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="538" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="552" package="MailMimeParser">
        <name>setParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setParent()</full_name>
        <docblock line="552">
          <description>Sets the parent part.</description>
          <long-description></long-description>
          <tag name="param" line="552" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="562" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getParent()</full_name>
        <docblock line="562">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="562" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
    </class>
    <source>eJytVVFP2zAQfs+vOCGkUNQ073RsjAEaD50mBpqEkJCbuI2nxI5sB+gm/vvunMRJWtpuEnlJ3fvuu7vPd5cPn8qsDOLj4wCO4TYTBhYi54DvkmkLagE243B/ziw3Sj7MmMhnouDfmTZcQ6nVL57YCTqT/1kuEi4Nh8za8iSOVYknVemET5Rexo3VxHOTRs1hguHh/McFuseBZAU3JUu2BnyYcWPYkk+DoDLbUV85S/3riiVW6dV0p0fD+/BTC0vH2mLrI0ZrBPoMpuSJYLn4zVP4pmQLBM1LzQ2XVsglMKgqLhOVIohkJH3AC+yhncYMijoBVJtZUl8qS/8ifWuaAIYvqtyKiNyIrm+Ggq0gY08c3Rzts7AZ/v6ipMVY0a1m0iy4ji4pMcoS475EbaJEN69sHf9ZVXkKc96lioXMV8gmlS5YDm3ZvrC7u8u6XicGf8GQqRkIZBWy2UrLPTkRW5fWuI9eldyJVZbYPMwKJSOVWG4jYzVnBWJlCowIWpcLYUplBEHJM2TWsiQr0BSinNcocW4UpouXireBemNIx0JDQN2IaROfkMjhbh2EbeKkWGDY4kKnuaEqaV7eio9ORBXWcAT26/JCnrHKZkrDPWOZSKFpVzcdSc6M2a908CcAfFzH0oOcT0xjCdalVknxUs94yXUhjBFE74Cxe+NMW5QDb/zQyXEKssrzqbO9yYzq09URuZOs2Rn1HpF10Po6CRZmbirDybagXvpdga/dhaA2jn6oiWt8+rtEvZBx41Lb0ODLwMtjBQz2BRxm/eMadLgg4LD0v9eAJHut41D8ws3cANro2AnQqkiHoVrVHCcAFpVMXGs9PiZKonuV2KMaiM+uasYetb2QDuPy7x0HOY3gj7egMzb0yUk/n7XA/QijacdpcTNGH5uGcwE3jL3G8Cl0oHW04faGPdcidKLQE/YHLxwPbb3lEveXy9T19ulBCBMa/cTgMGbcHPlMxhAehCO04stTblb4D2n1lsZGdn5/TX1nvHNO4dblHCJdt5nDhuf1zfm8cavedIvA3ayQSV7RR3G4FvCPuklggZuPcmq/mjWZn5PmA4IztXMcltze4aBdYdwZsh+NHKpr04am13P/U4prwXeqpB75fcVcNVH3FDKcidfgNfgLL5IQAw==</source>
  </file>
  <file path="Message/Writer/MessageWriter.php" generated-path="Message.Writer.MessageWriter.html" hash="36de5aa3bb67eccaa15f9d8009efb466" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Message">\ZBateson\MailMimeParser\Message</namespace-alias>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\MimePart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Writer" line="20" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</extends>
      <name>MessageWriter</name>
      <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriter</full_name>
      <docblock line="20">
        <description>Writes out a message in a mail-compliant format.</description>
        <long-description>Provides a way of writing out a ZBateson\MailMimeParser\Message object to a
resource handle.</long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" refers="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" link="/classes/ZBateson.MailMimeParser.Message.Writer.MimePartWriter.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="26" package="MailMimeParser">
        <name>$defaultStreamFilterParams</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::defaultStreamFilterParams</full_name>
        <default>array('line-length' =&gt; 76, 'line-break-chars' =&gt; "\r\n")</default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;default params for stream filters in&#10;     setTransferEncodingFilterOnStream&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="35" package="MailMimeParser">
        <name>$typeToEncodingMap</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::typeToEncodingMap</full_name>
        <default>array('quoted-printable' =&gt; 'mmp-convert.quoted-printable-encode', 'base64' =&gt; 'mmp-convert.base64-encode', 'x-uuencode' =&gt; 'mailmimeparser-uuencode', 'x-uue' =&gt; 'mailmimeparser-uuencode', 'uuencode' =&gt; 'mailmimeparser-uuencode', 'uue' =&gt; 'mailmimeparser-uuencode')</default>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="35" description="&lt;p&gt;map of transfer-encoding types to registered stream filter&#10;names used in setTransferEncodingFilterOnStream&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Writer" line="31" package="MailMimeParser">
        <name>writeBoundary</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriter::writeBoundary()</full_name>
        <docblock line="31">
          <description>Writes out a mime boundary to the passed $handle optionally writing out a
number of empty lines before it.</description>
          <long-description></long-description>
          <tag name="param" line="31" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="31" description="" type="string" variable="$boundary">
            <type>string</type>
          </tag>
          <tag name="param" line="31" description="" type="integer" variable="$numLinesBefore">
            <type>integer</type>
          </tag>
          <tag name="param" line="31" description="" type="boolean" variable="$isEnd">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$boundary</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$numLinesBefore</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isEnd</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message\Writer" line="54" package="MailMimeParser">
        <name>recursiveWriteParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriter::recursiveWriteParts()</full_name>
        <docblock line="54">
          <description>Writes out headers and content for the passed MimePart, then loops over
its child parts calling recursiveWriteParts on each part.</description>
          <long-description></long-description>
          <tag name="param" line="54" description="&lt;p&gt;the current part to write out&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="54" description="&lt;p&gt;the handle to write out to&lt;/p&gt;" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="return" line="54" description="true if the part had children (and ended with writing a&#10;     boundary)" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="80" package="MailMimeParser">
        <name>writeMessageTo</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriter::writeMessageTo()</full_name>
        <docblock line="80">
          <description>Saves the message as a MIME message to the passed resource handle.</description>
          <long-description></long-description>
          <tag name="param" line="80" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="80" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="101" package="MailMimeParser">
        <name>getSignableBody</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriter::getSignableBody()</full_name>
        <docblock line="101">
          <description>Returns the content part of a signed message for a signature to be
calculated on the message.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="return" line="101" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="48" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::getInstance()</full_name>
        <docblock line="48">
          <description>Returns the singleton instance for the class, instantiating it if not
already created.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="65" package="MailMimeParser">
        <name>writePartHeadersTo</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::writePartHeadersTo()</full_name>
        <docblock line="65">
          <description>Writes out the headers of the passed MimePart and follows them with an
empty line.</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="65" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="82" package="MailMimeParser">
        <name>setCharsetStreamFilterOnPartStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::setCharsetStreamFilterOnPartStream()</full_name>
        <docblock line="82">
          <description>Sets up a mailmimeparser-encode stream filter on the content resource
handle of the passed MimePart if applicable and returns a reference to
the filter.</description>
          <long-description></long-description>
          <tag name="param" line="82" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="82" description="a reference to the appended stream filter or null" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="112" package="MailMimeParser">
        <name>setTransferEncodingFilterOnStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::setTransferEncodingFilterOnStream()</full_name>
        <docblock line="112">
          <description>Appends a stream filter on the passed MimePart's content resource handle
based on the type of encoding for the passed part.</description>
          <long-description></long-description>
          <tag name="param" line="112" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="112" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="112" description="" type="\ZBateson\MailMimeParser\Stream\StreamLeftover" variable="$leftovers">
            <type>\ZBateson\MailMimeParser\Stream\StreamLeftover</type>
          </tag>
          <tag name="return" line="112" description="the stream filter" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$leftovers</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamLeftover</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="146" package="MailMimeParser">
        <name>trimTextBeforeCopying</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::trimTextBeforeCopying()</full_name>
        <docblock line="146">
          <description>Trims out any starting and ending CRLF characters in the stream.</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the read string, and where the result will be written&#10;       to&lt;/p&gt;" type="string" variable="$read">
            <type>string</type>
          </tag>
          <tag name="param" line="146" description="&lt;p&gt;set to true if this is the first set of read&#10;characters from the stream (ltrims CRLF)&lt;/p&gt;" type="boolean" variable="$first">
            <type>boolean</type>
          </tag>
          <tag name="param" line="146" description="&lt;p&gt;contains any CRLF characters from the last $read&#10;line if it ended with a CRLF (because they're trimmed from the&#10;end, and get prepended to $read).&lt;/p&gt;" type="string" variable="$lastChars">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$read</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$first</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$lastChars</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="171" package="MailMimeParser">
        <name>copyContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::copyContentStream()</full_name>
        <docblock line="171">
          <description>Copies the content of the $fromHandle stream into the $toHandle stream,
maintaining the current read position in $fromHandle.  The passed
MimePart is where $fromHandle originated after setting up filters on
$fromHandle.</description>
          <long-description></long-description>
          <tag name="param" line="171" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="171" description="" type="resource" variable="$fromHandle">
            <type>resource</type>
          </tag>
          <tag name="param" line="171" description="" type="resource" variable="$toHandle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$fromHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="199" package="MailMimeParser">
        <name>writePartContentTo</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::writePartContentTo()</full_name>
        <docblock line="199">
          <description>Writes out the content portion of the mime part based on the headers that
are set on the part, taking care of character/content-transfer encoding.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="199" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="233" package="MailMimeParser">
        <name>writePartTo</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::writePartTo()</full_name>
        <docblock line="233">
          <description>Writes out the MimePart to the passed resource.</description>
          <long-description>Takes care of character and content transfer encoding on the output based
on what headers are set.</long-description>
          <tag name="param" line="233" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="233" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</inherited_from>
      </method>
    </class>
    <source>eJyVV22P2jgQ/p5fMbtCJeyRZa8fS6HV9irdSYeEbleqVCGtTGKIT8GObGc51O5/v/FLQsgL0Ei7EHteHz8zYz5+ytM8mNzdBXAHzylTsGEZBfzMidQgNqBTCt8fiaZK8NWCsGzBdnRJpKIScin+pbG+R2Wj/zljMeWKQqp1/mEyETm+iULG9F7I7cTvqslaJZF/uUf38Pj0B6pPAk52VOUk7nW4WlClyJauvkmmqZwGQaEuCk+vEVr5JY02PRrWhwJRaCCwc2LAuHlBE1EsdnnGCNewEXJHLAhg/pZSvLIENQnsycFAuEdLjG+9qQuRgFgbTEELIMacpA5CSAlPMlphTQqdCgnfCUlZAt6mhTHOiFLgzTmkgP6nKU9w1afploMfAeBjEzZPM2kUhrUoeELkwQRkuJCjcZrAwIUDItdMcJJlh9M0S4O82K3RP6JAd7k+QMY42l9TBA3RNKg5ufLzM/KO7I5Zez+NbaWl8TQog2tsMzyVAXr+2zh7tL4aEmshMhgw9ZUnfmdiP5HRGtHHBDcFj01qNi366B2FPp7x0fe46WrsDY+sRQexedgGwoYozOFhVBMxz8Y6PDrCXF8kzSnR4e1Krvhty+FoNK0svAV9doZRNKwJNrerfGoyNmKXy4Ugb6PIxlaPBGiGhXdBr6UVuP9niJlSklCJ9cUTiAVHYtsarLOzpPnYLHLIhMhR9xUZ780xrSBOWZbYPoffkcGGUZLGhVTs1dXN0u4hByiJUyvZx9fSIQxs3zShoCFpQnMLwvHIJHCB6la5/FpTw5dKU1JdSO5YrGVBzUm59NFXShKXG7qH0KCEpY+g7JlOqyKtCtQ+1dlfKoYOfMLT3MdlHk36DzSOl2i+LxX/dMf4LMKG3rRX5Ys77bMqLtcZbAiyr7Ze9bGZizOab6mPYWnOgWI/DIfeQ/R8yOkQa6bUOqkcLDnDh/Bo54uB26ExAqKwAcBsDgN7Cs3SsUVVRXMzm2GPzLKmlI25LHOMGevQyj7Au3dw47IcwSd4Dx8gxH438plP21ZqIF7XxsYOvNGprbeTtwpnb76LGC7/rlN6O20xF9G4OofwiMzviMz7sS2PRia+esxOV0h+u0agdjt6Iq94LKbkypsBMQN/8dfia7VyOjDbc9xZajYSrzzwVq6bi75eizVeqxqTyxvEmmma7q1UeyZeKJozZQo8HPWcSefBtzxcGAtnesMZU12atRZxQfNYxlWqv1jJ1krXQGsOtSuC7S2VU272jcd/LGcdI8uZWN7gCSi25UjBkphmWLpFglqWqOuKaDgJ4yIjpusjhWoM/2XG+jpyd7WzREXcn0w06wyrOzm0mNoaJX7dTp0ZtA8wfGjcYm7afIafPxuGepqPz8NsdbWLcmzjyDE/eMIh/qTBHz8a77tmgsjfhl3j6YrqWfaMOEn3jCdhx+xDqNE0/qdk94JYvHgqqA7hTZwJRTs2HFy+jTbK1Di4n/lb25neaQTL1vkW/A89V0SH</source>
  </file>
  <file path="Message/Writer/MessageWriterService.php" generated-path="Message.Writer.MessageWriterService.html" hash="63bf84b4e4c32fbc05f920a48949925d" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Writer" line="14" package="MailMimeParser">
      <extends/>
      <name>MessageWriterService</name>
      <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService</full_name>
      <docblock line="14">
        <description>Simple service provider for MimePartWriter singletons.</description>
        <long-description></long-description>
        <tag name="author" line="14" description="Zaahid Bateson"/>
        <tag name="package" line="14" description="MailMimeParser"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="21" package="MailMimeParser">
        <name>getMessageWriter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService::getMessageWriter()</full_name>
        <docblock line="21">
          <description>Returns the MessageWriter singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="21" description="" type="\ZBateson\MailMimeParser\Message\Writer\MessageWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MessageWriter</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="31" package="MailMimeParser">
        <name>getMimePartWriter</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MessageWriterService::getMimePartWriter()</full_name>
        <docblock line="31">
          <description>Returns the MimePartWriter singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="31" description="" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJytkDFrwzAQhXf9ihsTQ6M9KTSELh0MpSkUghfFOdsqjiR0cpaS/96zrLRocNuhN/gQfu++d3f/4DonZFEIKOC10wSN7hG4O+UD2AZCh3DYqYBkTVUq3Zf6jM/KE3pw3r5jHVZsHv3bXtdoCKELwa2ltI5fdvA1rqxvZfpL8kinu/RYMR52+0e2S2HUGcmpehZYlUikWqzevA7oN+KWfK/PjmOz5MJzx1wXfeKAjfWQ7GHyAGnT9hisoa/YaggdCw9KdfoECR0T1b0igkSdBuwnhvgQwBX5YxXwgmHwhuLBMsc3ErShoAzf42a69a2Pbqj+tnmVAdIQGbsbjnxbaAZTB83IFkMmXiyjbIo/ViJnovWabU8p7GK5ieJr/P649syp/3HvjPDr4pl6dvNMNbP6VXwCOHcGzQ==</source>
  </file>
  <file path="Message/Writer/MimePartWriter.php" generated-path="Message.Writer.MimePartWriter.html" hash="231b66fa052a7a60641cd5056985fd67" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="MimePart">\ZBateson\MailMimeParser\Message\MimePart</namespace-alias>
    <namespace-alias name="StreamLeftover">\ZBateson\MailMimeParser\Stream\StreamLeftover</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message\Writer" line="20" package="MailMimeParser">
      <extends/>
      <name>MimePartWriter</name>
      <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</full_name>
      <docblock line="20">
        <description>Writes a MimePart to a resource handle.</description>
        <long-description>The class is responsible for writing out the headers and content of a
MimePart to an output stream buffer, taking care of encoding and filtering.</long-description>
        <tag name="author" line="20" description="Zaahid Bateson"/>
        <tag name="package" line="20" description="MailMimeParser"/>
      </docblock>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="26" package="MailMimeParser">
        <name>$defaultStreamFilterParams</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::defaultStreamFilterParams</full_name>
        <default>array('line-length' =&gt; 76, 'line-break-chars' =&gt; "\r\n")</default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;default params for stream filters in&#10;     setTransferEncodingFilterOnStream&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="35" package="MailMimeParser">
        <name>$typeToEncodingMap</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::typeToEncodingMap</full_name>
        <default>array('quoted-printable' =&gt; 'mmp-convert.quoted-printable-encode', 'base64' =&gt; 'mmp-convert.base64-encode', 'x-uuencode' =&gt; 'mailmimeparser-uuencode', 'x-uue' =&gt; 'mailmimeparser-uuencode', 'uuencode' =&gt; 'mailmimeparser-uuencode', 'uue' =&gt; 'mailmimeparser-uuencode')</default>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="35" description="&lt;p&gt;map of transfer-encoding types to registered stream filter&#10;names used in setTransferEncodingFilterOnStream&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="48" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::getInstance()</full_name>
        <docblock line="48">
          <description>Returns the singleton instance for the class, instantiating it if not
already created.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="65" package="MailMimeParser">
        <name>writePartHeadersTo</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::writePartHeadersTo()</full_name>
        <docblock line="65">
          <description>Writes out the headers of the passed MimePart and follows them with an
empty line.</description>
          <long-description></long-description>
          <tag name="param" line="65" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="65" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="82" package="MailMimeParser">
        <name>setCharsetStreamFilterOnPartStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::setCharsetStreamFilterOnPartStream()</full_name>
        <docblock line="82">
          <description>Sets up a mailmimeparser-encode stream filter on the content resource
handle of the passed MimePart if applicable and returns a reference to
the filter.</description>
          <long-description></long-description>
          <tag name="param" line="82" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="82" description="a reference to the appended stream filter or null" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="112" package="MailMimeParser">
        <name>setTransferEncodingFilterOnStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::setTransferEncodingFilterOnStream()</full_name>
        <docblock line="112">
          <description>Appends a stream filter on the passed MimePart's content resource handle
based on the type of encoding for the passed part.</description>
          <long-description></long-description>
          <tag name="param" line="112" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="112" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="112" description="" type="\ZBateson\MailMimeParser\Stream\StreamLeftover" variable="$leftovers">
            <type>\ZBateson\MailMimeParser\Stream\StreamLeftover</type>
          </tag>
          <tag name="return" line="112" description="the stream filter" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$leftovers</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\StreamLeftover</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="146" package="MailMimeParser">
        <name>trimTextBeforeCopying</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::trimTextBeforeCopying()</full_name>
        <docblock line="146">
          <description>Trims out any starting and ending CRLF characters in the stream.</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;the read string, and where the result will be written&#10;       to&lt;/p&gt;" type="string" variable="$read">
            <type>string</type>
          </tag>
          <tag name="param" line="146" description="&lt;p&gt;set to true if this is the first set of read&#10;characters from the stream (ltrims CRLF)&lt;/p&gt;" type="boolean" variable="$first">
            <type>boolean</type>
          </tag>
          <tag name="param" line="146" description="&lt;p&gt;contains any CRLF characters from the last $read&#10;line if it ended with a CRLF (because they're trimmed from the&#10;end, and get prepended to $read).&lt;/p&gt;" type="string" variable="$lastChars">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$read</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$first</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$lastChars</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message\Writer" line="171" package="MailMimeParser">
        <name>copyContentStream</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::copyContentStream()</full_name>
        <docblock line="171">
          <description>Copies the content of the $fromHandle stream into the $toHandle stream,
maintaining the current read position in $fromHandle.  The passed
MimePart is where $fromHandle originated after setting up filters on
$fromHandle.</description>
          <long-description></long-description>
          <tag name="param" line="171" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="171" description="" type="resource" variable="$fromHandle">
            <type>resource</type>
          </tag>
          <tag name="param" line="171" description="" type="resource" variable="$toHandle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$fromHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$toHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="199" package="MailMimeParser">
        <name>writePartContentTo</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::writePartContentTo()</full_name>
        <docblock line="199">
          <description>Writes out the content portion of the mime part based on the headers that
are set on the part, taking care of character/content-transfer encoding.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="199" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message\Writer" line="233" package="MailMimeParser">
        <name>writePartTo</name>
        <full_name>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter::writePartTo()</full_name>
        <docblock line="233">
          <description>Writes out the MimePart to the passed resource.</description>
          <long-description>Takes care of character and content transfer encoding on the output based
on what headers are set.</long-description>
          <tag name="param" line="233" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="233" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
    </class>
    <source>eJy9WW2P2zYS/u5fwQRGLaf2Oj30ernsOdcmTZAAWaTYdVuguwuDlilLF0nUkXS2i3b/+80MSVmipH1JDtUX29TMcGY4z8Mh/a9/V2k1Wjx5MmJP2CrNNEuyXDD4rLgyTCbMpIL99pIboWV5ccKz/CQrxE9caaFYpeR/RGyOQBn1v8+zWJRasNSY6vliISv4JfcqFkdS7RburV5s9HbufhzB9Ozl2Y+gvhiVvBC64vHghBcnQmu+Exe/qswIdTwa7fXdwm7IHN8qfWaU4IX7eC8SIz/RDC43NKNmnHlrzEj4pYQNkKW83OYCM8FsKgWLc641phKEKlnqbAOZTaRiV2ArK3dM7g2lNxV8KxQYL7cslqURJWWeo6HWdCWqVKClyUu22SeJUDNm+Ee0F3MlUFGUsdziABqE9YRUwa/at+/53qTgxm+cp9mWuXzQCliX/Zw2y6M/RgweygM+YOATV4wrxa/ZViR8nxusFl5ois75ZueF+EuvRo8WZqV4qcHv187NNyT5obSpd9IL+qxU9gncA5vcZDEbu+mspNX7yc68ZOdWE55JnpVinotyZ9IJW75g//huFrzcgIGP8ziFtSeJxxfqonxspS6P6eOWqAteETRcIPM64ea6giKBpVJil2nwTmzb+WjlguqdQVFuIUtfmBmceSW94gk42MrIf/fSiO0ctErDoQ4p6ElRVHMoOCh0cxRK2KDEpJG5Ddfiu2+7qna8R+H3+X7vRq0SQK6A4qoIcoeXocq9pR9s/p7GB0rgVJi9KjWBVkOac2FkCWsHi1DGFtvGA3/mxk3GCeyZYVnCSmm8MZ7Dom6vWQwfkPmj9vLuN8CQfnWTfRmbDKbaCfPOzRZNSfCPOjZfCd4dwoQLBJ+xBfcSjaxjnudiu6ahaHoQAhejR5mGWowOhs6t6uV02piOTHZEwHwprpwvTcM39TdFSezRtcI3vZl39BsyptufKlAHENVcSbwn81xe0VoV7CozKYx6a6KozDVDIvBZr0FORHawNMZtMHhZc/7Ykn7fwtUrhlxPpt5al1cyahufeTPheo59kEsrOH8BC+esNDMLVSd4nLKoVuDaK4cLlpA7kZtxxh47OWK/3tXqaDRF+9fqTBhgtQp2xwBkFmJtQmSQI8KM2/fq5HprduKhlYZ65VUFGUfKonVXDqO4NwOVCgSmkd4a2rATP2zlXdHW3rWtk1nwQ5TbkPAZcEK5z/Ne8q6rBPD2Cvci0draPpToiR0JqqZbLDZNzVp5ZVN66nx+SxIh2J14plfid4P2ow7KXew2rLUNa22jjVqCDUdmnRch43a42T9nq9PXP5ys37x7v3p9uobvP3ZlzjsjNEVsc2gZ/ufVm/mzHvskaSQJhcCiZkJAfN3AalWX1vkKdtwB8y1nbhF5d/Zh/uzZ3/85/2bSKzTtjF62Rm7jVyy621D6Ay0g4qQXjwHQJrqL0Bb7MWwCtl4bu5FWJ+q3RmcW0/5/pF7/ut28s3HuvulBHNNO3tOgDeP09h5tiNxnw751oOwS/fYzED2uE77EsIyELRCKOSzzX3i+F9Ghkn0f62OaTJs2K99hU/O7LoTaiUiLPHn+fLghnwUYndTxWuDVP9vwmODxE/vih8LzLlhOyGjfOOCkjb4D6i4DsrSNkQu903Gf19nvdkoP49BWBXR9vocDn0erbqk/i2NCflmprLANGy+vsSFUxh9JIWj8+ur0/RuGLMljd1JswHGAHeAlqo6xdSZp+mJHZ2T8KoVt2b3SeDS9yvKcbQR1YpDV1gmMNVoDN8NGypyNk0xpg3Cn3V3tBa6/wfuRTLsmwgsAzaETgd1GXImSRZNootxQbjD+6UB80BDbjoBol2fY0EAaw5TVplHeZiXwA5tc9B2OH7Y7sa2wtRRtRMzxUgRMXE8wbeBYAULebmAMLNgkAyKBHIVreCBFNPU0OMOE7InWsc14KbBnfSWra4g1+op0Z+wrm3T8UkcfciN1LCTWOYrYBVmyhOdaHLffUZEsGeU9ctM9Hu55vXxjFY7sYIMVD++WbDJpvCi4iVM6fR3g4X2HnO3WJBBNFufoweXX48VkxpxTXrl70mpO56XOn172B6ruEWgXsbAgmdCtbtx13WOsB7cfuSLOStf2jo1svZl5c9DvUeXSvQja3Ctl+wfwsZI6o5oA0DesHzG6ObNdgjd0aPa1Q3fTH6myXVbiCZrxBBsYwCQxDZxA/B2UrFHfnOuL+o+DnUERn5jbQREDDNzeNdRCHOaaHax22gZIKZa/EXkeNVQaC6/EVQb7Tf/LxQKJpdx59LutCt1bG7n2N46OMNL0E4gIUdBtlzaygleI6qY9YAesILpRpptBWRBha78et+LIAxrZ9zB8laK16FEiZNKKpIMYh4UEP6NWDr95+rdvp23kIDghxBia2Lio7mqYDn3SjE2ebTIzmbJHyyV7GjrRdISwD5yZ8xhMLRCVf16oPy9KxL+7f3Q82vbtpuPpPQ5tNDNuWPMX/bTrGceRboNzb5vdXwf4Kux63Lg6gPr42M48Ful0qGMI7ng8B1VSEVAcF+ER0v450Tpx+LsPk/LDDRtQBe3Q/kiDaAruyuvNdOHmm/tb3frw8tfdEbn6esAd0RecFaiQ2vpYw7hphcUU7rR0UFz6+rrH5YW9swg2q/oI4C4N2yekKBQXrQNXa/o7zmS9fa7paX+H7i7Cg6R7Qg+tP11C92vYbuvrNT0ezjWtURD40CLhkyT5XqdRv2V82gcQJQqIKpyhRy28BTwkZP7CXuRsiSLvZq7k7iD6fUz6fLsJaOdOUmn+nda4j/BwDaG+4h9BucMVrX/qOnzh+cb9V0c05Q0i2oGhDn/5WYr66yjmAdxiy7nnAjvQOx5UOfBZr8rN6Gb0P8Hq6A8=</source>
  </file>
  <file path="Message/PartFilter.php" generated-path="Message.PartFilter.html" hash="60916dc12b885fd1324047e2f3a28fb4" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="InvalidArgumentException">\InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="42" package="MailMimeParser">
      <extends/>
      <name>PartFilter</name>
      <full_name>\ZBateson\MailMimeParser\Message\PartFilter</full_name>
      <docblock line="42">
        <description>Provides a way to define a filter of MimeParts for use in various calls to
add/remove MimeParts.</description>
        <long-description>A PartFilter is defined as a set of properties in the class, set to either be
'included' or 'excluded'.  The filter is simplistic in that a property
defined as included must be set on a part for it to be passed, and an
excluded filter must not be set for the part to be passed.  There is no
provision for creating logical conditions.

The only property set by default is $signedpart, which defaults to
FILTER_EXCLUDE.

A PartFilter can be instantiated with an array of keys matching class
properties, and values to set them for convenience.

```php
$inlineParts = $message-&gt;getAllParts(new PartFilter([
    'multipart' =&gt; PartFilter::FILTER_INCLUDE,
    'headers' =&gt; [
        FILTER_EXCLUDE =&gt; [
            'Content-Disposition': 'attachment'
        ]
    ]
]));

$inlineTextPart = $message-&gt;getAllParts(PartFilter::fromInlineContentType('text/plain'));
```</long-description>
        <tag name="author" line="42" description="Zaahid Bateson"/>
        <tag name="package" line="42" description="MailMimeParser"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Message" line="47" package="MailMimeParser">
        <name>FILTER_OFF</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</full_name>
        <value>0</value>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="47" description="&lt;p&gt;indicates a filter is not in use&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ZBateson\MailMimeParser\Message" line="52" package="MailMimeParser">
        <name>FILTER_EXCLUDE</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_EXCLUDE</full_name>
        <value>1</value>
        <docblock line="52">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="52" description="&lt;p&gt;an excluded filter must not be included in a part&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ZBateson\MailMimeParser\Message" line="57" package="MailMimeParser">
        <name>FILTER_INCLUDE</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_INCLUDE</full_name>
        <value>2</value>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="57" description="&lt;p&gt;an included filter must be included in a part&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="62" package="MailMimeParser">
        <name>$multipart</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::multipart</full_name>
        <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
        <docblock line="62">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="62" description="&lt;p&gt;filters based on whether MimePart::isMultiPart is set&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="67" package="MailMimeParser">
        <name>$textpart</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::textpart</full_name>
        <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
        <docblock line="67">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="67" description="&lt;p&gt;filters based on whether MimePart::isTextPart is set&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="74" package="MailMimeParser">
        <name>$signedpart</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::signedpart</full_name>
        <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_EXCLUDE</default>
        <docblock line="74">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="74" description="&lt;p&gt;filters based on whether the parent of a part is a&#10;multipart/signed part and this part has a content-type equal to its&#10;parent's 'protocol' parameter in its content-type header&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="88" package="MailMimeParser">
        <name>$headers</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::headers</full_name>
        <default>array()</default>
        <docblock line="88">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="88" description="&lt;p&gt;array of header rules.  The top-level contains keys of&#10;FILTER_INCLUDE and/or FILTER_EXCLUDE, which contain key =&gt; value mapping&#10;of header names =&gt; values to search for.  Note that when searching&#10;MimePart::getHeaderValue is used (so additional parameters need not be&#10;matched) and strcasecmp is used.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$filter = new PartFilter();&#10;$filter-&gt;headers = [ PartFilter::FILTER_INCLUDE =&gt; [ 'Content-Type' =&gt; 'text/plain' ] ];&lt;/code&gt;&lt;/pre&gt;" type="array&lt;mixed,string[]&gt;" variable="">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="95" package="MailMimeParser">
        <name>$defaultHeaderValues</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::defaultHeaderValues</full_name>
        <default>array('Content-Type' =&gt; 'text/plain', 'Content-Disposition' =&gt; 'inline')</default>
        <docblock line="95">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="95" description="&lt;p&gt;map of headers and default values if the header isn't set.&#10;This allows text/plain to match a Content-Type header that hasn't&#10;been set for instance.&lt;/p&gt;" type="array&lt;mixed,string&gt;" variable="">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="106" package="MailMimeParser">
        <name>fromContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::fromContentType()</full_name>
        <docblock line="106">
          <description>Convenience method to filter for a specific mime type.</description>
          <long-description></long-description>
          <tag name="param" line="106" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="106" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="124" package="MailMimeParser">
        <name>fromInlineContentType</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::fromInlineContentType()</full_name>
        <docblock line="124">
          <description>Convenience method to look for parts of a specific mime-type, and that
do not specifically have a Content-Disposition equal to 'attachment'.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="124" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="146" package="MailMimeParser">
        <name>fromDisposition</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::fromDisposition()</full_name>
        <docblock line="146">
          <description>Convenience method to search for parts with a specific
Content-Disposition, optionally including multipart parts.</description>
          <long-description></long-description>
          <tag name="param" line="146" description="" type="string" variable="$disposition">
            <type>string</type>
          </tag>
          <tag name="param" line="146" description="" type="integer" variable="$multipart">
            <type>integer</type>
          </tag>
          <tag name="return" line="146" description="" type="\ZBateson\MailMimeParser\Message\PartFilter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$disposition</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$multipart</name>
          <default>\ZBateson\MailMimeParser\Message\PartFilter::FILTER_OFF</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="167" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__construct()</full_name>
        <docblock line="167">
          <description>Constructs a PartFilter, optionally instantiating member variables with
values in the passed array.</description>
          <long-description>The passed array must use keys equal to member variable names, e.g.
'multipart', 'textpart', 'signedpart' and 'headers'.</long-description>
          <tag name="param" line="167" description="" type="array" variable="$filter">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="186" package="MailMimeParser">
        <name>validateArgument</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::validateArgument()</full_name>
        <docblock line="186">
          <description>Validates an argument passed to __set to insure it's set to a value in
$valid.</description>
          <long-description></long-description>
          <tag name="param" line="186" description="&lt;p&gt;Name of the member variable&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="186" description="&lt;p&gt;The value to test&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="186" description="&lt;p&gt;an array of valid values&lt;/p&gt;" type="array" variable="$valid">
            <type>array</type>
          </tag>
          <tag name="throws" line="186" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$valid</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="205" package="MailMimeParser">
        <name>setHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::setHeaders()</full_name>
        <docblock line="205">
          <description>Sets the PartFilter's headers filter to the passed array after validating
it.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="" type="array" variable="$headers">
            <type>array</type>
          </tag>
          <tag name="throws" line="205" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headers</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="232" package="MailMimeParser">
        <name>__set</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__set()</full_name>
        <docblock line="232">
          <description>Sets the member variable denoted by $name to the passed $value after
validating it.</description>
          <long-description></long-description>
          <tag name="param" line="232" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="232" description="" type="integer|array" variable="$value">
            <type>integer</type>
            <type>array</type>
          </tag>
          <tag name="throws" line="232" description="" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>integer|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="256" package="MailMimeParser">
        <name>__isset</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__isset()</full_name>
        <docblock line="256">
          <description>Returns true if the variable denoted by $name is a member variable of
PartFilter.</description>
          <long-description></long-description>
          <tag name="param" line="256" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="256" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="267" package="MailMimeParser">
        <name>__get</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::__get()</full_name>
        <docblock line="267">
          <description>Returns the value of the member variable denoted by $name</description>
          <long-description></long-description>
          <tag name="param" line="267" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="279" package="MailMimeParser">
        <name>failsMultiPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsMultiPartFilter()</full_name>
        <docblock line="279">
          <description>Returns true if the passed MimePart fails the filter's multipart filter
settings.</description>
          <long-description></long-description>
          <tag name="param" line="279" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="279" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="292" package="MailMimeParser">
        <name>failsTextPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsTextPartFilter()</full_name>
        <docblock line="292">
          <description>Returns true if the passed MimePart fails the filter's textpart filter
settings.</description>
          <long-description></long-description>
          <tag name="param" line="292" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="292" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="305" package="MailMimeParser">
        <name>failsSignedPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsSignedPartFilter()</full_name>
        <docblock line="305">
          <description>Returns true if the passed MimePart fails the filter's signedpart filter
settings.</description>
          <long-description></long-description>
          <tag name="param" line="305" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="305" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="328" package="MailMimeParser">
        <name>failsHeaderPartFilter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::failsHeaderPartFilter()</full_name>
        <docblock line="328">
          <description>Returns true if the passed MimePart fails the filter's header filter
settings.</description>
          <long-description></long-description>
          <tag name="param" line="328" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="328" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="351" package="MailMimeParser">
        <name>filter</name>
        <full_name>\ZBateson\MailMimeParser\Message\PartFilter::filter()</full_name>
        <docblock line="351">
          <description>Determines if the passed MimePart should be filtered out or not.  If the
MimePart passes all filter tests, true is returned.  Otherwise false is
returned.</description>
          <long-description></long-description>
          <tag name="param" line="351" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="351" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
    </class>
    <source>eJzVWutv3DYS/+6/gimMrhzIu737aNdu0zxwAZo0aNLiUMdwaInrZaOVdCJlx2jyv9/McChRr13bcdI7AYl3Jc77Nw9S+/0P5arcWTx8uCMeijcrbcRSZ0rA31JWVhRLYVdK/PGTtMoU+dsXUmcv9Fq9kpVRlSir4k+V2DkQI/2PmU5UbpRYWVseLBZFCd+KukrUvKguFvzULM5Nus9f5iBe/PT6CZAvdnK5VqaUyaTAty+UMfJCHe7s1CDmeX4pM50+qi7qtcrt0w+JKq0ucnjMFr2qikudKiOkuJLXwhYiVUudK/gOdlowASxk/hZsLyqBjHUuLmWli9qIRGaZAULkJtN0Ual1calaGrRd4L9HAr8/c1zBf05QKiQKN4p8Cf4qVWU1KAQi0LNJJo2J6TkopzTcq8S5QoYznSdZnap0JkCtmfrA3+YCAqW8/iDJ6HWZaWN14rhKCxJZ1DVyClTxPMW6NhYEOc1yJMB4owM0qQKPSlBNpbGQOZDmyMjr4IUTk7xoGCE5WkW8QiZO54qAlZMvS4yMgWARUVIpaXV+IbLiQoPLRVLkqcZYtg5Go4s8u25MI5Hn12ierDOLvHeNvgBLUX4srlY6WfmnPobPnv/85umvZ0///fjn3548HY9eInNUXefGytxqgGIqriA04AUhqwqABLF8r66NWEubrFBviiPbxSF2jgOE1gqFuxiv1NoZXOSXKtcqh9zwOrx79w6TET7t6jyDiDlQHondtYP9/vGFso+yjO5HuboKlI5OkBCv2RrM1eiCmTg6DpYcHLDxz1+S8XFDsVIyVZWh9SfC38ar6y56Hj4m6sdFbiH99p9oUxaGojY7EDNprUxWmJizkOTUf6EPp3t7h95+tvqN+mBR6UnDQ4uWVbF+TmSsxZvrUkUzCzwWZSZ1PmMB4FxfpWRtVxCCP6Rc6VRwpaECRFEMPLbz1w5qSsUELyCGugDAALABPhMkbUsJYRufYA1hggX9hWhDorAvf3n2DEz77pCeTPIHqG3KtiaPtc/daYFN8MQ/tgttGIdCbymQ8QUC/7lFoBNixLmEIoF16GqlqAT6+npwoM0LxDMhAoud6gouK30JYQCoeNSD2BHMg9fvQ5cGnJtUQfR9EU24tgLMsQJxzQZNpGdBV+OJhauGbhkWI7vyjX1FbSnhzLWQNEL9p4bCC4VKW9Ph5yTOjJhBcbNFUmQzvAfNmlCfI0GXlasn485pK/S4exitG1xkbAUl9+T05LStxk6iqOpMGW6Qtij3M3WpqJlYKAXG1exi6bn14AoeWkBd6Orh2wjzQBZYBamsQ/kvS1DF82v1oEmmWcflX1bAB4o/6PeyAFdQp4bQ5vws4NRCDgrfv4jn7yQR4lcjKCJT4DhCxRai1oQDSpCCx65KeG7UpVS6RxgA7yWAq2RdemZzv87/9Y3IfdvlSnAkeh1n77C3ZP+YGwmsPdnQeFybafoGlmxqPWHZFqfi9DBQaBxMgTxYvREtGKw2QoZ84ScHjpJ20y7HUJt8ZjHJ551soCEZhsLiCsLa6IsRJjdDVoV2eWYUa0g6YNnhdq4o/Dx50cBBE8GYsaxtAAcy3C0WYotD4+G6sGHTcteAeenpeAo+bicXAZBbFSnazhhBK2DaLVWilzCOrgHGAivCAGI/EmI5OFC8YSFq3TyulK2rPGzFHZfU57B/AGqJQ++yzhNLkyQMA+EY0LDdI6q/Gg8wd8Sz4xG1XiQPdQaiziO8HM0oqgdrxwPTMzi4TnfGv51ytn26RVCyonhPISlpkKSW0YkNVeuYW4NskJkWVED8UgD7NWD3UgXYDqDTNo5w5Pt6ER+Of/+XcY+3ievO4JvEDfK6M4r3Bd8j4Noex5Bzu6YGSQF1X9FYFKVrZgA2N2wiTtqpruTdtuMwgaq0ZdhbgXNVOyN+PuoC1aNQbHyTSfTWuOxu6VoJ8VeBbx9PQzffB54ghnVicSxtndZDhd+PEzLU+hw6Dp7TyHOY+ghrnp1v6DmPzHgG4YbFAYLe9Ba4HQ+eAtG02BS3njw34sVCzS8alkGYYtd7/ed26J1RtW0iNQVopwrPVWOYbMB4dpZ430UdKhqK+kjbJfZuQLuRunGAKj+QwQUprqCkiMgzhP2E+7gXSMMLhqpIg3ttxHqduHWw8++tJP1wi7J/fHZGBLQwFn3Cww7Zp53up3GA/Y4nhW6/joc47sTQBx7CSxJp95ObGg+qcMPDtySP+7opKrt08LitGiFExEv8j89RexiaIHPCEJfuE2gAettxhJAinYMpd8dlQENjVxUOrFMnpqMDZwOxS/adJ4vIspg1jTuq9AGH4X+g8zNaE3kKXttHwG4mDVZNWnxWFmXEC7sRJ2OoWk7ZEw2ANWO3thtX7FIzMecwzeGzP+socorYsFfOxZ+FziNMisYGovSsSH+8sS++oRskdITP7Bt3AooHup3Hgamb4Pxa4YkmQKStlYBXv7fhAoDA6Vc3ubSEQIposOPUdkspYt53Q1SvZhm/qTVRl3sfPQ4IVzJ7H/klccsG0AFheD9AkashA9QOMeEr23D22n0/vHcyMZHFU531dCqyeLnEME1ijJbDuyCdLGO0e0Q39YEGMmpsXNv6pgxBjxcAdnhY4rusr5JBDeJd7yQzSrnmeGS4bLrEB084zu0ZgIfIpkGjSZx+P08V7HkgTc6vuSJ0s4cdSukTTBmcRRvSJ2wGw5n0Y1s7a3UvucWtM6zQYzXZ2Xh0dNQZLj9+FMGDZiTo3Q/GgzvnnlNweNs1iO25B1P0IO8+Kx9ZczaTFQmKsVCZUT3P+foxNvOEuU1BuGN+T6XybDJHAmuCQsta3Ky9/EobEkiUCsceN7xMZwoeiA3yqT1mbVvUrXKEN0XnRZFtATyPl0g9sbPiFUGIN+5GGvObGWx8gBu44g72rfUHlW4x8GKLeaFhN7IrCCvXN3/iLJZSZ87ypR8r2g1tZz+ChR+L3+Su/O2W1/hvG6G7Y5vyYeT7gynp2rwe4mPpLtMJj3ksBHt1SOiJE5dvv3W89o+Dl1HR3l4n46BE3oipL0bA9MEo1y8QwOaF1P9i/PwrtbuEr33TdrPoeVkbgreJ5WjsAp5fIHTB67KvHjwlt2wMSd/XpOGNI0gtlLtT8Cpw6Gw8J+u1TNZtKaEVj7ZmFxMol6/onWW0R4zzOssmWN1MFY77oHniRTJf8LEuDg6NDsGLmqh7FBwOse7t6igDb8Stub3i97TbuL3ym+Eexzh41RtwRxe3rw+jnupxMEnym+eZ8/93mDA9woCspzTTfFbAOPdHA/YZkb/XzOY90t+f1b1xg1Rt8HGzpG6PA7t7MjwVpF8E4Kmx2+z149qS8nYSafz+kHd0oyeF/uXtUXO+6GSPvCY9IYZ44viD2LpKHFDBOBxKXAUv4qcS3W+8mP/ekA1mUcRe2di1wowJRMetV1yijG6yXUebEBL0se1CHpCQsRAE2YTYH5ra3ZP0D2oD8qCij+fYE6xSa523b+n7GWZWRZ2luENyGYW/nKktnszBiD4X4jmReX4NGbGhF/rNqZky1sSczYY1pJ8w/oI/wrnSRjl94aln1yz6G9P2FuPTA58rowN0QBmgKaTojWzbCQYzwnaSQQVyJE0l/rTzX2zfC10=</source>
  </file>
  <file path="Message/NonMimePart.php" generated-path="Message.NonMimePart.html" hash="e42d25e453ed45ace33b090c26833c6f" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderFactory">\ZBateson\MailMimeParser\Header\HeaderFactory</namespace-alias>
    <namespace-alias name="MimePartWriter">\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="22" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Message\MimePart</extends>
      <name>NonMimePart</name>
      <full_name>\ZBateson\MailMimeParser\Message\NonMimePart</full_name>
      <docblock line="22">
        <description>Represents part of a non-mime message.  The part could either be a plain text
part or a uuencoded attachment and could be extended for other pre-mime
message encoding types.</description>
        <long-description>This allows clients to handle all messages as mime messages by providing a
Content-Type header.  NonMimePart returns text/plain.</long-description>
        <tag name="author" line="22" description="Zaahid Bateson"/>
        <tag name="package" line="22" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\MimePart" refers="\ZBateson\MailMimeParser\Message\MimePart" link="/classes/ZBateson.MailMimeParser.Message.MimePart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="30" package="MailMimeParser">
        <name>$headerFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headerFactory</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the HeaderFactory&#10;     object used for created headers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="36" package="MailMimeParser">
        <name>$headers</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::headers</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;array of header&#10;objects&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="41" package="MailMimeParser">
        <name>$parent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parent</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;parent part&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="46" package="MailMimeParser">
        <name>$handle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::handle</full_name>
        <default></default>
        <docblock line="46">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="46" description="&lt;p&gt;the content's resource handle&lt;/p&gt;" type="resource" variable="">
            <type>resource</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="51" package="MailMimeParser">
        <name>$originalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::originalStreamHandle</full_name>
        <default></default>
        <docblock line="51">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="57" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::parts</full_name>
        <default>array()</default>
        <docblock line="57">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="57" description="&lt;p&gt;array of parts in this&#10;     message&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="63" package="MailMimeParser">
        <name>$partWriter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::partWriter</full_name>
        <default>null</default>
        <docblock line="63">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="63" description="&lt;p&gt;the part&#10;     writer for this MimePart&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="30" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\NonMimePart::__construct()</full_name>
        <docblock line="30">
          <description>Sets up a default Content-Type header of text/plain.</description>
          <long-description></long-description>
          <tag name="param" line="30" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="30" description="" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="$partWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Message\MimePart::__construct()" refers="\ZBateson\MailMimeParser\Message\MimePart::__construct()" link="/classes/ZBateson.MailMimeParser.Message.MimePart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partWriter</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="71" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__construct()</full_name>
        <docblock line="71">
          <description>Sets up class dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Header\HeaderFactory" variable="$headerFactory">
            <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
          </tag>
          <tag name="param" line="71" description="" type="\ZBateson\MailMimeParser\Message\Writer\MimePartWriter" variable="$partWriter">
            <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headerFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\HeaderFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partWriter</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\Writer\MimePartWriter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="80" package="MailMimeParser">
        <name>__destruct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::__destruct()</full_name>
        <docblock line="80">
          <description>Closes the attached resource handle.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="99" package="MailMimeParser">
        <name>addPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::addPart()</full_name>
        <docblock line="99">
          <description>Registers the passed part as a child of the current part.</description>
          <long-description>If the $position parameter is non-null, adds the part at the passed
position index.</long-description>
          <tag name="param" line="99" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="99" description="" type="integer" variable="$position">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$position</name>
          <default>null</default>
          <type>integer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="118" package="MailMimeParser">
        <name>removePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removePart()</full_name>
        <docblock line="118">
          <description>Removes the child part from this part and returns its position or
null if it wasn't found.</description>
          <long-description>Note that if the part is not a direct child of this part, the returned
position is its index within its parent (calls removePart on its direct
parent).</long-description>
          <tag name="param" line="118" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="118" description="or null if not found" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="138" package="MailMimeParser">
        <name>removeAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeAllParts()</full_name>
        <docblock line="138">
          <description>Removes all parts that are matched by the passed PartFilter.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="157" package="MailMimeParser">
        <name>getPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPart()</full_name>
        <docblock line="157">
          <description>Returns the part at the given 0-based index, or null if none is set.</description>
          <long-description>Note that the first part returned is the current part itself.  This is
often desirable for queries with a PartFilter, e.g. looking for a
MimePart with a specific Content-Type that may be satisfied by the
current part.</long-description>
          <tag name="param" line="157" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="157" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="157" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="176" package="MailMimeParser">
        <name>getAllParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllParts()</full_name>
        <docblock line="176">
          <description>Returns the current part, all child parts, and child parts of all
children optionally filtering them with the provided PartFilter.</description>
          <long-description>The first part returned is always the current MimePart.  This is often
desirable as it may be a valid MimePart for the provided PartFilter.</long-description>
          <tag name="param" line="176" description="&lt;p&gt;an optional filter&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="176" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="200" package="MailMimeParser">
        <name>getPartCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartCount()</full_name>
        <docblock line="200">
          <description>Returns the total number of parts in this and all children.</description>
          <long-description>Note that the current part is considered, so the minimum getPartCount is
1 without a filter.</long-description>
          <tag name="param" line="200" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="200" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="213" package="MailMimeParser">
        <name>getChild</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChild()</full_name>
        <docblock line="213">
          <description>Returns the direct child at the given 0-based index, or null if none is
set.</description>
          <long-description></long-description>
          <tag name="param" line="213" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="param" line="213" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="213" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="230" package="MailMimeParser">
        <name>getChildParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildParts()</full_name>
        <docblock line="230">
          <description>Returns all direct child parts.</description>
          <long-description>If a PartFilter is provided, the PartFilter is applied before returning.</long-description>
          <tag name="param" line="230" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="230" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="244" package="MailMimeParser">
        <name>getChildCount</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getChildCount()</full_name>
        <docblock line="244">
          <description>Returns the number of direct children under this part.</description>
          <long-description></long-description>
          <tag name="param" line="244" description="" type="\ZBateson\MailMimeParser\Message\PartFilter" variable="$filter">
            <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
          </tag>
          <tag name="return" line="244" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filter</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\PartFilter</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="255" package="MailMimeParser">
        <name>getPartByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getPartByMimeType()</full_name>
        <docblock line="255">
          <description>Returns the part associated with the passed mime type if it exists.</description>
          <long-description></long-description>
          <tag name="param" line="255" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="255" description="or null" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="267" package="MailMimeParser">
        <name>getAllPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getAllPartsByMimeType()</full_name>
        <docblock line="267">
          <description>Returns an array of all parts associated with the passed mime type if any
exist or null otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="267" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="or null" type="array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Message\MimePart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="278" package="MailMimeParser">
        <name>getCountOfPartsByMimeType</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getCountOfPartsByMimeType()</full_name>
        <docblock line="278">
          <description>Returns the number of parts matching the passed $mimeType</description>
          <long-description></long-description>
          <tag name="param" line="278" description="" type="string" variable="$mimeType">
            <type>string</type>
          </tag>
          <tag name="return" line="278" description="" type="integer">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimeType</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="288" package="MailMimeParser">
        <name>hasContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::hasContent()</full_name>
        <docblock line="288">
          <description>Returns true if there's a content stream associated with the part.</description>
          <long-description></long-description>
          <tag name="return" line="288" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="301" package="MailMimeParser">
        <name>isMultiPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isMultiPart()</full_name>
        <docblock line="301">
          <description>Returns true if this part's mime type is multipart/*</description>
          <long-description></long-description>
          <tag name="return" line="301" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="316" package="MailMimeParser">
        <name>isTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::isTextPart()</full_name>
        <docblock line="316">
          <description>Returns true if this part's mime type is text/plain, text/html or has a
text/* and has a defined 'charset' attribute.</description>
          <long-description></long-description>
          <tag name="return" line="316" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="335" package="MailMimeParser">
        <name>attachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachContentResourceHandle()</full_name>
        <docblock line="335">
          <description>Attaches the resource handle for the part's content.  The attached handle
is closed when the MimePart object is destroyed.</description>
          <long-description></long-description>
          <tag name="param" line="335" description="" type="resource" variable="$contentHandle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$contentHandle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="353" package="MailMimeParser">
        <name>attachOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::attachOriginalStreamHandle()</full_name>
        <docblock line="353">
          <description>Attaches the resource handle representing the original stream that
created this part (including any sub-parts).  The attached handle is
closed when the MimePart object is destroyed.</description>
          <long-description>This stream is not modified or changed as the part is changed and is only
set during parsing in MessageParser.</long-description>
          <tag name="param" line="353" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="374" package="MailMimeParser">
        <name>getOriginalStreamHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getOriginalStreamHandle()</full_name>
        <docblock line="374">
          <description>Returns a resource stream handle allowing a user to read the original
stream (including headers and child parts) that was used to create the
current part.</description>
          <long-description>The part contains an original stream handle only if it was explicitly set
by a call to MimePart::attachOriginalStreamHandle.  MailMimeParser only
sets this during the parsing phase in MessageParser, and is not otherwise
changed or updated.  New parts added below this part, changed headers,
etc... would not be reflected in the returned stream handle.</long-description>
          <tag name="return" line="374" description="the resource handle or null if not set" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="386" package="MailMimeParser">
        <name>detachContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::detachContentResourceHandle()</full_name>
        <docblock line="386">
          <description>Detaches the content resource handle from this part but does not close
it.</description>
          <long-description></long-description>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="398" package="MailMimeParser">
        <name>setContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setContent()</full_name>
        <docblock line="398">
          <description>Sets the content of the part to the passed string (effectively creates
a php://temp stream with the passed content and calls
attachContentResourceHandle with the opened stream).</description>
          <long-description></long-description>
          <tag name="param" line="398" description="" type="string" variable="$string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="432" package="MailMimeParser">
        <name>getContentResourceHandle</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContentResourceHandle()</full_name>
        <docblock line="432">
          <description>Returns the resource stream handle for the part's content or null if not
set.  rewind() is called on the stream before returning it.</description>
          <long-description>The resource is automatically closed by MimePart's destructor and should
not be closed otherwise.

The returned resource handle is a stream with decoding filters appended
to it.  The attached filters are determined by looking at the part's
Content-Encoding header.  The following encodings are currently
supported:

- Quoted-Printable
- Base64
- X-UUEncode

UUEncode may be automatically attached for a message without a defined
Content-Encoding and Content-Type if it has a UUEncoded part to support
older non-mime message attachments.

In addition, character encoding for text streams is converted to UTF-8
if \ZBateson\MailMimeParser\Message\MimePart::isTextPart returns true.</long-description>
          <tag name="return" line="432" description="" type="resource">
            <type>resource</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="446" package="MailMimeParser">
        <name>getContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getContent()</full_name>
        <docblock line="446">
          <description>Shortcut to reading stream content and assigning it to a string.  Returns
null if the part doesn't have a content stream.</description>
          <long-description></long-description>
          <tag name="return" line="446" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="465" package="MailMimeParser">
        <name>setRawHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setRawHeader()</full_name>
        <docblock line="465">
          <description>Adds a header with the given $name and $value.</description>
          <long-description>Creates a new \ZBateson\MailMimeParser\Header\AbstractHeader object and
registers it as a header.</long-description>
          <tag name="param" line="465" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="465" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="475" package="MailMimeParser">
        <name>removeHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::removeHeader()</full_name>
        <docblock line="475">
          <description>Removes the header with the given name</description>
          <long-description></long-description>
          <tag name="param" line="475" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="488" package="MailMimeParser">
        <name>getHeader</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeader()</full_name>
        <docblock line="488">
          <description>Returns the AbstractHeader object for the header with the given $name</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="488" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="488" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="505" package="MailMimeParser">
        <name>getHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderValue()</full_name>
        <docblock line="505">
          <description>Returns the string value for the header with the given $name.</description>
          <long-description>Note that mime headers aren't case sensitive.</long-description>
          <tag name="param" line="505" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="505" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="505" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="519" package="MailMimeParser">
        <name>getHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaders()</full_name>
        <docblock line="519">
          <description>Returns the full array of headers for this part.</description>
          <long-description></long-description>
          <tag name="return" line="519" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractHeader&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="538" package="MailMimeParser">
        <name>getHeaderParameter</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getHeaderParameter()</full_name>
        <docblock line="538">
          <description>Returns a parameter of the header $header, given the parameter named
$param.</description>
          <long-description>Only headers of type
\ZBateson\MailMimeParser\Header\ParameterHeader have parameters.
Content-Type and Content-Disposition are examples of headers with
parameters. "Charset" is a common parameter of Content-Type.</long-description>
          <tag name="param" line="538" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$param">
            <type>string</type>
          </tag>
          <tag name="param" line="538" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="538" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$param</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="552" package="MailMimeParser">
        <name>setParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::setParent()</full_name>
        <docblock line="552">
          <description>Sets the parent part.</description>
          <long-description></long-description>
          <tag name="param" line="552" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="562" package="MailMimeParser">
        <name>getParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MimePart::getParent()</full_name>
        <docblock line="562">
          <description>Returns this part's parent.</description>
          <long-description></long-description>
          <tag name="return" line="562" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Message\MimePart</inherited_from>
      </method>
    </class>
    <source>eJx9UsFu2zAMvfsreAiQLmjiezKsQTcMu2QY2gIDigAFI9ORBlsSJGpdMPTfR8tO6hRrfJEp8b1HPvLjjde+KGezAmbwoE2E2jQEcnoMDK4G1gSPt8gUnd1u0DQb09IPDJEC+OB+keKFgDv8ujGKbCTQzH5Zls5L5FJQtHBhXw6vsdzFaj4EC5GH2/svAi8Liy1Fj+pdwe2GYsQ9rYoixfezvhFWp+MrKnbhsLqIGHi3P4PhLuxfuA9FbTDojnygSJZf7UGwzs5bAUDbkyxAjKQ+QbnUVEBGTAywI8n2DRoLTH+4I+xZgtynRFa5iipAZlS6FRVAWw0UghUI2S6hFoDLjFJNlu6oBnXINMbugQ+eYjcaOM0Wm8Y9R1CNyT2wAy0SMm95OBJIVoRxPxF2h27Sv02mxY7ts7NSDM8fRAN09lna/u7s0TkIxCnYmDstc9OnUtaYWEsPj4jaVDCMJG+AajDGM56+6wjHi+JvAfLlgXTfDO5JWklePKyoxtTw/6rLmzwupccez7UMAls42xiY6HH4JvV8RWDiT/9DYplPn3ay6VAnq9g4C09PytnIISm+uqR2fUHgQ2bufcgaGKTb5XLM/ZZtDF+dkBOWrZh/isR3+NyXczUduze9humrbdMB+lK8FP8AsLpq9w==</source>
  </file>
  <file path="Message/MessageParser.php" generated-path="Message.MessageParser.html" hash="f67265e3d689544ef9125b33f3f6f031" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Message">\ZBateson\MailMimeParser\Message</namespace-alias>
    <namespace-alias name="PartStreamRegistry">\ZBateson\MailMimeParser\Stream\PartStreamRegistry</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Message" line="18" package="MailMimeParser">
      <extends/>
      <name>MessageParser</name>
      <full_name>\ZBateson\MailMimeParser\Message\MessageParser</full_name>
      <docblock line="18">
        <description>Parses a mail mime message into its component parts.  To invoke, call
MailMimeParser::parse.</description>
        <long-description></long-description>
        <tag name="author" line="18" description="Zaahid Bateson"/>
        <tag name="package" line="18" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="24" package="MailMimeParser">
        <name>$message</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::message</full_name>
        <default></default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;the Message object that the read&#10;mail mime message will be parsed into&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message" variable="">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="30" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::partFactory</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the MimePartFactory object&#10;used to create parts.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="37" package="MailMimeParser">
        <name>$partStreamRegistry</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::partStreamRegistry</full_name>
        <default></default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="37" description="&lt;p&gt;the&#10;     PartStreamRegistry &#10;object used to register stream parts.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Stream\PartStreamRegistry" variable="">
            <type>\ZBateson\MailMimeParser\Stream\PartStreamRegistry</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="46" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::__construct()</full_name>
        <docblock line="46">
          <description>Sets up the parser with its dependencies.</description>
          <long-description></long-description>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message" variable="$m">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Message\MimePartFactory" variable="$pf">
            <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
          </tag>
          <tag name="param" line="46" description="" type="\ZBateson\MailMimeParser\Stream\PartStreamRegistry" variable="$psr">
            <type>\ZBateson\MailMimeParser\Stream\PartStreamRegistry</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$m</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pf</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$psr</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Stream\PartStreamRegistry</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Message" line="61" package="MailMimeParser">
        <name>parse</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::parse()</full_name>
        <docblock line="61">
          <description>Parses the passed stream handle into the ZBateson\MailMimeParser\Message
object and returns it.</description>
          <long-description></long-description>
          <tag name="param" line="61" description="&lt;p&gt;the resource handle to the input stream of the&#10;       mime message&lt;/p&gt;" type="resource" variable="$fhandle">
            <type>resource</type>
          </tag>
          <tag name="return" line="61" description="" type="\ZBateson\MailMimeParser\Message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fhandle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="75" package="MailMimeParser">
        <name>addRawHeaderToPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::addRawHeaderToPart()</full_name>
        <docblock line="75">
          <description>Ensures the header isn't empty, and contains a colon character, then
splits it and assigns it to $part</description>
          <long-description></long-description>
          <tag name="param" line="75" description="" type="string" variable="$header">
            <type>string</type>
          </tag>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$header</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="93" package="MailMimeParser">
        <name>readHeaders</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readHeaders()</full_name>
        <docblock line="93">
          <description>Reads header lines up to an empty line, adding them to the passed $part.</description>
          <long-description></long-description>
          <tag name="param" line="93" description="&lt;p&gt;the resource handle to read from&lt;/p&gt;" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="93" description="&lt;p&gt;the current part to add&#10;       headers to&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="119" package="MailMimeParser">
        <name>findPartBoundaries</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::findPartBoundaries()</full_name>
        <docblock line="119">
          <description>Finds the end of the Mime part at the current read position in $handle
and sets $boundaryLength to the number of bytes in the part, and
$endBoundaryFound to true if it's an 'end' boundary, meaning there are no
further parts for the current mime part (ends with --).</description>
          <long-description></long-description>
          <tag name="param" line="119" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="119" description="" type="string" variable="$boundary">
            <type>string</type>
          </tag>
          <tag name="param" line="119" description="" type="integer" variable="$boundaryLength">
            <type>integer</type>
          </tag>
          <tag name="param" line="119" description="" type="boolean" variable="$endBoundaryFound">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$boundary</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$boundaryLength</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$endBoundaryFound</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="139" package="MailMimeParser">
        <name>addToParent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::addToParent()</full_name>
        <docblock line="139">
          <description>Adds the part to its parent.</description>
          <long-description></long-description>
          <tag name="param" line="139" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="155" package="MailMimeParser">
        <name>attachStreamHandles</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::attachStreamHandles()</full_name>
        <docblock line="155">
          <description></description>
          <long-description></long-description>
          <tag name="param" line="155" description="" type="\ZBateson\MailMimeParser\Message\type" variable="$handle">
            <type>\ZBateson\MailMimeParser\Message\type</type>
          </tag>
          <tag name="param" line="155" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="155" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="155" description="" type="\ZBateson\MailMimeParser\Message\type" variable="$contentStartPos">
            <type>\ZBateson\MailMimeParser\Message\type</type>
          </tag>
          <tag name="param" line="155" description="" type="\ZBateson\MailMimeParser\Message\type" variable="$boundaryLength">
            <type>\ZBateson\MailMimeParser\Message\type</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\type</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contentStartPos</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\type</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$boundaryLength</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="194" package="MailMimeParser">
        <name>readPartContent</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readPartContent()</full_name>
        <docblock line="194">
          <description>Reads the content of a mime part up to a boundary, or the entire message
if no boundary is specified.</description>
          <long-description>readPartContent may be called to skip to the first boundary to read its
headers, in which case $skipPart should be true.

If the end boundary is found, the method returns true.</long-description>
          <tag name="param" line="194" description="&lt;p&gt;the input stream resource&lt;/p&gt;" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="194" description="&lt;p&gt;the current Message&#10;       object&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="194" description="&lt;p&gt;the current MimePart&#10;       object to load the content into.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="194" description="&lt;p&gt;the MIME boundary&lt;/p&gt;" type="string" variable="$boundary">
            <type>string</type>
          </tag>
          <tag name="param" line="194" description="&lt;p&gt;pass true if the intention is to read up to the&#10;beginning MIME boundary's headers&lt;/p&gt;" type="boolean" variable="$skipPart">
            <type>boolean</type>
          </tag>
          <tag name="return" line="194" description="if the end boundary is found" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$boundary</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$skipPart</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="220" package="MailMimeParser">
        <name>getParentBoundary</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::getParentBoundary()</full_name>
        <docblock line="220">
          <description>Returns the boundary from the parent MimePart, or the current boundary if
$parent is null</description>
          <long-description></long-description>
          <tag name="param" line="220" description="" type="string" variable="$curBoundary">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$parent">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="220" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$curBoundary</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parent</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="235" package="MailMimeParser">
        <name>newMimePartForMessage</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::newMimePartForMessage()</full_name>
        <docblock line="235">
          <description>Instantiates and returns a new MimePart setting the part's parent to
either the passed $parent, or $message if $parent is null.</description>
          <long-description></long-description>
          <tag name="param" line="235" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="235" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$parent">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="235" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parent</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="254" package="MailMimeParser">
        <name>readMimeMessageBoundaryParts</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readMimeMessageBoundaryParts()</full_name>
        <docblock line="254">
          <description>Keeps reading if an end boundary is found, to find the parent's boundary
and the part's content.</description>
          <long-description></long-description>
          <tag name="param" line="254" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="254" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="254" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$parent">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="254" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="param" line="254" description="" type="string" variable="$boundary">
            <type>string</type>
          </tag>
          <tag name="param" line="254" description="" type="boolean" variable="$skipFirst">
            <type>boolean</type>
          </tag>
          <tag name="return" line="254" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$parent</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$boundary</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$skipFirst</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="281" package="MailMimeParser">
        <name>readMimeMessagePart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readMimeMessagePart()</full_name>
        <docblock line="281">
          <description>Finds the boundaries for the current MimePart, reads its content and
creates and returns the next part, setting its parent part accordingly.</description>
          <long-description></long-description>
          <tag name="param" line="281" description="&lt;p&gt;The handle to read from&lt;/p&gt;" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="281" description="&lt;p&gt;The current Message&lt;/p&gt;" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="param" line="281" description="" type="\ZBateson\MailMimeParser\Message\MimePart" variable="$part">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
          <tag name="return" line="281" description="" type="\ZBateson\MailMimeParser\Message\MimePart">
            <type>\ZBateson\MailMimeParser\Message\MimePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message\MimePart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Message" line="314" package="MailMimeParser">
        <name>findNextUUEncodedPartPosition</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::findNextUUEncodedPartPosition()</full_name>
        <docblock line="314">
          <description>Extracts the filename and end position of a UUEncoded part.</description>
          <long-description>The filename is set to the passed $nextFilename parameter.  The end
position is returned.</long-description>
          <tag name="param" line="314" description="&lt;p&gt;the current file handle&lt;/p&gt;" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;&amp;$nextMode is assigned the value of the next file mode or null&#10;if not found&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;&amp;$nextFilename is assigned the value of the next filename&#10;or null if not found&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;&amp;$end assigned the offset position within the passed resource&#10;$handle of the end of the uuencoded part&lt;/p&gt;" type="integer" variable="">
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="340" package="MailMimeParser">
        <name>readUUEncodedOrPlainTextPart</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::readUUEncodedOrPlainTextPart()</full_name>
        <docblock line="340">
          <description>Reads one part of a UUEncoded message and adds it to the passed Message
as a MimePart.</description>
          <long-description>The method reads up to the first 'begin' part of the message, or to the
end of the message if no 'begin' exists.</long-description>
          <tag name="param" line="340" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="340" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
          <tag name="return" line="340" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Message" line="365" package="MailMimeParser">
        <name>read</name>
        <full_name>\ZBateson\MailMimeParser\Message\MessageParser::read()</full_name>
        <docblock line="365">
          <description>Reads the message from the input stream $handle into $message.</description>
          <long-description>The method will loop to read headers and find and parse multipart-mime
message parts and uuencoded attachments (as mime-parts), adding them to
the passed Message object.</long-description>
          <tag name="param" line="365" description="" type="resource" variable="$handle">
            <type>resource</type>
          </tag>
          <tag name="param" line="365" description="" type="\ZBateson\MailMimeParser\Message" variable="$message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handle</name>
          <default></default>
          <type>resource</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Message</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="155" code="PPC:ERR-50008">No summary for method attachStreamHandles()</error>
    </parse_markers>
    <source>eJy9Wm1z2zYS/u5fgWQ0kZSTLKf34Wacc9rL1Zlmem48sXsfGucyFAVZvFAkhwDjaNr0t9/u4oUgAFKymytnMlZIYHex++wLFvj7t9WmOlo8fXrEnrLrTSbYOss5g79VUktWrpnccPbLy0RyURY3F0mWX2RbfpnUgtesqsv/8lQew2Sc/12epbwQnG2krE4Xi7KC/5VNnfLjsr5d6K9isRSruf7PMbBnL6++h+mLoyLZclElaS/DmwsuRHLLnx8dNeKAUUODrmTNk+0N/E+qn2/5bSZkvQPiWh80UrCEbWEq28JctlWkWVbIkmVSsLTcVmXBC0kKE8eMXcOH4lP5kc9YmuQ5EuqyPj2t8K/VWtLITVmzX5Jkk62YFpcUkuaJEEwvR00++vWIwUMS4gPzPyU1u9mjCzKj+V0u0WrwKpH0Hla/MtTCpd5lec6WnJHQK1q5HrygvwACCeTg02hrFI/vHyTnjX4lXyWpLOudktt7p+Q3dBuUCqyRwjIk12bok7BqyTxEyl7QoJyGBD2RIea7Vr+Ru6bv4E2Chh+wAB+vsXVccQBnU5H+KuWtd5ncEGZXHBxzxYs045aRle47GA1S7AXUaHvPGYFpR9X6UBL9eh9Vou7qqllCbGHrpkhlVhbsw4e0LGBok8pJK/ssABVIM4tZDRlMibLyPHxGEiLl/IXxkDMg+Nz/6CANB1Tr6AiP2RmxUyO/RO2qY5Iyq0AIadhskmKV68A0ELONNTwwwmQAomzqQgBE+kBRcxXO2Wit2anwod+ad0qArKgaaaRTiaTjIawTZiwnJcVeNA3anAA/MUL2WC9U//yF8cVJ18LzF7dcviFNvV5NpjO7/mlgVIyllvPMQ4ozXC+z+33I8OeFaGpt+Q0wAYfORDGWjG8ruZuRBQHpMskKTFlpmYMi0g3YDQJHPcN5haElqhzjQKbsDjDKbsnuaDqKMD32ByVlxS0bKf4P9f8OCxPgsk8YvK0Fk9XqbXL3A/G5LnHWRHNtPVfR8a2brZkZyh6dnbHxmD15gpJXpWhpjE/HU/q8TnLBp858smUCnsg/V3m54hMYOmN24jeODS07lIMwogSejJJ3J+8V/aLJc598a/8urS9dIRRVwaXVhCIMtqyzLf5+9n7qiPNlAD1vYb4wuMmzgqvkUAIAFIDo5Qz1jhYGsGyNH+swQ+LsDwzDcQG9g63r8sG5Q4lB5NOmrk3dRStZ2SJGP2q54DJ9BYuFG8qlVIwY0b47jDODMURYa4NV6UMJ9QqD1oAOh/azk5OTGJJwNJiYoPP4Rj5G7HZejtk4BicdR4bcRq3ieTg1uhCCEuPgHDFuelGPb+qb4jE7Vi8GwayZHJ+xWqFX4U1RcEHM7ja4A/F8eDoUGl9lxUoFRihrzJ4FraewkXTxQhiEYJCR5bPCYNZQw5AosHoaLcumWCX17l+8uIXSSftD0WyXIBewWe4As0hBF1mSorChMwJhXmoKr/AvEagbjpbO5Fig741h0JgZRjPIhkmhHbDmLIF/hQEvoLXG16pAZGvYMrjL2tr1Tjiqg6q9+Xx6qMv2hHojmvcZygxfP96IZVnmsJhQDcOBfw22RNzqKVChtk4zavX0xGOOb3xGvsce5pueh/ggOEPN5LxQAPYHAx4k60A85uRqFHr4fG7pP4659RLA+jHmlP105vMopRCNZwTGMB7EeIbu+WjNy7XV2aB7/mO1EtZFmN43w29AbR8471kqUKgDcpMDSgObq/WU/jQdDqUAq6KqF0yHcm/PGuWu6nO+6PLtR7uJ8SpnlyxWgiDylYT5l6WIjom6b2+KTKRM0o0qmH8goXtT5SyQcRZINPP5B/mVE0bXkue5xRmb+9MO2FWB1Uj2fyoJ2j2eWsZEyzwoKwgT1vr9rN7U2W1WJPkBvHSVh6zUmEudmgKuD8VxEPd61etHmqivY0miAlw3bk4pFNlUbZ614PyjE8OB74xdnZ//+OHq/DqInw/Va7i+QD+zcIyxwgGz4yaKqrXz8l71OeVzhT2sLxInqetq3SkVdP6HsVkdbKMBIkVpB2M/V1Q8zdYZXwUxFwsiVKj2D7ZNdtjvw+al6lCJj1llqp91VkPSsYRNTQ8h3ZDTVfcMCyMAULoBSlBFjpAKxQixKZt8hSwwAQXivF7bUs6Vf42/aRsLa5Wbsu1XRKkMbUw6nQkz4p47EgueThHmNVf00+1XfoUtj/kU5YM2yUuwiYsmbAsdexL4JZ4qm19fnLOeos+WdNaUuDe0Na1SLbKjwlpYcDQGPZ68S/DugsrdDtex2ai2aUt3S4wA2QBEDtnqOWh3cliQs/ys5tSfVgVB2qIwMRBZw4LyxPkYqdKoQ9EOoeBvV91bu6hIemA1HRTTYS3t7tAiu0Ivyp/oEH/+0/dBAFTiYQVyxvzOyb+TvOGTsbbN/BpGjWdsLPlnuajyJCvc7IKaeNRi8bffwNz89sM2kelmMv592+QyQ/qLm7u//J5hEwe5TntUNVjfhGmbzBwWMdF85lao8cIRH9MR9FU/VFq/NSEQvMFiAvsrpt52o4VNGSaMtL5jG/EjPQe8CWHVE1VN5ABCL+Oh4n7RDTj6rq5YDFf+Nj0bISauRJ7/4qq0r3guaxSvBxmXYt8GuwHEZAvWS1wpx25xAFgbyqbstEvFEXDIsK8LABgEUlRipzmfsILftSsTXErdL6A6YWx2Vm3Ti/GM2gZeLw/GECBsHgN38qz/B86GoluTPwyKgwkM4wY0aE9/ylrPneyJ//34GRUQni5V1A8Pf+YvHHYTNxGYadTjdcIDcbIgbA10auSIHCMYWkOY+pHzSlD+Q8SAubH321NlldSIcaIIAMuvCpJ2AH7WpcYD+01/PqYeVIbtKaEiBZMqFV5h2fx/gjNaFEfqWSa84ETRboxMLrMvAry3XzyV9Xxx3re1hFMIdZY97dRIJmefOcNaUJsOcHuiFi3YvE10T31GHXQvtMc6Pcq/3Shvtn7dnL5YOBUzneEvdwzdjzZMpuZ1BO5yslNtrIhkMWcdgcf7Cuw28cJyQjGJh7yuBls++9rsS1tOBm3ottioaUur7sioTYjTHFeXNbqpjZrrqEhlTZPa2m6hbuenaVljCMt3B+/6rjdf4xSqDcXX/Xu+B27v/NjQ4/rR7Yzj/JfqyOfALU2QyVx0eqX5QdXO84j7Bxjtehv4fc/exuZAqOwfaXEycYFlvcqlvhuDa7a1Tk232NwmyKQqhciW+Q7fahnsRzVxSoC0FZFwrka1PCReiNL7Tyqh7vgYuRVOe4YlOU7d2WN5ZNY2PgiBlo6bmFo2blqG8emGdyW5ZxcwovmBKBdDwwOq38EjQRch3ia3L4wNprqexECFbk+GIPaDQe/8s8QbFEI3v3KOlxTJqlg62WNE6tb9/PN5kZYrcM8qdlZ+7VLAjhyX/hk7hr9XZkhlNIyXChXcDKn2+FJoDUX6ekMtMBO86LZntCDDE74nJNAFLAkZqXsiXBV9n3Cnbs5aKWoTqS2OBZdwN48tXotSdpo0Xhn1pLv+w1jiUL8PpvgPcVSr4/b2i2ZRrtdoFatePES157tkIr9daMCsdVu2nSn9s2m4A4rhSg5r7p9gYRZIl+oAgoSxvSQ/aA938ntPPWMtfK/MoFYKZGkVUcKTTLffsvgPtfPYu5P5397/+tcv7PjpaIFNF3XQb2gFQRufyBlBJB4NHkweoInhs0t8nBbMcNcFK5uy4PaStOv7JnvQ1arVytyrcjDkVQwJ7upNYo5GDdvwRr6N14sfk97HnQvbNgBiddZpvTrIdDb+kBANGf45E7L3WuhX38UNtXuixY5V9Jv6EjuC13rn21/13L9Fe5CHaLQ5ndb9rtstgigRd67+4dPnWBPjWVM2OX46Pci5RhSPz+yAd8/eey5uE5Iz6Bt/kJE13tzoLHlCLGct4SCmmCuVw0fpNPbrneiadm0bWfadwxnvsN3UzqmRifd03dbwGfJdukWfl2VlNyDmdhrGCWq24I8K3YXZ1vUcDwANNSNRRfd/cHSbW5Q+tqAMwSYQUHDenAZO/Ut9hlwYkPQB0p/k+4Nefg9v7nWk/qN179ClrS2DO4CW60BCVecQFtewRYG1h7sTj9X+OBbhTcDtvZXXddPBnaHXO4lV/0PaG7o2sFelEYaHXzD6cvQ/n9bIZQ==</source>
  </file>
  <file path="Header/SubjectHeader.php" generated-path="Header.SubjectHeader.html" hash="be12ebb6e134ac475885e5f74d4d33a0" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="16" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>SubjectHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\SubjectHeader</full_name>
      <docblock line="16">
        <description>Reads the header using a SubjectConsumer.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="24" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\SubjectHeader::getConsumer()</full_name>
        <docblock line="24">
          <description>Returns a SubjectConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="24" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyNUcFOAjEQvfcr5uABSKB3MYrowQuJEU9kL6U70Jrdtum0xsTw786WXaJEg3OZ7ex7895rb+6CCUJOJgIm8Goswc42CNyDign8DpJB2CxVQvKuWinbrGyLzyoSRgjRv6FOMyZ3/EVjNTpCMCmFayl94JPPUePMx73s/5LcUj3tDzOWh+X6kelSONUiBaX/FKyeUNUY50JkugSqHryj3H77WGN8Z1Vm93lfGEgloCkUyGTdHhSs87bLNRBP+VROxkfYKGVsDb18sa4bRTTwjgYAPxI6FrjfUopqGItPAVzFQledjZSjo191j4ihL/hRVAtngeBK/xyc4LFshuq/NzU4HQb9Ilk6P3Zic1jDLjudrHewxxN0dMnUuCw5hu+q93YOm97y0rN7GI3nhXYQB/EF84jm3w==</source>
  </file>
  <file path="Header/ParameterHeader.php" generated-path="Header.ParameterHeader.html" hash="32f02c3ca02033f7ff463da2645454bd" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="AbstractConsumer">\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</namespace-alias>
    <namespace-alias name="ParameterPart">\ZBateson\MailMimeParser\Header\Part\ParameterPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>ParameterHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader</full_name>
      <docblock line="19">
        <description>Represents a header containing a primary value part and subsequent name/value
parts using a ParameterConsumer.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="25" package="MailMimeParser">
        <name>$parameters</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::parameters</full_name>
        <default>array()</default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="25" description="&lt;p&gt;key map of&#10;lower-case parameter names and associated ParameterParts.&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\ParameterPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\ParameterPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="33" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::getConsumer()</full_name>
        <docblock line="33">
          <description>Returns a ParameterConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="33" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="33" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="44" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::setParseHeaderValue()</full_name>
        <docblock line="44">
          <description>Overridden to assign ParameterParts to a map of lower-case parameter
names to ParameterParts.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_setParseHeaderValue"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="60" package="MailMimeParser">
        <name>hasParameter</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::hasParameter()</full_name>
        <docblock line="60">
          <description>Returns true if a parameter exists with the passed name.</description>
          <long-description></long-description>
          <tag name="param" line="60" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="73" package="MailMimeParser">
        <name>getValueFor</name>
        <full_name>\ZBateson\MailMimeParser\Header\ParameterHeader::getValueFor()</full_name>
        <docblock line="73">
          <description>Returns the value of the parameter with the given name, or $defaultValue
if not set.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="73" description="" type="string" variable="$defaultValue">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaultValue</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyVVcFy0zAQvfsrlpkcnE4T3xsoUBiGS4FpmR7a5KDYm1jgSEYrp+0w/XdWku3ExmlaHRJb2n3SvvdWfvu+zMsoOTmJ4AR+5pJgJQsE/i+FsaBXYHOE2wthkbSaXwpZXMoN/hCG0EBp9C9M7ZSTXf6HQqaoCCG3tjxLEl3ym65MilNt1km9SsmSskn9MuXt4eL6M6cnkRIbpFKkBzecf0WRoZlFUUXHguaftKJqs/dwjWbLu85elfxxSdaI1DYTL8rmN+t+uB6Lxr3xkWuSr7A0SKgsgYDcx0OqlRVSSbXmudLIjTCPsBVFhUEGoTKgakn4p+JEcDwlftkBugiCikJ2u2tzYCcOeHVEZXNt4FaIXGZQV+CJTwtBtEsNVQA+WFQZQUNBmI7+RsDDV+MGA2+FgfmrKblbwG98hI0o2WYNVqHv0UxSQb7yEOzrJU8CH1OnkjfKoINF0xog8f/sS8u+5KhRi0LwDu4WM7/er+AKbWUUHaAvxLTVekTomQpGaXeiDTce+yg/Bw13oLBVpVIrtYI1tqHxsUONPUgQ0I36bP2wyTmD/sdEPA7kPQ1S+H2LxsgsQwVWO53kWvU08gu13oNCN1hBb44e1rgvRZ+xXT3HuCNfJmHQ4MZ1VHwYrc8e787deHY2hLJLmrXxK21QpDnEI8sX7eQ8NK4gb1I73kN2Q6440He/VGSFSpFZ6xDSz3BjB127/o6rsdqzHeC8uN94NR6PF9wTfnLWAXqKuk/DijdNYw1fU3xasdex+CCJa7uXNvcfkJINwcQ7YQ+pyOd0N9jIxfSbZ6l1gUJ15ayW/A3ZaZkLatmJPcoBt0s+io2fJ8qnL541fFs+lxeu6vpjuWOhLX8tt9wXDvQU+AYeZbgSVWFvwhUe8JhBpa2z5KsY6i4NATckhphnOWRn+NQvuubgtAvJdlFVUfSJdVZ9UxM6IEPfp82ts48861luP+4FSnlTh85rRXuK/gHkItFD</source>
  </file>
  <file path="Header/AbstractHeader.php" generated-path="Header.AbstractHeader.html" hash="3b927c39b384147c2bd3aac7b57864ed" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="AbstractConsumer">\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</namespace-alias>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Header" line="25" package="MailMimeParser">
      <extends/>
      <name>AbstractHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader</full_name>
      <docblock line="25">
        <description>Abstract base class representing a mime email's header.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="25" description="Zaahid Bateson"/>
        <tag name="package" line="25" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <source>eJylV01v00AQvedXDKgSSdU2nENbKHDgAkK04gCtqom9iRfZu9buOqWq8t+Z/fJnXRfwxXZ29s3MmzezzunbMitny8PDGRzCVcY1bHjOgO4lKgNyAyZj8OM9GqaluP6MPP/MC/YVlWYKSiV/scSc0Ga7/13OEyY0g8yYcrVcypLeZKUSdiLVdhlW9XKt0+PwckLu4f3lR9q+nAksmC4xGXV4/YlhytSb2azSU0bXH6TQVUEPF2ttFCYm/vDmr3bHh0umdhQz+Q5sRVhYI8ElOWoNipWKaSYMF1tAKAgWWEEOXmnIHHDk6opobW3UzGioSse2N6QdSXB95JftmqUoVsXbAYrUAiaY594mbgMjbRXJRwd1h3nFYhgxCZ/1arVlNU1WBCgAY5oFM5lMCQvpudKUN0WyY0rxNGWCnFk8xUylhNtXkjpKxYllGC0FmPtyNBYXu3/5bmMGnckqSg0rikbBD8SMpxBq6VRUB+yZ7aLOHmZAlyuhvQhphwrIxFbscYaD5dLdKSlDkmcpHFhLksNjeNcT6qI3E57t488b6y4i1JWyLahhjjrQSk43ShadIi/GonObR8JrpavwzitiDIcMHPtDqAut+VborrocfSTJBvjIGoigz7a+nHA91KDUJF3225cR/WpaC9dtqfOhRSyg16VwkHR/6JkHAlwJR5YeIaVa09SCTSUSw6WA21vrxKgqMfMp/0fe11HA9VXzWrTXgaHRe3zuyDuLyuotxkJYg12rIs6k7vmzaN5iet6PZjEApwHztVeDZlcw3w8U8M3JsqeA6PU/CxUmyVQnjY6WTunqmdAIuy5jm6ip6BbDLvgwnLtW/thqjqBf386k7IIVazKjTuS4zpnua9qeDSnbYJUb4EWZs4JOFHTBtmHrobCLLROKaR2N9MlgANcZjvR/TdNjChlHGxG4p+CssZv3xD0pNXuyKIX3dkQ3AxTk2n6IaMuPTOyZk8IdNxlY9Obk7TLyTIUNZvWTQ2HraDJ63mcgeGsT8Zy2as++3sF/fNwMVT8ZZAd/JF8/4KaS8AXuJ8E3MH/BitLcz9uJLBYtm5Fkf76+cUMpADcTaN+nSFR5/hxq6hOmxwt9dEj38YPi3io5YdQ0YjtW/+fx8S0IdKKuzWk5Hf/wS+P/QvxCeBPhNQfL06GFQ7D+nPXDpxsrwIVx74W088m3GtcR7pf9ROTCWWykKmj3qpfeqe8qG/f5Ck4jxec9sy9UyTTlNgTMWwV1/1KYsuDUIXO6kz9tUCRuGN4pLCGXZJdzQUN28e/k3t4aeenMxvh9+dBieL+Ch54e9i8j7fvZH3P/M2s=</source>
  </file>
  <file path="Header/Part/ParameterPart.php" generated-path="Header.Part.ParameterPart.html" hash="82c1c5509efa243b0d87ae38b0c2c480" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="14" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</extends>
      <name>ParameterPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart</full_name>
      <docblock line="14">
        <description>Represents a name/value pair part of a header.</description>
        <long-description>MimeLiteralPart automatically decodes the value if it's encoded.</long-description>
        <tag name="author" line="14" description="Zaahid Bateson"/>
        <tag name="package" line="14" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::name</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the name of the parameter&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="28" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::__construct()</full_name>
        <docblock line="28">
          <description>Constructs a ParameterPart out of a name/value pair.  The name and
value are both mime-decoded if necessary.</description>
          <long-description></long-description>
          <tag name="param" line="28" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="28" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="39" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::getName()</full_name>
        <docblock line="39">
          <description>Returns the name of the parameter.</description>
          <long-description></long-description>
          <tag name="return" line="39" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="24">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\LiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="62" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="62">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="87" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="87">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="87" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJx9kk9PwzAMxe/9FD5wGBNr7xv/BBw4AELACSEhL/XWoC6JEheBEN8dJ0smGIxeoiR+z+/n9PDEda5qxuMKxvDQ6QAL3RPI6tAz2AVwR/B4hkzBmqdr1P21XtEt+kAenLcvpLgWcdSf9lqRCQQds5s2jXWys4NXVFu/bPJtaOahneRNLe3h7P5C5E1lcEXBodrZ8OmSsJVFdjyrSuw7cp4CGQ6AED2aV+wHEgLtNxgIXdLGrJDC4sCd9fCI2OkWcsOUQ/UYAkgT8WLysRvQG5NpA8QwV1pOsY/n1UcF8qUk8RPfV/QQ2GuzTLOLgcocXbHMxU1aZYosU6QW9mLxLB1u255bI6aDSpA/o9khE26x1yAvmgOgaYvTugA9wdxyBysBmrSkbCsB9AIMKQoB/XtdBBuyFL+wpaw7rlKLn4zDXF4cFoNRrK2B52dVgEbJ6SCr9lP5eqpJKEENT6ffBdJlNcrl+7NN6R7L/zs5TrxHZbcmi6+WZfG6qD7/HPUd8eBN2P16vyfjkyTz/wu+JL4Rl9E2Z3b4xlAiflZfCZIbVw==</source>
  </file>
  <file path="Header/Part/AddressPart.php" generated-path="Header.Part.AddressPart.html" hash="c66ef50a339c409ea6dfc86167623326" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\ParameterPart</extends>
      <name>AddressPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\AddressPart</full_name>
      <docblock line="21">
        <description>Holds a single address or name/address pair.</description>
        <long-description>The name part of the address may be mime-encoded, but the email address part
can't be mime-encoded.  Any whitespace in the email address part is stripped
out.

A convenience method, getEmail, is provided for clarity -- but getValue
returns the email address as well.</long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\ParameterPart" refers="\ZBateson\MailMimeParser\Header\Part\ParameterPart" link="/classes/ZBateson.MailMimeParser.Header.Part.ParameterPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::name</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the name of the parameter&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="32" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressPart::__construct()</full_name>
        <docblock line="32">
          <description>Performs mime-decoding and initializes the address' name and email.</description>
          <long-description>The passed $name may be mime-encoded.  $email is stripped of any
whitespace.</long-description>
          <tag name="param" line="32" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="32" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\ParameterPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\ParameterPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.ParameterPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="47" package="MailMimeParser">
        <name>getEmail</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressPart::getEmail()</full_name>
        <docblock line="47">
          <description>Returns the email address.</description>
          <long-description></long-description>
          <tag name="return" line="47" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="24">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\LiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="39" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\ParameterPart::getName()</full_name>
        <docblock line="39">
          <description>Returns the name of the parameter.</description>
          <long-description></long-description>
          <tag name="return" line="39" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\ParameterPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="62" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="62">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="87" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="87">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="87" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJx9U01v2zAMvftX8FDAaZZE93QfSbECvRQotmGHIkCgWEyswZYEiU6XDf3vo+SPpmkyH6LQIh8f36M/fnGly8R4nMEYfpQ6wFZXCHw66QnsFqhEeLqVhMGa1YPU1YOu8VH6gB6ct7+woBkXx/pFpQs0AaEkcnMhrOPINr7AmfU70d0GsQlq2gUzbg+3379yuciMrDE4WVxsuLpHqfjgiG6ynva9rVQACUGbHXOXSnkMAayHCCj62EntI1NoR8V0+2bMPrOWB9gg1Nx3iqawCtUENg2lJKyZEryCeop4hTQ5nRbNAJbmAM+lpm4ubS5gRMUDee0cqohnm0HVJRTW7NFoRmV8pNIynR3SXUSZJK+83WtuCFseuqik13SA6TRx5sSfsmowQnmkxptwhoMM8IxVNeizkA338fAkZakVdHYklxifC5ZtYXQC8DehYQs4YEkJfXyb/c2An+RRfMbwiJ751aHVSCFrxI6BNIp10aRlpf9gOHYibz2KGYnurIfqz2ijYzo8+lVKPWMdu3DVDnukcbRcmkOP82rRuxYLF6dKhUw2dblwlZp0dyKdrtnwnsO2MQVpa2C9Zis5vSlolJAmXdV1Sm8VS4XSo6H5/LhguIxPW/3mVZ4P4fXN8FeI87s5JFwRf/XTz/u4I/CpD9PKebozrUkj53G39ugqlmiUi1X4IPIJtxwG6Fq+pN9T579d2rv3arcr2mn6XzH7L2B0Kl4HcTxYT+4l+wcRDoL1</source>
  </file>
  <file path="Header/Part/MimeLiteralPartFactory.php" generated-path="Header.Part.MimeLiteralPartFactory.html" hash="180e28cb206817b61132aa09e5d86a95" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="15" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</extends>
      <name>MimeLiteralPartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</full_name>
      <docblock line="15">
        <description>Extends HeaderPartFactory to instantiate MimeLiteralParts for its newInstance
function.</description>
        <long-description></long-description>
        <tag name="author" line="15" description="Zaahid Bateson"/>
        <tag name="package" line="15" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPartFactory.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="23" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory::newInstance()</full_name>
        <docblock line="23">
          <description>Creates and returns a MimeLiteralPart.</description>
          <long-description>The default implementation returns a new Token.</long-description>
          <tag name="param" line="23" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="23" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPartFactory.html#method_newInstance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="25" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()</full_name>
        <docblock line="25">
          <description>Creates and returns a default HeaderPart for this factory, allowing
subclass factories for specialized HeaderParts.</description>
          <long-description>The default implementation returns a new Token.</long-description>
          <tag name="param" line="25" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="25" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>newToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newToken()</full_name>
        <docblock line="36">
          <description>Initializes and returns a new Token.</description>
          <long-description></long-description>
          <tag name="param" line="36" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="36" description="" type="\ZBateson\MailMimeParser\Header\Part\Token">
            <type>\ZBateson\MailMimeParser\Header\Part\Token</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="47" package="MailMimeParser">
        <name>newLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newLiteralPart()</full_name>
        <docblock line="47">
          <description>Initializes and returns a new LiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="47" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="47" description="" type="\ZBateson\MailMimeParser\Header\Part\LiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\LiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="58" package="MailMimeParser">
        <name>newMimeLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newMimeLiteralPart()</full_name>
        <docblock line="58">
          <description>Initializes and returns a new MimeLiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="58" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="69" package="MailMimeParser">
        <name>newCommentPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newCommentPart()</full_name>
        <docblock line="69">
          <description>Initializes and returns a new CommentPart.</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="69" description="" type="\ZBateson\MailMimeParser\Header\Part\CommentPart">
            <type>\ZBateson\MailMimeParser\Header\Part\CommentPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="81" package="MailMimeParser">
        <name>newAddressPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressPart()</full_name>
        <docblock line="81">
          <description>Initializes and returns a new AddressPart.</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="81" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="return" line="81" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="93" package="MailMimeParser">
        <name>newAddressGroupPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressGroupPart()</full_name>
        <docblock line="93">
          <description>Initializes and returns a new AddressGroupPart</description>
          <long-description></long-description>
          <tag name="param" line="93" description="" type="array" variable="$addresses">
            <type>array</type>
          </tag>
          <tag name="param" line="93" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressGroupPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$addresses</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="104" package="MailMimeParser">
        <name>newDatePart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newDatePart()</full_name>
        <docblock line="104">
          <description>Initializes and returns a new DatePart</description>
          <long-description></long-description>
          <tag name="param" line="104" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="104" description="" type="\ZBateson\MailMimeParser\Header\Part\DatePart">
            <type>\ZBateson\MailMimeParser\Header\Part\DatePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="116" package="MailMimeParser">
        <name>newParameterPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newParameterPart()</full_name>
        <docblock line="116">
          <description>Initializes and returns a new ParameterPart.</description>
          <long-description></long-description>
          <tag name="param" line="116" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="116" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="116" description="" type="\ZBateson\MailMimeParser\Header\Part\ParameterPart">
            <type>\ZBateson\MailMimeParser\Header\Part\ParameterPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</inherited_from>
      </method>
    </class>
    <source>eJx1UstqAzEMvPsrdOihXcj63pQ2pA9aaKDQnkIuilfJumxsY2v7oOTfK+8jhEB0kcWMRiPbN3ehDkoXhYICPmqbYGMbAskBI4PfANcEyzkyJe9WC7TNwu7oDWOiCCH6TzJcSnPunzXWkEsENXO41toHqXwbDZU+bvWAJr1O1WQoShkP8/cHadfK4Y5SQHN24OqZsJIkFU/VaPvxh8lVCXowY09o2MdfYA/WJUbHVvQgC71apohNZsmuPoKV7Oj7peMZyoKb1hm23h32wpZroS4Ra1vB4K2zbBpM6VR4HE/njKk/BRKd/xwF3EfKqoCugkjcRifnU91yZI95Jo+EO0gcrdvCxRc2LR2wXuZo+IDoLod2LU9wWPX4Ci57oauO1zvNMehdsPySya3wT9yNbdOuY6/26h8k5MRv</source>
  </file>
  <file path="Header/Part/LiteralPart.php" generated-path="Header.Part.LiteralPart.html" hash="21e148ff6d226525d3935245f9a0ab8b" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="17" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\HeaderPart</extends>
      <name>LiteralPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart</full_name>
      <docblock line="17">
        <description>A literal header string part.  The value of the part is stripped of CR and LF
characters, but otherwise not transformed or changed in any way.</description>
        <long-description></long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="24">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJyNUk1PGzEQvftXzAEpEEF8L5TyrR5AQm1PKFI08U6yho1tjcd8qPDfO97sAj1UqqXV2Ov3nuc9++hbapOx06mBKfxqfYaV7wi0JmSBuAJpCe7OUCjHML9B3934Dd0iZ2JIHO/JyUzJlX/SeUchE7Qi6Yu1MekqFnY0i7y2w262y9wcDIuZHg9nPy+Ubk3ADeWE7p8Hzr8TNlp0JYfGlPxfyGE+kAavp9B5IcYO2n4XsrAP6972DDQKgkfsCo0R9HFoLBWWEjX1//kPwNDA9VUVdC0yOpXM+7AsGp2y+MlriyEKCGPIq8ibyuQKDmud+qAKL/CEL+8ZYpFWEXeIrW9gcNfH4zrMGa63bVc3QM9CocnwYdD8NqCjN1nHFM6ZqgbgX8xY5MNZztrK4F/iA4WRO9YTdY+bEbLzGWP7mspSLxRWJTjxMcBi4WJQeHGyu4Xv9bhtd3XsiD62g+Ntxl/1JdF6wZQ6vf3diZ3z6zzYyT5M9BugqvhILJfBxUbbGHX3DnvNN/Nm/gArKumb</source>
  </file>
  <file path="Header/Part/Token.php" generated-path="Header.Part.Token.html" hash="95a76cfbc5517577f4da5b88081985e8" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="22" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\HeaderPart</extends>
      <name>Token</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\Token</full_name>
      <docblock line="22">
        <description>Holds a string value token that will require additional processing by a
consumer prior to returning to a client.</description>
        <long-description>A Token is meant to hold a value for further processing -- for instance when
consuming an address list header (like From or To) -- before it's known what
type of HeaderPart it is (could be an email address, could be a name, or
could be a group.)</long-description>
        <tag name="author" line="22" description="Zaahid Bateson"/>
        <tag name="package" line="22" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::__construct()</full_name>
        <docblock line="29">
          <description>Initializes a token.</description>
          <long-description></long-description>
          <tag name="param" line="29" description="&lt;p&gt;the token's value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="39" package="MailMimeParser">
        <name>isSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::isSpace()</full_name>
        <docblock line="39">
          <description>Returns true if the value of the token is equal to a single space.</description>
          <long-description></long-description>
          <tag name="return" line="39" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="49" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::ignoreSpacesBefore()</full_name>
        <docblock line="49">
          <description>Returns true if the value is a space.</description>
          <long-description></long-description>
          <tag name="return" line="49" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method_ignoreSpacesBefore"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="59" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\Token::ignoreSpacesAfter()</full_name>
        <docblock line="59">
          <description>Returns true if the value is a space.</description>
          <long-description></long-description>
          <tag name="return" line="59" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()" refers="\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()" link="/classes/ZBateson.MailMimeParser.Header.Part.HeaderPart.html#method_ignoreSpacesAfter"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJzNU0tv1DAQvudXzKHSPtTd3Ckt7QqhcqiE6J6qStUkmd2Ydexgj1kK6n9n7DhdKCriccFS4jiexzfzffPyVd/2RTmfFzCHdas8bJQmkL1Hx2A3wC3BzQqZvDW3V6j0leroHTpPDnpnP1DNS3GO/uda1WQ8QcvcvyhL28vJBlfT0rptmW99WflmkQ9LSQ+r69fiXhYGO/I91s8mvL0kbGSTE58URfC/ZZm/s1Ou9dLqxgOCZ6fMFj6hDgRsd2SkYmTYK63B0cegHAE2jWJlDepYck3eR5/qHjCGqq3xoUvtUNZJEPHj4Ey0kQNCrRWZ1CWIzwWsUx5pckdoOBq1AkcsBxgbibIJTjrvvs+3WKQbZTyjkSbtWzKH/NECTYTqxB608gxtKhymWu0I3jjbgfiv7SyGqkiCCdM88bAzdm8kHnKMx/c9ReYPbROriHZa2yAwK4qJqJOGj+mO4XAFkcZjyTRge/y9dTb0y9moFQzcCpobxFY1kFlMMqg1SgFDj+gzkxGiDliKrwXISjTGNYe3RshBrb5QJDRxuBzvxv1c5IzdyPZRprvNlEsL0p9sXaa9D5WIVIgwdeQe7u5io9mFmqdDgFmyG/DEdcQyQIuzIfhpznKSrh/S+yny90knHiSoMDHM2uCdB49HoYgQRXxJTVELMqJpUH6uc5AeVNbqX1aj/HUMMH1aQ/af/ljL6SlMYDL7u1pUmrN/hLs1otYE2a+Scp9DnoE/1vd/YL7YMLk/hfxQfAPN7Lfe</source>
  </file>
  <file path="Header/Part/HeaderPartFactory.php" generated-path="Header.Part.HeaderPartFactory.html" hash="b7c3d6e259c14801e9b6c0345fe32093" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="14" package="MailMimeParser">
      <extends/>
      <name>HeaderPartFactory</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</full_name>
      <docblock line="14">
        <description>Constructs and returns HeaderPart objects.</description>
        <long-description></long-description>
        <tag name="author" line="14" description="Zaahid Bateson"/>
        <tag name="package" line="14" description="MailMimeParser"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="25" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newInstance()</full_name>
        <docblock line="25">
          <description>Creates and returns a default HeaderPart for this factory, allowing
subclass factories for specialized HeaderParts.</description>
          <long-description>The default implementation returns a new Token.</long-description>
          <tag name="param" line="25" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="25" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>newToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newToken()</full_name>
        <docblock line="36">
          <description>Initializes and returns a new Token.</description>
          <long-description></long-description>
          <tag name="param" line="36" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="36" description="" type="\ZBateson\MailMimeParser\Header\Part\Token">
            <type>\ZBateson\MailMimeParser\Header\Part\Token</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="47" package="MailMimeParser">
        <name>newLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newLiteralPart()</full_name>
        <docblock line="47">
          <description>Initializes and returns a new LiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="47" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="47" description="" type="\ZBateson\MailMimeParser\Header\Part\LiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\LiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="58" package="MailMimeParser">
        <name>newMimeLiteralPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newMimeLiteralPart()</full_name>
        <docblock line="58">
          <description>Initializes and returns a new MimeLiteralPart.</description>
          <long-description></long-description>
          <tag name="param" line="58" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="69" package="MailMimeParser">
        <name>newCommentPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newCommentPart()</full_name>
        <docblock line="69">
          <description>Initializes and returns a new CommentPart.</description>
          <long-description></long-description>
          <tag name="param" line="69" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="69" description="" type="\ZBateson\MailMimeParser\Header\Part\CommentPart">
            <type>\ZBateson\MailMimeParser\Header\Part\CommentPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="81" package="MailMimeParser">
        <name>newAddressPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressPart()</full_name>
        <docblock line="81">
          <description>Initializes and returns a new AddressPart.</description>
          <long-description></long-description>
          <tag name="param" line="81" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="81" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="return" line="81" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="93" package="MailMimeParser">
        <name>newAddressGroupPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newAddressGroupPart()</full_name>
        <docblock line="93">
          <description>Initializes and returns a new AddressGroupPart</description>
          <long-description></long-description>
          <tag name="param" line="93" description="" type="array" variable="$addresses">
            <type>array</type>
          </tag>
          <tag name="param" line="93" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="" type="\ZBateson\MailMimeParser\Header\Part\AddressGroupPart">
            <type>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$addresses</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="104" package="MailMimeParser">
        <name>newDatePart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newDatePart()</full_name>
        <docblock line="104">
          <description>Initializes and returns a new DatePart</description>
          <long-description></long-description>
          <tag name="param" line="104" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="104" description="" type="\ZBateson\MailMimeParser\Header\Part\DatePart">
            <type>\ZBateson\MailMimeParser\Header\Part\DatePart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="116" package="MailMimeParser">
        <name>newParameterPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory::newParameterPart()</full_name>
        <docblock line="116">
          <description>Initializes and returns a new ParameterPart.</description>
          <long-description></long-description>
          <tag name="param" line="116" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="116" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="116" description="" type="\ZBateson\MailMimeParser\Header\Part\ParameterPart">
            <type>\ZBateson\MailMimeParser\Header\Part\ParameterPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>eJy9lstu2zAQRff6ilkYiGs41r7pI02CtgEawEC9CrwZS+OYrUQKJNUgLfLv5UNyacU2DQmpFiYE3pl759B08u5jtamSdDJJYAKLDVOwZgWBWSuUGsQa9Ibg/go1KcGXd8iKO1bSHKUiCZUUPyjTM1Ns6y8LlhFXBButq7dpKirzJmqZ0UzIh7TZVelK5efNy8zYw9X3G1OeJhxLUhVmBw2XXwlzs5g3fZG0sa8FV1rWmVaAPAdJupZcgdfO3RgrG1Ntc2KtN0LCPeKG5dB4uQhZgSos/YyZFvIp+ZOAeZyhfYypJFu244iQ0xrrQofea2OkHVjfagpYFOKR8Ye2lapX3tYrmOlqi1RFGcOC/aY86GeH8GXtujAH1PqysiqoJK5RM8GDYJweYSF+En9RfmkOGkswBE0kGP3Coqbtnm8Q2Dc7qVuremWOEdY1z5ydMbk1R4E8o7Fv9MbpPDz7NP1GFsj5B6N3mVrxhdM9u88u71vOtKfRZT5stOUJX7Wlax8bfWeU/XNvow6f+BvTJLGw8V5v7sAkNn0gjTPYI+5Pwmb/LzQ6RjEiHXmcyoGC/mSuRWl/C16XSmASIxJI4zT2iPuT+JTnkpQ6hYT9I3Rgi0qDoRekwD8GKZCOXZhpY3yE1eGawci+SFFXQe4uNpQSn2CEXk3qFKo9yHVjxPBt9eNuwKkPA+/h7CyO9F+fFx0GsL0xcx9hOvxSdgwO0mp18evYVfYffm5nJO3/nxhwG/vT2UkQQ7Qj3t6uGK5jVS265+QvXPOGTQ==</source>
  </file>
  <file path="Header/Part/MimeLiteralPart.php" generated-path="Header.Part.MimeLiteralPart.html" hash="be04fcb2c36dfb2a4021c182c1ae19cc" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="CharsetConverter">\ZBateson\MailMimeParser\Stream\Helper\CharsetConverter</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\LiteralPart</extends>
      <name>MimeLiteralPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</full_name>
      <docblock line="19">
        <description>Represents a single mime header part token, with the possibility of it being
MIME-Encoded as per RFC-2047.</description>
        <long-description>MimeLiteralPart automatically decodes the value if it's encoded.</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()</full_name>
        <docblock line="43">
          <description>Decoding the passed token value if it's mime-encoded and assigns the
decoded value to a member variable. Sets canIgnoreSpacesBefore and
canIgnoreSpacesAfter.</description>
          <long-description></long-description>
          <tag name="param" line="43" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="62" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="62">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="87" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="87">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="87" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="110" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::ignoreSpacesBefore()</full_name>
        <docblock line="110">
          <description>Returns true if spaces before this part should be ignored.</description>
          <long-description>Overridden to return $this-&gt;canIgnoreSpacesBefore which is setup in the
constructor.</long-description>
          <tag name="return" line="110" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="123" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::ignoreSpacesAfter()</full_name>
        <docblock line="123">
          <description>Returns true if spaces before this part should be ignored.</description>
          <long-description>Overridden to return $this-&gt;canIgnoreSpacesAfter which is setup in the
constructor.</long-description>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="24">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\LiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJzNVtty2zYQfddX7GQ8I8nRxXGTXuyqri9K45m4VWT5JZHDAUnIREqBDAHacTP+9x4AJC2RshtPZzrVg0iA2LOLg7OL/fkgjdLWcHu7Rds0i4SihYg54ZmyTFOyIB1xen/ENFeJnJ8xEZ+JJZ+wTPGM0iz5xAM9gLGx/zUWAZeKU6R1ujccJilGSZ4FfJBkV8Piqxr6KuwXgwHc09H5CcyHLcmWXKUseNDh/A1nIR4Y6f1WK1cPrzzXGWdLGMQpRseRmdXHibzmmeYZjIs9T3maccWlVsRICXmF3S8BQ5F15WjQyZ9c9uhG6MjykSZKCV/EQt8aioQmn8PU4J2dno37YxkkIQ+JgUZgTF8f93d3Xv5geCK7CA7eCsTBYrMVYrlOlkyLgMXxLYXcWCvr6ZrFOY7D+Ggr4g634ht2UZLRe8YiEVLBhKUyiJlSDT/8i+YyVLQy1/raIvwsG+YH1GuWkdIZNkQZv+JfwIHGekkIMYjMNLMU9YtwLEeF9dA+g0QqbanwJofTGf5ms/H0dxpRezQ/+HDYf8/6f8373k7/p8vnmHh39Nm/xPPj/MCMR+19C7MxMj9JYsJZ4lBIZyAHT3Elk4yT1Y7CWSzMSEeFitdCg2Q1JIuotwImT63hubU7cmYjWrBY8X8VAVuArycHcGitHvV/YqRhTsCqEEcMGCvOmlDWjodJo0SFEK2mSiwns7CwxB5wqnzpIwRsUjA/5gM658iLzTwBtUTatI9B+bGiDkywZSmsLRv1OjG5j6JAi1wGWiSSPM/KKMsD3XHLu3adE6z5bRmG+7+4DYzKoduXkX5ptl9ZDIfgn195VslQt84zkCKkvscsxT7CEceLvb2Givfr/h/SUccIpbvisPNs+HGutr+WPu6Gz3rUiHEzaimOTaD3gECfbzVQ7zZq6bUwpcCII+NpbHVrC59RrKpqncicQFTjQGeQ4JKjAIWQPUqhK1hrapRGVZJYljEUSulkafD7RcCqV6Jx+MMGXSj3NcbVXxuM8eBw/VsyldKsEtDItWdWeu7cSzyUxcBVexeXTQZjgTBsnKiFDnwFrbAYF2v/ScM2muqbU1Px8YGUr8S9KlIL09D2U3RYZoBVRXGa0EWnBOnO5+p552BUjY1E2lsv2r3CdlV+rLhFQVyBaI93Dc9KzFr2qP+iR5Pp+DfvfPL2dOadjN+ennnHh5PZxXS8igt+zAXQvp8yecKQh51Vn7gzt3Ad42rtrtBRIQzqeW5ygIdja9EpLe993FVvxfkYlMfS4qS4fde6gaqWOvyGMC4k9qJziRs4vu3R0i/U6BVdxALNiTL7xR0qoTfXjigjxsmbCb0avFytp27qFXX4NXJJ2B7sto2aEgulXVuh8jSFRx52B9RMAgoTrmS7vHjK1QSZV74bezCNk02QXNsMKRbaCuEn4W3ZDK5TAXXypTLXh89Xb5cbZDwmrxLzX/o35ssErcGDQdQyzPn4phQT1yC/kWAb1VFLNRDcWS/SaFI6tS6la6Zsn2LfbKeCt5Grtg4YLxaCq25Du5bBUbXgw3eX+2sLTBDYl05AFc861brdyy6NRsibd+065iru5xwlJvRAg9Tm6i6EYCCrgtD2kO/t0e6OSXtj1+2ux3BHHJ3HI158pvj3L0tsh1GDWN91UDbcMJb8hup9+P0+X1witovZ6/6P7RpkmbcVFu5G99qIoJnsxV26XtdrZWJzHZgWzYHt8HA6DzSXpKIkj0OjftcDhg1N/wHfmQhD5DJyoRbZxt7hJhIoi/AArvIU9+hqZlVdUbKhySrQTZPwaHMlGk479bT4hkD/d/y5Lum/pc/6fBp71qQk7671N6WOtWM=</source>
  </file>
  <file path="Header/Part/AddressGroupPart.php" generated-path="Header.Part.AddressGroupPart.html" hash="d3849bbd2ef3e32b0ec5a12f1687ccb7" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</extends>
      <name>AddressGroupPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</full_name>
      <docblock line="19">
        <description>Holds a group of addresses, and an optional group name.</description>
        <long-description>Because AddressGroupConsumer is only called once a colon (":") character is
found, an AddressGroupPart is initially constructed without a $name.  Once it is
returned to AddressConsumer, a new AddressGroupPart is created out of
AddressGroupConsumer's AddressGroupPart.</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>$addresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::addresses</full_name>
        <default></default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;an array of AddressParts&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="33" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::__construct()</full_name>
        <docblock line="33">
          <description>Creates an AddressGroupPart out of the passed array of AddressParts and an
optional name (which may be mime-encoded).</description>
          <long-description></long-description>
          <tag name="param" line="33" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;" variable="$addresses">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
          <tag name="param" line="33" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$addresses</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="44" package="MailMimeParser">
        <name>getAddresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::getAddresses()</full_name>
        <docblock line="44">
          <description>Return the AddressGroupPart's array of addresses.</description>
          <long-description></long-description>
          <tag name="return" line="44" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="55" package="MailMimeParser">
        <name>getAddress</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::getAddress()</full_name>
        <docblock line="55">
          <description>Returns the AddressPart at the passed index or null.</description>
          <long-description></long-description>
          <tag name="param" line="55" description="" type="integer" variable="$index">
            <type>integer</type>
          </tag>
          <tag name="return" line="55" description="" type="\ZBateson\MailMimeParser\Header\Part\Address">
            <type>\ZBateson\MailMimeParser\Header\Part\Address</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="68" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\AddressGroupPart::getName()</full_name>
        <docblock line="68">
          <description>Returns the name of the group</description>
          <long-description></long-description>
          <tag name="return" line="68" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="24">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\LiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="62" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="62">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="87" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="87">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="87" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJyNVNlu2zAQfNdXbAMDkYLGend6JSnQPDRt0fYpB4INtbZYUKRAUjlQ5N+7pI4osl1HgCDL2pndmVnp3ce6rJP84CCBA/hdSgdLqQj4WqP1YJbgS4KLE/TkjL46R6nOZUU/0DqyUFvzh4SfMzjgPykpSDuC0vt6keem5jvTWEFzY1d599Tlt6447G7m3B5Ofn1meJ5orMjVKLY2vDojLPjCd/4o6cc+M6pwgLCypqnDyFgUlhx3eguoCz7B1F4ajaqrCY3C0BDOExLY8NDHLepLqDg12jUVK2QjjFaPIFApKvg3D4cgjDIa0r3FXgaiRIvCx9pAtzSNLkLjF4Rh4kAmtfSSuZiRW3jbMLKAe+lL03hmnsXRAL6HRtJ3nJZ8YzUXetOz9hNyJ9B0v7GZsISBPlCbZSDapHHfrYGHQLHhwSxcIJaygC6UmJVQ6NaBQA+eNKcRMvsq2RVU4f/kbwJ8xMDCwdR3aHt4qLi8DpahtfgYIhw9cdBh8njlnfMUXZsNOR/FJ9MWp1G+2xhFa0lc7pqFMNvm1u3+9IzDGoWUIL0vpSihYtgtQcWKD0kLU1CRzXvEIJdfJ6wmgp8FTMp4MaRetcvwUnxzyy8OLBstwiRwczOsUdoKmI2WP+LhPezvZxHdhhB50JL2i8UYzz2rNEKy7GionHn+KBx+GFiZbur700b3f8adjQ5P3eeNG9weuNYta7f+pWf/dWNF/rinS6eSO7apnt0S3FhDXB7048WRuqAH4LdEN0ptC15qD7NYuUXeK4WlLclUnFxC+kbyOD6dCrxsEddZNqofGRKmfo77aZdfPd1rfYsr2L1p8eO7LeZ253fZ8I3pdkR7h6qhfryn5B/qsRzm</source>
  </file>
  <file path="Header/Part/HeaderPart.php" generated-path="Header.Part.HeaderPart.html" hash="03796f97ac6b47e02c1661587187fe73" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Header\Part" line="14" package="MailMimeParser">
      <extends/>
      <name>HeaderPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart</full_name>
      <docblock line="14">
        <description>Abstract base class representing a single part of a parsed header.</description>
        <long-description></long-description>
        <tag name="author" line="14" description="Zaahid Bateson"/>
        <tag name="package" line="14" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>eJzNVF2LEzEUfZ9fcYVCP+h08EGorqhbXVFwUWz1YVkomcydJu5MMiSZLiL9795kPqgtLboomIdm0txz7zknN3n+shJVlEwmEUxgJaSFXBYINFfMONA5OIFws2AOrVa310wW17LET8xYNFAZ/Q25mxHY418VkqOyCMK56lmS6IpWujYcZ9psknbXJqnN4nYxo/KwWL4heBIpVqKtGD9Z8PYdsowmWrmLqKN9mVpnGHeQMqrNC2YtGKwMWlROqg0wsDSRrE4T818WMxAhX8+f1U5oAzeMCZlByyFQY12NJn3Dw9OIfkRAI1Dxg7JsmQGK9pW9eVtW1Ng56Rm0gUmYyUJHFhKXQQgkWQf5PqOrjbI9fGiblLMuoC9sQuQf1K5TOgbIa8Wd1Ao26L56wGgcthtlfrSJB44aJH7R8vQbu/B7jvERAxjdC8mFbzHWUh3/tpSz9Ndrp5cB8NcEGOIucwhNaSHFXBsEn6SRYoWui4z+B7lRtJXNAFYBY0Gr4nuXrylPZ0x48O38QTo0rLA+eW9MihtJRe+lE2RNSWExKq4zwjU+TLt8K31Hl6cDh1XXFa2vTb8H3lNgqqn8WpclXQnftvak5anWxVmbG6nLYMkiOHLK7pwUPsRnlpM7/8xmVNk5k/87jy+9Gw+2+ErZml7CICII9fepv47W9rq9KIsOnIYvq7fx/Jg8ucfKLnpA84nbWrs8nv/q5uFb1wvlWm3RuKuW2cinPZRKRzB6VKZrLpDfrXE/dArDQHY4Hu8B9vzxsKbECSB9vF9+jOfzJ0/jx8PxRZ9kd/R4EKxzehf9BEiLK48=</source>
  </file>
  <file path="Header/Part/CommentPart.php" generated-path="Header.Part.CommentPart.html" hash="a453dba125df51bbfce9fd6730c5ac63" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="15" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</extends>
      <name>CommentPart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart</full_name>
      <docblock line="15">
        <description>Represents a mime header comment -- text in a structured mime header
value existing within parentheses.</description>
        <long-description>MimeLiteralPart automatically decodes the value if it's encoded.</long-description>
        <tag name="author" line="15" description="Zaahid Bateson"/>
        <tag name="package" line="15" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html"/>
      </docblock>
      <constant namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>MIME_PART_PATTERN</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::MIME_PART_PATTERN</full_name>
        <value>'=\?[A-Za-z\-_0-9]+\?[QBqb]\?[^\?]+\?='</value>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="24" description="&lt;p&gt;regex pattern matching a mime-encoded part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </constant>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="20" package="MailMimeParser">
        <name>$comment</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart::comment</full_name>
        <default></default>
        <docblock line="20">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="20" description="&lt;p&gt;the contents of the comment&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>$canIgnoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesBefore</full_name>
        <default>false</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;set to true to ignore spaces before this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="34" package="MailMimeParser">
        <name>$canIgnoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::canIgnoreSpacesAfter</full_name>
        <default>false</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="34" description="&lt;p&gt;set to true to ignore spaces after this part&lt;/p&gt;" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="27" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart::__construct()</full_name>
        <docblock line="27">
          <description>Constructs a MimeLiteralPart, decoding the value if it's mime-encoded.</description>
          <long-description></long-description>
          <tag name="param" line="27" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.MimeLiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="41" package="MailMimeParser">
        <name>getComment</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\CommentPart::getComment()</full_name>
        <docblock line="41">
          <description>Returns the comment's text.</description>
          <long-description></long-description>
          <tag name="return" line="41" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="24">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\LiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="62" package="MailMimeParser">
        <name>decodeMime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMime()</full_name>
        <docblock line="62">
          <description>Finds and replaces mime parts with their values.</description>
          <long-description>The method splits the token value into an array on mime-part-patterns,
either replacing a mime part with its value by calling iconv_mime_decode
or converts the encoding on the text part by calling convertEncoding.</long-description>
          <tag name="param" line="62" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Part" line="87" package="MailMimeParser">
        <name>decodeMatchedEntity</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart::decodeMatchedEntity()</full_name>
        <docblock line="87">
          <description>Decodes a single mime-encoded entity.</description>
          <long-description>Unfortunately, mb_decode_header fails for many charsets on PHP 5.4 and
PHP 5.5 (even if they're listed as supported).  iconv_mime_decode doesn't
support all charsets.

Parsing out the charset and body of the encoded entity seems to be the
way to go to support the most charsets.</long-description>
          <tag name="param" line="87" description="" type="string" variable="$entity">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$entity</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJx9UsFu2zAMvfsreAiQLpjje7JuXbrDBqzA0O5UFChUmY602ZIh0l2Bof8+SpaDJu7qiyzp8fG9R3341Ju+qFarAlbw01iCxrYIsvYqMPgG2CDc7hQjeXd3pWx7ZTv8oQJhgD74X6h5LcWx/qK1Gh0hGOZ+U1W+l50fgsa1D/sq31L1QHWZN2tpD7ubL1JeFU51SL3S/2149xVVLYvseFtMsq+xD0jomEBBJ2AwCQbad50cQ1kC4xODdQIgDoPmIWD9Eht5HlU7IOCTJbZuD38sG6mQHITDSAM6+FQDGx/gVilja8hakwXdKiK4HBtHmcLH6GqC6OK7ZQyqjefF3wLkSxbiJ6yPKkR1sXcMXXvHyVQeQnaT4VVaZQAsAxAvi3y9Teen3Jfejb5jRCdK3kON2tdT2zEF24DlJaWISnRyj/V6YjsolmxUN2lesP+N7lje8CBzhmZwmq13cH+vJyFnI/xdwo1ZpIqU9mbzCnJ7AC1kMFR+nMZ7Ph0k6TPYaOgclss5g3Lf9s4HvImvjnbYyL9Ape+c5wT8uZEEj7DPr0Z/jfLYHL0coeQa3+M8z5CwOdA3k9wj50d2dhphJjkOaaaweC7+AYxkN4A=</source>
  </file>
  <file path="Header/Part/DatePart.php" generated-path="Header.Part.DatePart.html" hash="acc0e9bb1b1a7a2125b9221fc6578ca6" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="DateTime">\DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Part" line="16" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Part\LiteralPart</extends>
      <name>DatePart</name>
      <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart</full_name>
      <docblock line="16">
        <description>Parses a header into a DateTime object.</description>
        <long-description></long-description>
        <tag name="author" line="16" description="Zaahid Bateson"/>
        <tag name="package" line="16" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="21" package="MailMimeParser">
        <name>$date</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart::date</full_name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="21" description="&lt;p&gt;the parsed date, or null if the date could not be parsed&lt;/p&gt;" type="\DateTime" variable="">
            <type>\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="19" package="MailMimeParser">
        <name>$value</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::value</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="19" description="&lt;p&gt;the value of the part&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="29" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart::__construct()</full_name>
        <docblock line="29">
          <description>Tries parsing the header's value as an RFC 2822 date, and failing that
into an RFC 822 date.</description>
          <long-description></long-description>
          <tag name="param" line="29" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" refers="\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()" link="/classes/ZBateson.MailMimeParser.Header.Part.LiteralPart.html#method___construct"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="43" package="MailMimeParser">
        <name>getDateTime</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\DatePart::getDateTime()</full_name>
        <docblock line="43">
          <description>Returns a DateTime object or false if it can't be parsed.</description>
          <long-description></long-description>
          <tag name="return" line="43" description="" type="\DateTime">
            <type>\DateTime</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="24" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\LiteralPart::__construct()</full_name>
        <docblock line="24">
          <description>Creates a LiteralPart out of the passed string token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\LiteralPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="26" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::getValue()</full_name>
        <docblock line="26">
          <description>Returns the part's value.</description>
          <long-description></long-description>
          <tag name="return" line="26" description="the value of the part" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="36" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::__toString()</full_name>
        <docblock line="36">
          <description>Returns the value of the part (which is a string).</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the value" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="48" package="MailMimeParser">
        <name>ignoreSpacesBefore</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesBefore()</full_name>
        <docblock line="48">
          <description>Returns true if spaces before this part should be ignored.  True is only
returned for MimeLiterals if the part begins with a mime-encoded string,
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="48" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Part" line="60" package="MailMimeParser">
        <name>ignoreSpacesAfter</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::ignoreSpacesAfter()</full_name>
        <docblock line="60">
          <description>Returns true if spaces after this part should be ignored.  True is only
returned for MimeLiterals if the part ends with a mime-encoded string
Tokens if the Token's value is a single space, and for CommentParts.</description>
          <long-description></long-description>
          <tag name="return" line="60" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Part" line="71" package="MailMimeParser">
        <name>convertEncoding</name>
        <full_name>\ZBateson\MailMimeParser\Header\Part\HeaderPart::convertEncoding()</full_name>
        <docblock line="71">
          <description>Ensures the encoding of the passed string is set to UTF-8.</description>
          <long-description></long-description>
          <tag name="param" line="71" description="" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="71" description="utf-8 string" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Part\HeaderPart</inherited_from>
      </method>
    </class>
    <source>eJydUsFu2zAMvfsreCjQJGhjIKfBWdahK4IdVmDocioKFIzMxNpkyZDoYsCQfx8l24m7bD3MF5nS43vkI9/fNFWT5bNZBjPYVDrAThsCORv0DG4HXBE83iJTcPbpHrW51zV9RR/IQ+Pdd1I8l+SY/9FoRTYQVMxNkeeukci1XtHc+X3ev4Z8G8rrPpiLPNx+u5P0PLNYU2hQ/VPw6TNhKYdEvMyyVqTuBLgRgIR9FwkaAKFKYNCWnUQDENz2Vc3YcuU8PCJWuoReN5WjDIaQ8qIe0E8mWwb4opk8mniX/cpAviQcP6F7QX+Sit41sZwSSrm7AhGyrTGgO1/jJSjXmhKsY9gO6J4tT6eYzFKwcFxE/DJd/qm78ZrSzIK2+8TddX8Z4AVNS4DiiIWH9SdYvFss+nLQlrATh7sc5IGts6yDD+j58HhsVdSwhsA+pl+w+0H2deHtVqYMu9Yq1s7C87NyVuCt4kkHn0JnYEKjJ8tFMUYJdT1Ap8sjNPkAq6PPRaE8yf/au3rtfI08OT1JD7HjK6lQ1vv6Q7JjRCajmPSEq5W4YQKNy/ofvbfkDqcuOkDPfV7DTbcqxXjsh78O/4G49TacL3nct8QWu9QMCu3laM3OR+oT05HmzXHuiQfcZJoQJ9d6nlGLQ/2H7DezmlM9</source>
  </file>
  <file path="Header/AddressHeader.php" generated-path="Header.AddressHeader.html" hash="4113d2c361e0f921effb2ea374b9936c" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="AbstractConsumer">\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</namespace-alias>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="AddressPart">\ZBateson\MailMimeParser\Header\Part\AddressPart</namespace-alias>
    <namespace-alias name="AddressGroupPart">\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="24" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>AddressHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\AddressHeader</full_name>
      <docblock line="24">
        <description>Reads an address list header using the AddressBaseConsumer.</description>
        <long-description>An address list may consist of one or more addresses and address groups.
Each address separated by a comma, and each group separated by a semi-colon.

For full specifications, see https://www.ietf.org/rfc/rfc2822.txt</long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$addresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::addresses</full_name>
        <default>array()</default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;array of&#10;addresses&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$groups</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::groups</full_name>
        <default>array()</default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;array of&#10;address groups&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="44" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getConsumer()</full_name>
        <docblock line="44">
          <description>Returns an AddressBaseConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="54" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::setParseHeaderValue()</full_name>
        <docblock line="54">
          <description>Overridden to extract all addresses into addresses array.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="54" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_setParseHeaderValue"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="73" package="MailMimeParser">
        <name>getAddresses</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getAddresses()</full_name>
        <docblock line="73">
          <description>Returns all address parts in the header including all addresses that are
in groups.</description>
          <long-description></long-description>
          <tag name="return" line="73" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="83" package="MailMimeParser">
        <name>getGroups</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getGroups()</full_name>
        <docblock line="83">
          <description>Returns all group parts in the header.</description>
          <long-description></long-description>
          <tag name="return" line="83" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="96" package="MailMimeParser">
        <name>hasAddress</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::hasAddress()</full_name>
        <docblock line="96">
          <description>Returns true if an address exists with the passed email address.</description>
          <long-description>Comparison is done case insensitively.</long-description>
          <tag name="param" line="96" description="" type="string" variable="$email">
            <type>string</type>
          </tag>
          <tag name="return" line="96" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="112" package="MailMimeParser">
        <name>getPersonName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AddressHeader::getPersonName()</full_name>
        <docblock line="112">
          <description>Returns the name associated with the first email address (or group) to
complement getValue()</description>
          <long-description></long-description>
          <tag name="return" line="112" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJytVt9v2zYQftdfcQP8IAWJXeRpiOd2SddtL12LduhD42CgqZPFQSIFksoPDPnfdyQlWVIs28EmwDBF3R3vvvvujj+9q/IqWpydRXAGf+bCQCYKBPqvmLagMrA5wvcbZtEouf7IRPFRlPiZaYMaKq3+Rm7npOz0fy4ER2kQcmurq8VCVfSmas1xrvR20Xw1i41JL5qXOR0PN19/IfVFJFmJpmJ88sD178hS1Msoqs0xofV7JU1d0uJ6Y6xm3LYby1dpt4uvqO/J55OU6c2ur9NUozFu/Wql37Sqq6DZJucLSRlgElgQgUIYC7nXhdoIufWpagzcMIOt5y494H7XI+WSPQEnIbemTCuJoDSUSmMrh+7EtNPaOreMt/eB8bzbN0hsoeBS2DwBI5tlyc69JjoxrzYWMliKC64KJTv/fqXTs7oowFTIRSY4s4LcOyfZwClDpHp4eJgLtJmnlM64+13+eHk5t4+25SGrbU62vjOWixQa2D3FeMHI3wakADzgo0VJ2LY8CdvRPxHQ49F3D5m9ZxrWr0z97R0wrQlolbV2dtg2Owv/T8VkqZgIn9lOYgW3d0v/+T9703Fq2qUmwVNuha8HfPqCttbSs3Q/D4NYF4IjRAmjCoMZH2504tqbPxr0ZOFPxJXVkjuiwRY70fiYU4k3Ejjinsa3sdjFWzK6B4s4CQg+78Xx0z1qLdIUJVjl+OmiAEaVsWOGkPSpV6Yuo1MIj4HYuXkMEoPWgxug/caKGuNpa2NQ6HSU9upqn5Wd0rKTz6j1uIYRzyyNoou3bgZRaAZmbpX0LLtHZCTox5SQxjLJkZpYr/TG8u5pDHe4US2sgvXlQPYZsDB46ISunE45hg7xCfqL4t1iPP58HlzokwVNnCTLKcOhEiedj4ar/STrinVHKwiAC+lHSTNbhORFnbr5MiSgzRlxUnflSVrdfBix8MTCfdk7h/SsN3RrGJRrD6yJehwhfajq+oCEkbUHjv8luF4rPhahFz0WXsD9lNisrtEVTu8egY80/w08CJv7OCuakNQCsKQwWqEXUb9XJYEjKFx3V0zd1YFTe3N1Qtc6YcU9FpPtiNqHo9PMHzHGcaNUgUwexCVnpkEyDkbG8IwbSa9PmjBe9zUT8ssFwcsq9jK+Hj84+3Fy3ribwGq1gjf7ir4JwEF8uB57whmjNnNS4igz7n5MARjFhb9HdSnLhKYr3CBjENMFyPMioRnSWqObWVVgSU3ZcSs04mSK0SFNxwj6GTWx4A9y7QVJHaY/YFnZp0FDT8bgDcnsZW7f3Hn0g93lNICS7ostfs/Rvx6Q94c=</source>
  </file>
  <file path="Header/DateHeader.php" generated-path="Header.DateHeader.html" hash="d7def8951d61636f7c4bef4731dec039" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="DatePart">\ZBateson\MailMimeParser\Header\Part\DatePart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="17" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>DateHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\DateHeader</full_name>
      <docblock line="17">
        <description>Reads a DatePart value header in either RFC 2822 or RFC 822 format.</description>
        <long-description>The base class sets up the header's consumer, sets the name of the header and
calls the consumer to parse the header's value.

AbstractHeader::getConsumer is an abstract method that must be overridden to
return an appropriate Consumer\AbstractConsumer type.

AbstractHeader::parseHeaderValue shou</long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="25" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\DateHeader::getConsumer()</full_name>
        <docblock line="25">
          <description>Returns a DateConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="25" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="25" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="35" package="MailMimeParser">
        <name>getDateTime</name>
        <full_name>\ZBateson\MailMimeParser\Header\DateHeader::getDateTime()</full_name>
        <docblock line="35">
          <description>Convenience method returning the part's DateTime object.</description>
          <long-description></long-description>
          <tag name="return" line="35" description="" type="\ZBateson\MailMimeParser\Header\DateTime">
            <type>\ZBateson\MailMimeParser\Header\DateTime</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyNU0tr4zAQvvtXTKF0nUDiJafSlL5Z9lIobU9d96DY41iLLRlpFHZZ8t87lqXgGJZWB2mkeX3zaebyuqu7JJvPE5jDay0tVLJB4LMThkBXQDXC250gtFrlj0I2j7LFJ2EsGuiM/o0FLdm5979pZIHKItRE3UWW6Y5v2pkCl9pss6C12caWi3BZcnq4e3lg9yxRokXbieK/CfOfKEo06yRx9jOj/F4r69qR8IJmx1nXX3HmG+UPbNILnC8w9MxaCwKiBnaicVyvdwKpACXzZeD5xz2szlcr0IPci5U2rfBcgSdLOKpZ/SZELUsIcDwPRSOs9TkGNIB/CBUnvt1YMqKg4Tn5lwAvD61fPTxyRkWAse5lVMfzhv9WtDDhBU6L44eDufFhIf8q4RFmfAiBMn9yzxD3DJZQOVWQ1Aq2eDBNPwM180GGyvsVsE3NFlccdExCOlt7n73fp8Sx1Q6VRMUZW+R/KUNgqbZ+Avpp+Db8ySsXDnoTGn/CbIAT7Y4rdxvu+qOyo106LUtWkJ5g29Hf9JR4LBdXPQI7g7MzGD/8+v7ObWdJMHIe1tiXs1GoMUvHngeSBgjrg8t+Sq9yTRP52ycfDZZXcw==</source>
  </file>
  <file path="Header/HeaderFactory.php" generated-path="Header.HeaderFactory.html" hash="7b43de4726300ab2110227f0d7b9f056" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="26" package="MailMimeParser">
      <extends/>
      <name>HeaderFactory</name>
      <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory</full_name>
      <docblock line="26">
        <description>Constructs various AbstractHeader types depending on the type of header
passed.</description>
        <long-description>If the passed header resolves to a specific defined header type, it is parsed
as such.  Otherwise, a GenericHeader is instantiated and returned.  Headers
are mapped as follows:

AddressHeader: From, To, Cc, Bcc, Sender, Reply-To, Resent-From, Resent-To,
Resent-Cc, Resent-Bcc, Resent-Reply-To
DateHeader: Date, Resent-Date, Delivery-Date, Expires, Expiry-Date, Reply-By
ParameterHeader: Content-Type, Content-Disposition</long-description>
        <tag name="author" line="26" description="Zaahid Bateson"/>
        <tag name="package" line="26" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="32" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::consumerService</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;the passed ConsumerService providing&#10;AbstractConsumer singletons.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="37" package="MailMimeParser">
        <name>$types</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::types</full_name>
        <default>array('ZBateson\MailMimeParser\Header\AddressHeader' =&gt; array('from', 'to', 'cc', 'bcc', 'sender', 'reply-to', 'resent-from', 'resent-to', 'resent-cc', 'resent-bcc', 'resent-reply-to'), 'ZBateson\MailMimeParser\Header\DateHeader' =&gt; array('date', 'resent-date', 'delivery-date', 'expires', 'expiry-date', 'reply-by'), 'ZBateson\MailMimeParser\Header\ParameterHeader' =&gt; array('content-type', 'content-disposition'), 'ZBateson\MailMimeParser\Header\SubjectHeader' =&gt; array('subject'))</default>
        <docblock line="37">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="37" description="&lt;p&gt;maps AbstractHeader types to headers.&lt;/p&gt;" type="array&lt;mixed,string[]&gt;" variable="">
            <type>array&lt;mixed,string[]&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="72" package="MailMimeParser">
        <name>$genericType</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::genericType</full_name>
        <default>'ZBateson\MailMimeParser\Header\GenericHeader'</default>
        <docblock line="72">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="72" description="&lt;p&gt;Defines the generic AbstractHeader type to use for headers&#10;that aren't mapped in $types&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="79" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::__construct()</full_name>
        <docblock line="79">
          <description>Instantiates member variables with the passed objects.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header" line="90" package="MailMimeParser">
        <name>getClassFor</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::getClassFor()</full_name>
        <docblock line="90">
          <description>Returns the name of an AbstractHeader class for the passed header name.</description>
          <long-description></long-description>
          <tag name="param" line="90" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="return" line="90" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="111" package="MailMimeParser">
        <name>newInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\HeaderFactory::newInstance()</full_name>
        <docblock line="111">
          <description>Creates an AbstractHeader instance for the passed header name and value,
and returns it.</description>
          <long-description></long-description>
          <tag name="param" line="111" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="\ZBateson\MailMimeParser\Header\AbstractHeader">
            <type>\ZBateson\MailMimeParser\Header\AbstractHeader</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>eJydVltv2zoMfvev4EOAdIWbvLfrLm1Ptz4MG9o9rS0GRWZqHTiWIcnpgqH/faQuudhOc84MtJFE8hNFfqT09n1TNtn0+DiDY/heKgtzVSHQbyOMAz0HVyL8uBAOra4fvghVfVEL/CaMRQON0f+idBMyZvsPlZJYW4TSueZ0OtUNzXRrJE60eZpGqZ3ObHESJxPaHi7ursh8mtVigbYRcu+GD59RFGjOsqy1h5QeLnVt28XW4A7NknYl63heFjjTSmdhKYzSrYWPM1oR0gUMcKsGLRRIBylU/QS69vHgZY5N6bUYqhHWYsGBAP67CXELq1ENDDlbLQnPaRBgG5RqriShz1W90WLsHJSLOSB7BhQWbCvLCcBXAjbPypKSgE9Yo1EyeksWik4kaqcoMgWIuqBNXWsIniyDlvVwBmEhmoaVKOW6qvSzPU3efywK8tUG/VO4NnqRw3edw6XM4ULSvzuKB5ocbrGpVicsukWLtTsJunFC6wwXZ2wchx4jjhMEa16R22lXHq+VwuQKK7VEs4rTf341ivyMg7Qa8C5WjEeEIEo5NAmUMu68Zz7IaXalbKOtckrXicmidaU28EOIUhUQieZJKitKaozlNTFFm1X2OwP6PKv4I3viE3R4t82IrogKaamYYQkg8TApgiVhhY6mk6gz9b9k6agECXMkuzxn+aBnhE1w94/3j8yCPawnlgZK2gns2zJonsN9UKBvfKAqd7g1hvN3W7befk4MGue7a053V6Tsrsz6S9aztLtqPEH6kCZQbWj/KNpr0986CgacipIBLx7z/xzFTaEMhbAg6Z5th0RFKqshIYYiG1wetggnm63+7mSdkh06noxly+Tr8SLKik1J/50fd+2Mr7b9XtigsI3uR48H6476GHd86xvCU+jgQyXIFcj33JwaUZl6d0BzpXDcxOuxS31c1bEc99Vq3IlbH1XsofPv3Czj4TPdbC4bCwtczMhxvkjFrKKFZ+XK7Z6nfbzW7QvWkWk45b2W2G1nu8dqZ/SAgHlbS04x/Pwp011+dAjojUf4vU7byNGz5+RdR4tCNNxQXwZDceuv2ZBSfsbw60DU3ayGu4Pz2X8dsNW+2ETejFhnLQo3e5R1kq6WlJNNeJ7QXfLW19oceZB+DNA6OjKBOU1vAUx6Z2sV8hqFLOEoxiu0fno9jMKpqEJGC+EkvU7smy3oXduk4Q3jpKvNn5rzRt6p8/NXNfmLoQienPVUXrLh2WaUAMLRtirltZxf0qGY+f08h1eYxFdS7R9nS1G1mCe8zXON3nHuf3FhV+Rhuzx5OHQx7xzh1Wqr8fkmnjDQJI979mgVqbEJbJeHZ90UEHY0OxouzBx2t0wZesn+AOBzyxE=</source>
  </file>
  <file path="Header/Consumer/AddressBaseConsumer.php" generated-path="Header.Consumer.AddressBaseConsumer.html" hash="4325bd559554dc42767dcf9a7fe32603" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="21" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</extends>
      <name>AddressBaseConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer</full_name>
      <docblock line="21">
        <description>Serves as a base-consumer for recipient/sender email address headers (like
From and To).</description>
        <long-description>AddressBaseConsumer passes on token processing to its sub-consumer, an
AddressConsumer, and collects Part\AddressPart objects processed and returned
by AddressConsumer.</long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="29" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getSubConsumers()</full_name>
        <docblock line="29">
          <description>Returns \ZBateson\MailMimeParser\Header\Consumer\AddressConsumer as a
sub-consumer.</description>
          <long-description></long-description>
          <tag name="return" line="29" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="41" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getTokenSeparators()</full_name>
        <docblock line="41">
          <description>Returns an empty array.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="41" description="an array of regex pattern matchers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="55" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::advanceToNextToken()</full_name>
        <docblock line="55">
          <description>Disables advancing for start tokens.</description>
          <long-description>The start token for AddressBaseConsumer is part of an AddressPart (or a
sub-consumer) and so must be passed on.</long-description>
          <tag name="param" line="55" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="55" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_advanceToNextToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="70" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isEndToken()</full_name>
        <docblock line="70">
          <description>AddressBaseConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="param" line="70" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="70" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="83" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isStartToken()</full_name>
        <docblock line="83">
          <description>AddressBaseConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="codeCoverageIgnore" line="83" description=""/>
          <tag name="param" line="83" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="83" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="99" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getPartForToken()</full_name>
        <docblock line="99">
          <description>Never reached by AddressBaseConsumer. Overridden to satisfy
AbstractConsumer.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="codeCoverageIgnore" line="99" description=""/>
          <tag name="param" line="99" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="99" description="the constructed header&#10;        part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getPartForToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJzNVktv00AQvudXzAGJtGrie4sKFKhA4iWSE4TD2juJF5xda2ddiFD/OzObteu4SVupQmKVxI+d5zffzObZ87qsR9nx8QiOYV4agqWpEPhaKx/ALSGUCF8vVEBydvFBmeqDWeNn5Qk91N79wCJMWVn0X1SmQEsIZQj1aZa5mp9c4wucOr/K0i5lOelJepiye7iYvWb1bGTVGqlWxUGHi7eoNF9eOUvNGv3ZaNSwu3cBvQpOHlMmM/RXSKD4A7kinBRJA5bOg8fC1AZtyAgt2wNcsxtQWnskgjI6IRhX5ieKtUvv1qCshrk7klxBvi+30hdsvQ2HMSPOD5yF4H6iFXwKljF2xS/ABAJq8i6WE7bZs/Sq91pD4aqKoSXgzMMiiXyONcl/xI1kHHWU9xgab1GLwXwztNlVSDWhZAS+KlUaDQnlCH5RcfB7s8LfgWHivZyCV0VoN0Z/RsArQi7rGL7EIAgWD6zfYhBmLFhrrA/VtH3ZXl9s870V07fvkbB9XUo6WbwyaoHhY9SWjS2C4VqtMMyavLVA46MouE1OVnL1rXsh60ngZpmct06EcMzoyTkbGySV7Mn6fhZvr+PvIfCUZT7WYQPKe7U5mDnnzbzifFk+Skqzelzhb6Zh4I6wsFahKB8GwFz4OkNuemmkwxjcmcFrQyqvpO/0lbKF0F7ajYLQNnYE3UpnLtW6EYgK+0jYm0iccL8fxqyxlzRHsTHIwbqhADlu21Nze94GVRJfd4OEqxujHWznzlXwxNBM4o2I3YfsFgicu4/cRFFjPPRxsmtxCLxZwnhXoLd5U5mz7t11d8dB84w7Pd0TxAHfdxV3X1G0Q7JPA5TqKlUx40kBrfEEv6p+qQ2lQDtMl6ri8X+gEFtyJ4iGzJcyIJMgWrivAobeWN1P+gCzo7H/IP/CabZ/xRxZ4buVdR7/ITQ3pX8kOB+RI2ZpxfNG986fPlpT+MRC3miNcj4CqWBouenwHUzyx0ITz4FdkHa7+L2RTqyAUGYPBN+gdFunxunUnAO3kPyLqJL0pLWWFk5X0ziyqVA1athblvvOw3jGb+/jSJMYZIpxTLFk238kA89pHnqwTVXtRk6layotI89EnPQDTgBxfOl8nw0nPZgOMCMdgxLKJRfP+c3k3OKvHU61xLke/QVPYD3C</source>
  </file>
  <file path="Header/Consumer/CommentConsumer.php" generated-path="Header.Consumer.CommentConsumer.html" hash="77f2c52770e4e154368928a70bcf297f" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="LiteralPart">\ZBateson\MailMimeParser\Header\Part\LiteralPart</namespace-alias>
    <namespace-alias name="CommentPart">\ZBateson\MailMimeParser\Header\Part\CommentPart</namespace-alias>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="34" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>CommentConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer</full_name>
      <docblock line="34">
        <description>Consumes all tokens within parentheses as comments.</description>
        <long-description>Parenthetical comments in mime-headers can be nested within one
another.  The outer-level continues after an inner-comment ends.
Additionally, quoted-literals may exist with comments as well meaning
a parenthesis inside a quoted string would not begin or end a comment
section.

In order to satisfy these specifications, CommentConsumer inherits
from GenericConsumer which defines CommentConsumer and
QuotedStringConsumer as sub-consumers.

Examples:
X-Mime-Header: Some value (comment)
X-Mime-Header: Some value (comment (nested comment) still in comment)
X-Mime-Header: Some value (comment "and part of original ) comment" -
     still a comment)</long-description>
        <tag name="author" line="34" description="Zaahid Bateson"/>
        <tag name="package" line="34" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="42" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::getTokenSeparators()</full_name>
        <docblock line="42">
          <description>Returns patterns matching open and close parenthesis characters
as separators.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="42" description="the patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="53" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::isStartToken()</full_name>
        <docblock line="53">
          <description>Returns true if the token is an open parenthesis character, '('.</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="64" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::isEndToken()</full_name>
        <docblock line="64">
          <description>Returns true if the token is a close parenthesis character, ')'.</description>
          <long-description></long-description>
          <tag name="param" line="64" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="64" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="78" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::getPartForToken()</full_name>
        <docblock line="78">
          <description>Instantiates and returns Part\Token objects.  Tokens from this
and sub-consumers are combined into a Part\CommentPart in
combineParts.</description>
          <long-description></long-description>
          <tag name="param" line="78" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="78" description="" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="78" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="93" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::advanceToNextToken()</full_name>
        <docblock line="93">
          <description>Calls $tokens-&gt;next() and returns.</description>
          <long-description>The default implementation checks if the current token is an end token,
and will not advance past it.  Because a comment part of a header can be
nested, its implementation must advance past its own 'end' token.</long-description>
          <tag name="param" line="93" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="93" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="106" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer::processParts()</full_name>
        <docblock line="106">
          <description>Post processing involves creating a single Part\CommentPart out of
generated parts from tokens.  The Part\CommentPart is returned in an
array.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="106" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="106" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJy1Vl1PKzcQfc+vGCGkJCgf71DoLfTeFqm3ogVV1SU8OLsO695dO7W9BNTy33vG9iabhBBo1Uiwu7bn68yZGX/z7byYd8ZHRx06optCOZqpUhKec2E9mRn5QtKXc+GlM3ryWajys6rklbBOWppb84fM/AjCLP+hVJnUTlLh/fx4PDZzfJnaZnJk7P047brx1OXD9DGCeTq//h7i444WlXRzke00OPlRihyPC6NdXUl70unUbu9pfPnJT8pLK0p+P3mz0IWpKqn9SuiSlXjDhhNmyRVHoizJm68IihbKF0ozghAupONdR1lU5hgt4r+rtO9VJsrlNkGygjvDIjgCOaFpKklL52Xe6DZasgqhDRTYESF3kkwN94alfJCsTnulazY9wypOQrHGdrJDUufRle/yXHllNAJ4GtCftYEZpCfA5agSTyQflfPB8spLBLSQCLmSQit9H5xZRaw4DKdyicWokZy3OEcLU5c5wW3EdM+BWPYEx5JmVuTAKTi0BOqSjwEL4EtOeOVmTxRwJTeXmZoBPz7vBpQS1vADTgAd5R1rmVlT0Q8SGKhseWBRqKygXM4U8N0SFzpnyV9CBNchgNWeI1dPAWf8XqX146Oo5qV0x/zx+5CpNYykOqZrU0l6EGUtqZcC7r/tGPUSARoxAKqAPyB8p6IDRLWsbmMVsgD69Rs1BzRkReEXTYi2hVDnovYFEvdFiELllAoplHBWCreNo3z0TLdN9Dt/ddhKqCT+HdGv0tdWc/Px4J9m+vmsYN5wL+F8UFYaJL7NtKwQVmQ47xo1nBuJI1yqnJi42jw/2GAlMfL2LrS4xmI6NA5P9DcPLgL1Wa0DJ+le+huu8uul/l4/nI2x8C+pv+1Oet0BdSf97t1J2HwO/3fF7C2ypGLDDY2EuzDKNkT+YrxQ3utuh8eOVU29HQZVm6FPjSn3RarctQdLQrS9qGZHpGmXTk9P2aP+v4/2tewi2v7/Ge1Hnb831v7rsV5q5wXaMNdH4K5NwYfhEoyRmfIEddzB4/AIbQo9fkVmCK51GgI6XJJT9KwcDQBdUdDmvMJ6oyAd5dUXiuE1/OIew0eHyqURuonu5C2TNL7z6xsKjI99MradjUHLgR2ZOWTQhmfc2T6BMMY+Dc+0XKzl9LVsXWAAuoSAY9FH3+u307aFHc9cjA5Rl4Cbez6DH0YRWCuzr64heFZbJvRaWfPUi6G1E73ghsvTUeQPQmdcChi9yoMf5zITfAdZtuNlExcU7wrpqtDoiwNjAGm36V5Vuy0TjsxCUxd+daNju7jSXIIarHbQZdU99qU8OXJjfgbmMV+bNgbrGjcpsJG119J8ZRAtnMikc0x5pR9M+YACzawEOFgRxBu4BW/VFC5YwLvRdM/TTHAknIimcoMj6UK2XZQukSkULjK+zL214mkX4O+sMEy0w+DRf6zU27u/g1v70pfADP2lFySS/a0sNcRF6+yeLJdnBsjjFtaLUjy9w1u/JRqSOE7XQBX4bCw3V1Af3XBIbZSb60brzr+mCFUZbfEl1TP1UEQtBZuG13wfhRlHo+jj8Az9KomiW4x4JpysCT+TLJ180WTLv70mD9ZN/sZ3umjw4EWDe/RtadrQ0dl+a641O/psC79eY6m/vPg8d/4BebGD8A==</source>
  </file>
  <file path="Header/Consumer/SubjectConsumer.php" generated-path="Header.Consumer.SubjectConsumer.html" hash="058b948bbe188e0e2eb9e9706c365bf7" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="29" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>SubjectConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer</full_name>
      <docblock line="29">
        <description>Extends GenericConsumer to remove its sub consumers.</description>
        <long-description>Prior to this, subject headers were parsed using the GenericConsumer which
meant if the subject contained text within parentheses, it would not be
included as part of the returned value in a getHeaderValue.  Mime-encoded
parts within quotes would be ignored, and backslash characters denoted an
escaped character.

From testing in ThunderBird and Outlook web mail it seems quoting parts
doesn't have an effect (e.g. quoting a "mime-literal" encoded part still
comes out decoded), and parts in parentheses (comments) are displayed
normally.</long-description>
        <tag name="author" line="29" description="Zaahid Bateson"/>
        <tag name="package" line="29" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer::getSubConsumers()</full_name>
        <docblock line="36">
          <description>Returns an empty array</description>
          <long-description></long-description>
          <tag name="return" line="36" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="52" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer::getTokenParts()</full_name>
        <docblock line="52">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>Overridden from AbstractConsumer to remove special filtering for
backslash escaping, which also seems to not apply to Subject headers at
least in ThunderBird's implementation.</long-description>
          <tag name="param" line="52" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="52" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="63" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer::getTokenSplitPattern()</full_name>
        <docblock line="63">
          <description>Overridden to not split out backslash characters and its next character
as a special case defined in AbastractConsumer</description>
          <long-description></long-description>
          <tag name="return" line="63" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJyVVU1z2zgMvetXYDqZsZNx5Huz3U3Tj909dJppMj00yQGmYIsNRaoElcTTtL+9ACV5HbfptrrIpIAH4OEB/uOvtm6L+cFBAQdwXluGpXUE8m4xJghLSDXBhxNMxMFfvkHr3tiGTjEyRWhj+EgmleKs/sfOGvJMUKfUPp3PQyun0EVDZYir+fCV5wuuDodDKeHh5OyluM8Ljw1xi+bRgJf/EFbyehE8dw3Fo6Lo+H+t5ZSG3/rz6Jd9zsM1+d7830QRU9CIA1mv7hL5iuFv8hStGVOCFCBSE26ExMTA3QLM8IlHnk6jDdkwCeEztVEWoc6hGW4pktLPVEHH1q9yD3bj3NbW1IrWEPoEtu/UiCUxE1ovCInuEtxaCeUVlLyYSRNmkh7chs5V4EOCBSmU9cZ1lTjhw/5HSl1UsBt0nRTmAWFFqefqvd6VAEriIXkTBEDBFIDHyJ+6IHQPARcCsfIhUjUD9HJGc80OuQZTY0STlIWKJC9NxSsYscFWThuDkcvXMTRSIyflSQKd152XpE5srDL22y65EK6F1AU00motm4kazimpU85ToapA7CfSB5TmoQdaLpXKKZWrcmON8KTRQp1VRbgnMFTc8yVpOKdYJoiUIXRJ6sjf9/tSe1IetgKmYt3IifdBbqGy3Dpc9ywKTQ06t9Z6IQ8ZdqkW+XxArG0Fg4zz/BjhkOGsl8BGKPRjoRafC5Anq1mfA3iXu8y59KZNa0km4nr8Or6PezHA8wUnbcWId3E1CvBwI/jBZ57fsiyS5CVULTtvkg1eNSTZjgg83c+GfWL6DKEuro7y1ZfiJynnZFWwl7+3DmAZ4ginBZguamdkPGX4QZLUSzuMf7nLxtsbitFWIlZYqhJ3WdlaB9ySseh0wQqaamkr8n8jkJUuX2f9hAM6DoNiBUtnFdvWrfVwtrM4MI1wjpDTzjhMRHdN60iVhkr/d8Uciyix2ew62Msc8G7nf5Pgi6v7bSH9TAx54aoPT3eTeEQae7pCD/8U35HxLYzR9TH1bDVvoFYGT/aDju0Pd5JOsG51rzt1cz/CydLETZcNyr9GRcu8g62OCz5UxmNzJVbjyo+0ojvZFEmC+F+l70xLOO19vhuoPX4hWTM8y1KQvTSd3E9mWyw+d65HIdWC8C9DOfC3xfrk63QC5QathMn+18nI8pfiG8CPwf0=</source>
  </file>
  <file path="Header/Consumer/AddressGroupConsumer.php" generated-path="Header.Consumer.AddressGroupConsumer.html" hash="52349dddd5529fe36195a329d429bfda" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="AddressGroupPart">\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="28" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer</extends>
      <name>AddressGroupConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer</full_name>
      <docblock line="28">
        <description>Parses a single group of addresses (as a named-group part of an address
header).</description>
        <long-description>Finds addresses using its AddressConsumer sub-consumer separated by commas,
and ends processing once a semi-colon is found.

Prior to returning to its calling client, AddressGroupConsumer constructs a
single Part\AddressGroupPart object filling it with all located addresses, and
returns it.

The AddressGroupConsumer extends AddressBaseConsumer to define start/end
tokens, token separators, and construct a Part\AddressGroupPart for returning to
clients.</long-description>
        <tag name="author" line="28" description="Zaahid Bateson"/>
        <tag name="package" line="28" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::getTokenSeparators()</full_name>
        <docblock line="36">
          <description>Overridden to return patterns matching the beginning and end markers of a
group address: colon and semi-colon (":" and ";") characters.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="36" description="the patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="47" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::isEndToken()</full_name>
        <docblock line="47">
          <description>AddressGroupConsumer returns true if the passed token is a semi-colon.</description>
          <long-description></long-description>
          <tag name="param" line="47" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="47" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="58" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::isStartToken()</full_name>
        <docblock line="58">
          <description>AddressGroupConsumer returns true if the passed token is a colon.</description>
          <long-description></long-description>
          <tag name="param" line="58" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AddressBaseConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="72" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer::processParts()</full_name>
        <docblock line="72">
          <description>Performs post-processing on parsed parts.</description>
          <long-description>AddressGroupConsumer returns an array with a single Part\AddressGroupPart
element with all email addresses from this and any sub-groups.</long-description>
          <tag name="param" line="72" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="72" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\AddressGroupPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJy9VU1PGzEQvedXjBASSZSQe9JQoC3tBRUJTnyocryzWZdde2V7S1HLf++M7V2SEKAc2pVg1/F8vPdmPH73vi7q3mQ47MEQLgrlIFclAr1rYT2YHHyBcHksPDqjr0+FKk9VhWfCOrRQW/Mdpd8nZ/Y/LJVE7RAK7+vpZGJqWpnGStw3djlJu26ycNk4LfYpPRyffyT3SU+LCl0t5LMJr7+gyOj1wWjXVGhnvV7jXrWmlb8+yjKLzn22pqn5B3JNrIOxAwFO6SVxX7IJMxfRhfb6gvcZXjaO2606QrdmHKoICQesB/DfidKZW4nTcApQ3kGC0xIB1yzGslsghSdKGSzuQZqqEm7E4YTOADki6S7Jm4MZTXIRdqwUBSiN5trlptFZh+LMKmPBG7DoG6vZixaMQoqy5KUsFWo/glWROmgMy9tGkr3gcEmmraqCWXBDcBOVkSrcKV8A5YHSyMCpk2PEhDhixOXIusN8QV23FQ3+9EGCtHksHHZ7xCrDXGkE5wnMBGN4b26p1Ubx3YprbMz/SI9U3M4pJ/VWpeOYUTHX4T0UjS/I7lKIQmWQGjJ0tSyFc28m0/vVA3pCj/IzhK8/0FqVZcShqyX1offI2lXCyyLgI+UWuFQ6oE0tQ9v2Fq0LLdsGjJ2cyjGF2D3ssNJM/Z3pTvhtZ7YzAFmQdJISMvEYpH0fJkCkJeW9ugk4WnTJaBLedbOgww95o6VXlGKJ/oIrc94Vpj8IhlEBflLsq73p3gj2Zns3s7D1EP5v6rRV6bbFqNI03fKEjrowS22h3NopesqPwVWJHuwGp03uC2NKpImQi9LhOmdrPJ0LytbRVu6TzgLxfoz2DOm0C/P5nKkP/hH1/8b6nI/mW3lPX+Z9hpYOaUWD0Tg/XpuOPKmZKg/sp137omA8260V92mEvTj42oBYYkWD4XHqYUV30soVkFtTUQlYczpVQt+H0R+O4pZDFeW//psLLn7zJx2+3UB3s1KboK9ufgeCrxUtCcourh8liQk2S7cb2DqYw1U6ovxQaVDIgioanIAu0/A1WPHkh3ozmoCikSzoYqNptYl502k9bQD3jYq4xH76dRSTjQ9ozhy1ZegPBrMnYegm8Eo3uL7zsLZKQUnieYz7aPxouBsnK1lwoccHbHdCc9PY+/GBxrtNTi3UFUztxIuhunn30PsDxKgQ2Q==</source>
  </file>
  <file path="Header/Consumer/ConsumerService.php" generated-path="Header.Consumer.ConsumerService.html" hash="4ce34c5e5e1a35e2881b97e5be6f0bbe" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPartFactory">\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</namespace-alias>
    <namespace-alias name="MimeLiteralPartFactory">\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="17" package="MailMimeParser">
      <extends/>
      <name>ConsumerService</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</full_name>
      <docblock line="17">
        <description>Simple service provider for consumer singletons.</description>
        <long-description></long-description>
        <tag name="author" line="17" description="Zaahid Bateson"/>
        <tag name="package" line="17" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="23" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::partFactory</full_name>
        <default></default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="23" description="&lt;p&gt;the&#10;HeaderPartFactory instance used to create HeaderParts.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="29" package="MailMimeParser">
        <name>$mimeLiteralPartFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::mimeLiteralPartFactory</full_name>
        <default></default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="29" description="&lt;p&gt;used for&#10;GenericConsumer instances.&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::__construct()</full_name>
        <docblock line="36">
          <description>Sets up the HeaderPartFactory member variable.</description>
          <long-description></long-description>
          <tag name="param" line="36" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mimeLiteralPartFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="47" package="MailMimeParser">
        <name>getAddressBaseConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getAddressBaseConsumer()</full_name>
        <docblock line="47">
          <description>Returns the AddressBaseConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="47" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AddressBaseConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="57" package="MailMimeParser">
        <name>getAddressConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getAddressConsumer()</full_name>
        <docblock line="57">
          <description>Returns the AddressConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="57" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="67" package="MailMimeParser">
        <name>getAddressGroupConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getAddressGroupConsumer()</full_name>
        <docblock line="67">
          <description>Returns the AddressGroupConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="67" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="77" package="MailMimeParser">
        <name>getCommentConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getCommentConsumer()</full_name>
        <docblock line="77">
          <description>Returns the CommentConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="77" description="" type="\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\CommentConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="87" package="MailMimeParser">
        <name>getGenericConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getGenericConsumer()</full_name>
        <docblock line="87">
          <description>Returns the GenericConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="87" description="" type="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="97" package="MailMimeParser">
        <name>getSubjectConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getSubjectConsumer()</full_name>
        <docblock line="97">
          <description>Returns the SubjectConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="97" description="" type="\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\SubjectConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="107" package="MailMimeParser">
        <name>getQuotedStringConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getQuotedStringConsumer()</full_name>
        <docblock line="107">
          <description>Returns the QuotedStringConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="107" description="" type="\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="117" package="MailMimeParser">
        <name>getDateConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getDateConsumer()</full_name>
        <docblock line="117">
          <description>Returns the DateConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="117" description="" type="\ZBateson\MailMimeParser\Header\Consumer\DateConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="127" package="MailMimeParser">
        <name>getParameterConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService::getParameterConsumer()</full_name>
        <docblock line="127">
          <description>Returns the ParameterConsumer singleton instance.</description>
          <long-description></long-description>
          <tag name="return" line="127" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="36" code="PPC:ERR-50015">Argument $mimeLiteralPartFactory is missing from the Docblock of __construct</error>
      <error line="36" code="PPC:ERR-50014">Name of argument $mimeLiteralPartFactory does not match with the DocBlock's name $partFactory in __construct()</error>
      <error line="36" code="PPC:ERR-50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $mimeLiteralPartFactory in __construct()</error>
    </parse_markers>
    <source>eJy9lt9vmzAQx9/5K+6hD2nUhvd0P5Nq3aRV6pY9VZEqBy7BE9jINpGmqf/7zhQiAnZIulBewPC9+959bAu/+5gneRCOxwGM4VfCNax5ikD3nCkDcg0mQXicMYNaiuU94+k9z/CBKY0KciV/Y2QmFGzjP6U8QqEREmPyaRjKnEayUBFOpNqE1VcdrnR8XQ0mZA+zxS2Fh4FgGeqcRV7D5VdkMd3mUugiQ3UTBIXuVdPIVM/28QuLjFR/bo4Ota+/c4OKpXvxNbYFz3JiRmFbaspC2XIKhrVUEFWVguZik6Kh4Y4WK0xCkkfGEh5DVUgJIkqZ1lB3uXhJHPwNgK7S1F6UYcsULF/VvZ3WOk33IxfaMEG9EKIYjIRIIZk0lLaLMjos79SzoYVA4ou8ich+e33VbvAvRRHcOuEdClQ8qnHtqvfXmHlm1FXuAo2GIi/3QZdUhtmKLKklzlYp1o6wa5ZwsMwR2OS0X2axor0B60JEhksBT092DRlVRGZ0OM0VeIB5+r0s/V5Wlb0uDO3/6w+NjPDeMZ8NqTuvjTpE+NnJ+SeaQgldcv4cxwq1njGN884G2s1vF7Yqc/Qurjrn0uFzcC42aBwhozbIqgyHdDqlFN+q+kclxSsH98sTQb0FpBMBHQlnYDB3Shb5W9DZMzoS0V5MD6c97blhzWWWoTCDcmp59CFqyX10WrJzg2n/WYYA0/LoA9OS+8C0ZIfAeH4ONaNDfBbFyp7/BuXT8ujj05L7+LRk/8Gnbw39KOjYES+MIjaDgnIZ9dFyxfiQubTn3nC31OqgkJoGfXCaWh+UpubcMB7s0RFp4Q1KpOPSh6UT4GPTEZ4K6Dn4Bwvyvcs=</source>
  </file>
  <file path="Header/Consumer/AddressConsumer.php" generated-path="Header.Consumer.AddressConsumer.html" hash="ff6adf070a95098b234ff2e4e8c05749" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <namespace-alias name="AddressGroupPart">\ZBateson\MailMimeParser\Header\Part\AddressGroupPart</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="34" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</extends>
      <name>AddressConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer</full_name>
      <docblock line="34">
        <description>Parses a single part of an address header.</description>
        <long-description>Represents a single part of a list of addresses.  A part could be one email
address, or one 'group' containing multiple addresses.  The consumer ends on
finding either a comma token, representing a separation between addresses, or
a semi-colon token representing the end of a group.

A single email address may consist of just an email, or a name and an email
address.  Both of these are valid examples of a From header:
 - From: jonsnow@winterfell.com
 - From: Jon Snow &lt;jonsnow@winterfell.com&gt;

Groups must be named, for example:
 - To: Winterfell: jonsnow@winterfell.com, Arya Stark &lt;arya@winterfell.com&gt;;

Addresses may contain quoted parts and comments, and names may be mime-header
encoded (need to review RFC to be sure of this as its been a while).</long-description>
        <tag name="author" line="34" description="Zaahid Bateson"/>
        <tag name="package" line="34" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::getSubConsumers()</full_name>
        <docblock line="44">
          <description>Returns the following as sub-consumers:
 - \ZBateson\MailMimeParser\Header\Consumer\AddressGroupConsumer
 - \ZBateson\MailMimeParser\Header\Consumer\CommentConsumer
 - \ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer</description>
          <long-description></long-description>
          <tag name="return" line="44" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="60" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::getTokenSeparators()</full_name>
        <docblock line="60">
          <description>Overridden to return patterns matching the beginning part of an address
in a name/address part ("&lt;" and "&gt;" chars), end tokens ("," and ";"), and
whitespace.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="60" description="the patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="76" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::isEndToken()</full_name>
        <docblock line="76">
          <description>Returns true for commas and semi-colons.</description>
          <long-description>Although the semi-colon is not strictly the end token of an
AddressConsumer, it could end a parent AddressGroupConsumer. I can't
think of a valid scenario where this would be an issue, but additional
thought may be needed (and documented here).</long-description>
          <tag name="param" line="76" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="76" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="87" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::isStartToken()</full_name>
        <docblock line="87">
          <description>AddressConsumer is "greedy", so this always returns true.</description>
          <long-description></long-description>
          <tag name="param" line="87" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="87" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>processSinglePart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::processSinglePart()</full_name>
        <docblock line="101">
          <description>Checks if the passed part represents the beginning or end of an address
part (less than/greater than characters) and either appends the value of
the part to the passed $strValue, or sets up $strName</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="string" variable="$strName">
            <type>string</type>
          </tag>
          <tag name="param" line="101" description="" type="string" variable="$strValue">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strValue</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="130" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AddressConsumer::processParts()</full_name>
        <docblock line="130">
          <description>Performs final processing on parsed parts.</description>
          <long-description>AddressConsumer's implementation looks for tokens representing the
beginning of an address part, to create a Part\AddressPart out of a
name/address pair, or assign the name part to a parsed Part\AddressGroupPart
returned from its AddressGroupConsumer sub-consumer.

The returned array consists of a single element - either a
Part\AddressPart or a Part\AddressGroupPart.</long-description>
          <tag name="param" line="130" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="130" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJy9V21v2zYQ/u5fQRjBbHey/T1OvLjZuhegW1cHG9CmH2iJttRIpEZScYO1/313R1KyJTlJN2AGbOuFPN4999xz5MV3ZVoO5i9eDNgLdpNmhm2zXDD4L7m2TG2ZTQV795JbYZS8fc2z/HVWiDdcG6FZqdVHEdsZTMb5V3kWC2kES60tz+dzVcKdqnQsZkrv5v6tmW9MMvU3M1ievVx/D9PnA8kLYUoen1zw9ifBE/i7VtJUhdCLwaAyT46GO+uv8XLx7Dk36k7I5w9fJYkWxvyoVVW6hQKwNNgwzkwmdwBvwJZLxt0klpIhRJLh960o4bGQtm8WyzPjrtxkYWaMrdz7WFV5wjaCKSmYKMBbNOcHRkxpejHaoZMjGC0tzyTYZ0WV26yEZQ6N3kDyYw82EzIxMBvtbTOZ4CSRAT00eBSrouDMImAR08F5HALuC/CM20xJ8MvuhZDNGugROQijimwaqxxGkZljK8hCWN+FT87XUK0CPhRtDWjBH8h1D9XHCv4BbxpEOHCGfINnSf38ACoI/qWyqa8AYADXgt3zPEuY+MQLAMo4Z15pVfjsneN8NqVH5+wjLC7V/mqfSSv0VuT5DFA6GvILBLuGMeyif/AyxEicgpgwCMgtOp5EbAtReGfC0jfqnP1Z2zjlRMRW+oGzteX6jl1wuG4vvPAlvQqJCngiXdhflbIiIcIZAhDTj2SN6I7qmCaArwUUy9ThgwaFjFUCc8dSwK9VkOb7TOzZ21fXeAcTTAVIE+ygQtywDNbYEGnYPgVxmtSZv+KVTQGDd5ynkBdfoiQlcc6BA97765rBnyyReLUxVvPYhheDvwcMPlSt+MH6s5WWhni3VXmu9sRlA95tpqEizHkYDsjfPlOzjmSiduBf2Ll2mP8XE79THtdWQ3BtO+H/ShMUHczefyBwjvDwc+b0D83BQnOALG8rGVP574RdV5tgwYwnNNCBjx+/1Pv6AX7OkAjTZVhkLfQ99I7pEoz1QTmeRM+d3kLwK2b2AXc4/cOCLr/Qb5tbv90LrbMkEdLxn2IuuYX6k1g2Nk6D5G3ELpMkz92WEcxl0kvZPEgfjR0PL4ZUjcPlkMUpEGASkYSSuhp4H/n3i+GE6jYYhCqzrg/PTpHBUOSeAsH14+xXG2jxR6mndrp2zUA9kv3RxShioyX+RPizwJ9b8+3oUVTritWVIGWkluTkqektphPSKgcNqXapY3PThEB8pLIUaWzzh7oDueZEmahNHMtMBJLl+zBO4JgPoBnrY+uM/cxiLkc22ALOyTvXWVy3MbBP4jpTkBYBwkiquA9NnqOfphIR21QWiZEh2DxvrGFoNmgxai5qL2KSqLhC9sM9Gp50c42JKnyqoRgw7jYPNkrlApzY8tyIp6o/Mz/IhEgwdtZOEMC/ZZeXl8gA9vkzO3yyGE0e40Fb8wGu4U5D4A/DiBnl20q+5w/GL+g483/Ejw3XPgMB9OexGK9TEd9BZ9z6+oMG7bpxs2kyLf1Qut4/dRTE6UWO0mFTLucAF/QPTTckHSD7INcTqqWw5StLaqW4ChC1wpbdsM5vVq06dPAMoPwDh9L2ywjwsSrp6a+gXifgb/bt7AxtnshOy0j3LS3cylB2D2E2+YGUxYDBmnaTuOK4vXjEvgkr+Usy287iWUmP2aWbRR2Dnow9c/EDyRvTaxBwY7mMBeSGuDE5MNWM9CaxAi5G7SG0qvcMlw2eLXpHBe9Go+57x8Dj51+YAHp33Fj2utFrYNC9ahyZXQbEHuP8G9idKl3gARUELiSLqI3dU4cS6FH4Y0UYQeHglhnFz51KcqWgmrBn+N7YPnoESwfldHR4c9wAtsdUOaDdhwdC4o+qXPsOploNO9PuTAIR7SQVDR1OQhXxEGHvQTPYdNCj5OCZBPfNfS3naMvWAQtPfLUdrnVzivLnnXDYcgDCbjMIQp2oTui6BUjt+CnNfWoD2zrRwz6EKqkWtCDPX23nM0X8lJB77uEUM3YYufU7QtCU5GGtnapBYKDgcep1gQ4/dNUvCC3paGN7ujZb++vaK7fdRbuvQPCVfpgupdi37Y57J5OBWuzqU2N7S300/FiVW59J5+mHU5py6HxHwr1uN7LdqPaiR5UCQo+D4Sz3mKx3qF8G/wBo8/1r</source>
  </file>
  <file path="Header/Consumer/AbstractConsumer.php" generated-path="Header.Consumer.AbstractConsumer.html" hash="d8a00977683cb7f3d532cf7a87933d88" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <namespace-alias name="HeaderPartFactory">\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</namespace-alias>
    <namespace-alias name="MimeLiteralPart">\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</namespace-alias>
    <namespace-alias name="SplFixedArray">\SplFixedArray</namespace-alias>
    <namespace-alias name="Iterator">\Iterator</namespace-alias>
    <namespace-alias name="NoRewindIterator">\NoRewindIterator</namespace-alias>
    <class final="false" abstract="true" namespace="ZBateson\MailMimeParser\Header\Consumer" line="24" package="MailMimeParser">
      <extends/>
      <name>AbstractConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</full_name>
      <docblock line="24">
        <description>Abstract base class for all header token consumers.</description>
        <long-description>Defines the base parser that loops over tokens, consuming them and creating
header parts.</long-description>
        <tag name="author" line="24" description="Zaahid Bateson"/>
        <tag name="package" line="24" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
    </class>
    <source>eJzNWm1z27gR/u5fgcx4TlIqy71+dM5pfYmv55k457HdzvRsVwORkMSGIlkCtJPWvt9+u4sXAiT0YuemV80kFklgsdh99tnFUt/9uVpWe4evX++x1+x6mUk2z3LB4G/Fa8XKOVNLwX7+nishy+L2nGf5ebYSF7yWomZVXf5LJGoCk3H+X/IsEYUUbKlUdXR4WFZwVTZ1IiZlvTg0T+XhTKYH5mICy7Pvr97D9MO9gq+ErHiydsHbHwVP4c+7spDNStRv9vYaufNo9+VK1Pew/JtdJsOVMt/x6w88UWX9ZfepePtDpkTNc7zWE6+q/Ifss0hP6pobWWc4BETrq4/lpXjIirS9a310MpOqBiXYjMO4JOcSXFbWjOc5W9K6TJWfRMESs1mJ3mH4772YZ4WQ5FGaXWkvqiVXLC/LSrLy3s6XYyMhKxY4Y8V4kbKkFlzBHRRnVkOcSIcA3qglaPMz58ssZcY+5FxuFdc6231Yn+z9d4/Bh3aJH5B1z2t2+0LfMrBiCjuxwuizEMqZhWWFVLxIhDafbGYHzmJm0iH9BYwrwDhI20+6+MHnL1I7jiqrNCmp6iZRVmg7lJUzDLm1OlY+SGP6nRWZynie/ccgwdphYge4jYAovmJdw3at0Bne35Sv0hqt502RqKws2HTqtj7ctvB4y1ojWkTDCj/7Cujt4G1HCjte41dviicUh/dM/BQ19KVQTV1oI0uImVwo2KE1N6EOH1E4/A7Gb2ZAwQyUUfDHOQBC5Mxo+Js7wKy130beMbu586ytmeEYlZgmQGgindKt4agdlM3Z8FUmpVDDVtCNnno3GnnLkcjeEBBfiAejy7C/pWAD7bJP7ltNbo1I3oSFs+IeSJWSKkIB8yo3BDqQ7J7nDQYiRH6HVKOggPhAGft6GmKo5g92Jt10E4yyz6SjmzuSyjE7oaqUJ9KAShFBqGMMU140Z7TvoVa1iwd0pdnEq+NjNhh0vWdN7aJQikv+8HecYUVu8NDNRo+8I3yxtCFbOtZBtcENAC/WVGSFPJNUBwUZQufMhyzPrTzFPwkUo+oyZ/O6XDHUuk03clk2eQpe19l5xVWyhCtf6sBaE9EJTE8j+yAw2+sm0K7T4tnMZeEI+ULYXTUzK89F3Xpe8/eH1QHWIE2R/RscCvsKKpBwDx+o2CDAEzsGph2iKLiddbLymAmVTCaTEZSoRUpFiJbmLesNRil1S8ErWA7uafusNeq2QOkbfVtGA6Oe5Lln1G5WmpcNaApMSDD36DAtu2SWNHUtCgWDzbehnu1FAY2Tnhcpv+nRB2/XeNh+ICUJDrAchhK4bKm/G6L40ZRcTMm0LaWOzd56pBxu/ebOT8FveiOf9uJXT+xhiUeVYSE+O0MQkcx5Ln1msDRCQ3bghNkXx1zIBcQ7UZrdgbJRpGSyyjN1TWU1sQtekkRPjOYFOnVpggcMwxAo5FGElUfKIEfLjmq0R1B+Db4jmeP3ShJ1dg/rtBES5fVe7aaNd2yTAZlwfTKIZA5t/jMwNZlviFVA95g1DA5mR0fI4yca1VqB0Wi0S8lneQbtUotFk8ORQHyuaiEl7lgKdAesh8gQSTaHpElUmDk/23iYMDiVe+6tuAJdcYnanXE8PPXQ6dKTtp8rOi1tOxARBuMYPkVO0PsRuVghA624qWaULmUWokALijS2XcqV7dZIayRjQjZpAJOmtInhCDZ8KRann9udJmDNmd6sZvUE9u4ypU6r8BwTMOVuIRNeCW1ZnrNkyZGxY2nIIl+HRR/QWoHn5E8C2ZVz77YUyl11ETHbitefkH61zyK51tkgSJ/AXmhXjPNBX6PBZLsVtqDX6LVb4usZpBvYdpcustdbkcZ3c5ubFGbZdsYLkpqnFBliCmMWos1scSXHbt6mqlQL1OXKsDNhC6mgM4QLjEj0Z0XVKMsB2p2aP6yoVMx5k0MwriodyJxcRRkm7jDCGg4vU90vsKLChAOlsFqaRIQ6/nTJBo+DNvbQ3BnkrAXw0hYAelLMTndAmtYaDXGh5/SBJt+BMuhSs5shKDgO8dNzqQ+8lU6IdgEQ1GntHR2dn52fTi9OLq/hv+vr08uPvYQ0+GU4YJO+sAmY6xY+k0d6bHSFu6NfBs9NOAYPhvD1ScRiw4Ci6wFMMSuhlmVqsNAyMsAMnRKzsclNNMzV4gYNQOxFSd02xanwhtyxqtQXnWIIVTTIDkAVTTBsK15qk/VdSaYfdNGkNQkYXdtkG5w6pYVdrgsos4yXu0IO6bBZgM1xONQuEd4++Da8vrg8/ev06uLD2fX0/emHs/Ppu5OL679dnrJH/9HHn6an5xfX/3BTd+IWOPsKrOPRXBWXyCw2Gs1xtf5kGsdikRUFPtHuQn51RQZWFuaM4gqYLd7U8v2ZdGfnpJvJKzwsk5FNlbbt3LrzXgWgtN2lz37/+12eFukOe3xn+xgyOP/y5xb3Vp6tFyN2gug/00bUm2srsWxRQM5Nx77B3E5WDRQ8JnaKJs+jXGTzFL1uoKq3RiLqdKwHugI1zbqDt1DR296lFaZJbXfv+F6xo2ZlmbP9TBqqp94QVusejLSAWmCNBM7VhZ0efdA5EYkJ5GSga12lpp0VX3YUcyU9ub5/CPNOqAwcimYPNe/5boeUS13fsvZBOfbMFG32tU+3dfoCr3pJNoQ/ERscSqRA8UTF1FgbDg7/eSv/sH9IGZ4mPG9FvasB5N9NLeD4XNc/D1Rd0xemgyfhui6bxTIs9AHgYW2fLEXyCSFrvGfIJDjkATCzxYJK3E530W8rEj1QVEvXtSx1P447eZ3p7THanaI1CRRlMBTfHkMgVHCZzXLR5ZKAAcdt8ekDKmAvKEI29u50mNozvO0VfHV745GW2yES7KGCNNfNha4y8X4GnV/o+cFb29Hb6ayzron3grMOxWV7sIml01j/zujC03uE+nX5UXwOJmHzqg5aMt3gadeMtmes4UIBT+uj8aY1T5SadFdw4zuBWDX9XCpeUw5pf5c6y2QGHT0on80jkzKKZC90qaYPg3vs+uiuQonFbWtfW+4j21DX8/8vrH7rcEKkQ4bMW2Cz4+Nj9if2zTdm3s0f7+jW4PZ23buodSgD04NsB7ZvRwb/d9vzR5xBQvzH8fpegF1W9JsOkxAssryMbkI0ZeZlC7bLbQ6Yw/D2QM9TV9xJrBPMa5YQfRvrtU5fgU54Zn39IxVf0pjN4EQKp0R3djQjTZRg9W3CZh49WoyxCVY+2J6BG9+mQ9y/KV3xbV6JL12zxRJIJxf3It9avq8Ff1gZtpS5DdYRvuyuMQ4lxuqoYTiCPT6yoUP+Pc+zdDhCVL8yCOudHvwAGfVfmtsx9GalVwFtqWT0T4jaM4N2odtlcCzxeDZ8ffBc1jU/itnY2MDaSTLKj6ZQwve8nRqeykfRr51cSeTjF7YDkzPlZsVQCgTcIhmXVGVlpQFCEuyqRloyZ/PN9RsQt141bbnfL8D0+ytnUGrjKem/SKA+TI32qRctPUTU3/iC62RO7T1q5BNxoEjkEt2l9jzsuU6P8k4sYz9n6hn0E0SDoN7L7qMjYzotjbil+IKMxfMdjLsmvFFdx6CEY27PiN3u0Ve8NVuPevuJvTTrUUm0atqaKLXbw9/dmPeoX8EgXQKxqwTdc7o57jbGwmzXfZO9vcrsvuxde0rz8GJ02ZhbL0QNqFrJFlceoGyK6vjRBNVMYB3e5lVUgw5tygWZDdQkz8CEz8mpEq+/+L9ssGGy8XT0fJju+yh8Ody3wtj3i7an8U4Hutad9NB67mnvV2bSCzY=</source>
  </file>
  <file path="Header/Consumer/GenericConsumer.php" generated-path="Header.Consumer.GenericConsumer.html" hash="843e888372e927f9f1ece1f864ee2daf" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="HeaderPart">\ZBateson\MailMimeParser\Header\Part\HeaderPart</namespace-alias>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="22" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</extends>
      <name>GenericConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</full_name>
      <docblock line="22">
        <description>A minimal implementation of AbstractConsumer defining a CommentConsumer and
QuotedStringConsumer as sub-consumers, and splitting tokens by whitespace.</description>
        <long-description>Note that GenericConsumer should be instantiated with a
MimeLiteralPartFactory instead of a HeaderPartFactory.  Sub-classes may not
need MimeLiteralPartFactory instances though.</long-description>
        <tag name="author" line="22" description="Zaahid Bateson"/>
        <tag name="package" line="22" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="31" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()</full_name>
        <docblock line="31">
          <description>Returns \ZBateson\MailMimeParser\Header\Consumer\CommentConsumer and
\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer as
sub-consumers.</description>
          <long-description></long-description>
          <tag name="return" line="31" description="the sub-consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="48" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()</full_name>
        <docblock line="48">
          <description>Returns the regex '\s+' (whitespace) pattern matcher as a token marker so
the header value is split along whitespace characters.  GenericConsumer
filters out whitespace-only tokens from getPartForToken.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="48" description="an array of regex pattern matchers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="60" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()</full_name>
        <docblock line="60">
          <description>GenericConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="param" line="60" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="60" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()</full_name>
        <docblock line="73">
          <description>GenericConsumer doesn't have start/end tokens, and so always returns
false.</description>
          <long-description></long-description>
          <tag name="codeCoverageIgnore" line="73" description=""/>
          <tag name="param" line="73" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="186" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()</full_name>
        <docblock line="186">
          <description>Overridden to combine all part values into a single string and return it
as an array with a single element.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="186" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="186" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\LiteralPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\LiteralPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.AbstractConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJztWE1z2zYQvetXIDMaW3Isq+cqduO4TZuZJG0jTw+xfYBISIJNARwAtK1p8t+7uwDBD1GW2iTTHqqDRBHAw2J338MCL37Il3lvfHTUY0fsciktm8tMMPjNuXFMz5lbCvbxFXfCanX9jsvsnVyJ37ixwrDc6FuRuBMYjONfZjIRygq2dC7/fjzWOfzThUnEiTaLcWi145lNR+HPCUzPXk1/hOHjnuIrYXOebJ3w+hfBU/i50MoWK2EmvV5hd/aGfy484+Nk7zGX+k4omCO455ytpJIrnjG5yjOxEspxJ7VCL53PrDM8caVlLBVz6KwWjLMLvcK+sYmrFOF+L7QT6dQZ6FW1WWaL2SgJ/+0x9mY2z6RziObQJMtma/awlM57q3T/e8CDcHHHfhZKGJlEVLvURZayGQRWWceVk7D4lD1It2Qch6ID3gKe4Rmu/DWsRJs19QZ/4AI5qzwYmk8Ym6KtGbcQVbbia6a0QzglAP0JTK4SGODAqsUSrWeUPbyAN4Z95HwpUxbiQ4lBU2ysSjw6oVK74fvenz0GH4oafo7YB+EKA2673jOvrjtD5rH2xtgS3xKnEeaT8m35+9KQyRtru7ohQjYGhzFj+gVKOqAk+H9eqITScyEcxKlEsIMhdfROwk+Y6iq+wE/fgRiMzspJpsLcA2NHZwDWcs5geLzvyC6X1IffTOjxM31vCyKu34iFeGSH1/b5IRtUTBiCajnIOAXJ6JKl5xP3pIFX5g65oEtABFpS0Ng9zwpSPWIa45kGrlW4LFlyjAJGirXzsIQD4cQOTBeuNnSkVbYuaTs3eoXhID5oQ/qyEfpLMKtrapCUTK6kA6ZB0o2ESnQKYUadBmSN7fAGPLs1mSw5HlKIK8aNAb4Csb0rW37bJ6fI+qmA+TkQe3taUZSejGyb2KkWVh06tuT3kOoOFjgGogcnBkXUEKQHvrZhmkirOc+s2PQAWrkKDoAMRaS2d2ZaZwI8Qwi71i/tTyolDww82pbVE9i/vHbMkwt9D0K8EG8WShvxDd0yRZO/hmMi3Q0yEzcgz4dqL+Mp5v+MW/iGuZHOOW5FKYPtwpGrFOwRJSARZVtm7FL1Vg3B+oiMT1+Kg6Y2cGpub3lb3gN05WvviPM0naJfBl3GHbOuqbZEZPAs9hidScoTQrbnc4cyzT59Ys8idLPLKwECJAbD4VMRfat1DvIIiUix6nvl8kJEyohvk8IY2FxYrq3EZR6DAIrkzmIKQHvcPbty4Rh7KHyG7g44w/rGi62lbAh0+Uo5ADrql/DlMKWVLSQJfuiDQ96oVDx+aaKRx75Bxm7JTh7y8lJ/CIsbxITzIffOO269PYjOqFqiD6pXNYMOqqV1tjcNHtYSv5/oAlx8yuh34A0KKYwf3FQH/VvoEC2YMPj/IoycsOfP+7d1REItKYLjCPKqf3szafSBZB6EOqlF4xp3K8K2p6BpSj9BAp3WwjvZ7BnboKMqsmyzy8wIftd8/bnXfOrm9EWdnKX8enLSAbKt1sBJX78hE2P1UiuvA3k3OPpeoG5Qa7kTwKTSHfqCcC4NSH5OftPwwjxIOORR7QVjUA3kvIQSEjt4+yRttlaQWnhF8wU2zvC/Tuzmtx002LzJ4hp7t7A2ZGV7W4rpD+1QAg0iZI2hxKMK6Nmph2IHB5F65ew3dAL5Awt92Muw5+Eh9YvT4DsqSzYY7ZnaIWnlqruXWxOmGpknexGrXf7U6FXzokQ2ULUVz9W00wWKbNvp6vHO/1HxAYWedwUWem24bQVG31MuGApnD295GSwoKTzqjjride2gRZTlsyww1oLSuAcBoF5YZKMspNzc8IlPY38Z4kfB+oJGWJkKPCRhNYEXKzYXiZyvEXTNEqiK8UqFVKMSMCPCURDL0sLBgdH/9aV3YA1GLuFZhsUzlj44u4y1N1TW0MeGjMKAQgbgpQrWu2s8vsUbKCzc/fUIGYjVlQGjbTfUqgCVnImwDokWrIMd36wqCtH/2zi7zhodXm1o0YaexFrwlF3V9uMntsf9CgQJHb6DwkA2CwO5ISN5syiQ24uCBr08pzprgLrp1G1za080Jkkhtu3uhNMUuG5dk3VBGzbhWsVI05JqrvE47rEGkgBz19O2LRUR7ykd+NXnegpsh8070auZVCB/IP/kaLrTQQmARtBDmAxVwh91q9MAUDsy11YXI/5qtBwlPNf+ExSpXale3Xwia3cxpa4BT1ME3EM7JMPdscaDKGinZa50sa+LH4InS0jrCABO9vncJkec+uS03A6q/bormcr7pWBQXt0xj86UeKj5aRDBh/Ee6nPvL3sswYo=</source>
  </file>
  <file path="Header/Consumer/DateConsumer.php" generated-path="Header.Consumer.DateConsumer.html" hash="2c8a53deb5b482186e5062cceda0800e" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="15" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>DateConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer</full_name>
      <docblock line="15">
        <description>Parses a date header into a Part\DatePart taking care of comment and quoted
parts as necessary.</description>
        <long-description>Note that GenericConsumer should be instantiated with a
MimeLiteralPartFactory instead of a HeaderPartFactory.  Sub-classes may not
need MimeLiteralPartFactory instances though.</long-description>
        <tag name="author" line="15" description="Zaahid Bateson"/>
        <tag name="package" line="15" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="24" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer::getPartForToken()</full_name>
        <docblock line="24">
          <description>Returns a Part\LiteralPart for the current token</description>
          <long-description></long-description>
          <tag name="param" line="24" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="24" description="" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="24" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\DateConsumer::processParts()</full_name>
        <docblock line="36">
          <description>Concatenates the passed parts and constructs a single Part\DatePart,
returning it in an array with a single element.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="36" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="36" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJylU8Fu2zAMvfsreDDQJGji+7KmRVt0O6zAsBU7NMmBlZlYrS15Eo0u2PLvo2Q7TQIExTAdIpnSIx/5Xj5e1kWdZKNRAiN4KLSHlS4JZK/RMdgVcEHweI1M3prFPeryXlf0FZ0nB7Wzz6R4IuCAvyq1IuMJCub6Q5bZWr5s4xRNrFtn3a3Pnnw+7j4mUh6uv98KPEsMVuRrVCcLLj4T5rLdWOObitw06anHew8IuQChiM9AG7YSkjte3Eo8HIDxRZs1KHQU2lO2qsgwoMnhZ2OZ8pAuNC/ZPBhS5D26za5HbLiwDh4RC51DxzPSVyV6D6FQzw/oF5PJPXwiQ06rPp78TkBW5B7WCL4RN874nu0XzeSwjIRXUi2IoBrnAlO2L2R6XL9fCWOswLMLzaUHb7q7J2tLSLXvcu9uXSwNi3dmHnm153Ds4FncxQcsPqAcVo1RrK2BNXF4dmfdQ+AyaCmd7xEYRmg7ibA6HimLC8ezoMAdKrZuM54Zet2bSJdrOI3Qbfw9nqdMWkk7JrQUp1eLNsKvE1bEVqIFu0aFT/AyNbH9gVPO+1wtsTBXzeIpQQM6hxt41Vy8gamk4KTJCWn+cb7zJaSR7H/qNF/+iWTf00tCwekB4gdte239Y5lSmdoPLBuCCzg7m+7iYlNCVcAg3f154mm4hz3ETy7aF+OZmCWGBsO3fNtjY8xPOKPXa7DLPFz21tgmfwHrj4/f</source>
  </file>
  <file path="Header/Consumer/QuotedStringConsumer.php" generated-path="Header.Consumer.QuotedStringConsumer.html" hash="6d4109783043b9daad389439e1e4f2e9" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="26" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>QuotedStringConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer</full_name>
      <docblock line="26">
        <description>Represents a quoted part of a header value starting at a single quote, and
ending at the next single quote.</description>
        <long-description>A quoted-pair part in a header is a literal.  There are no sub-consumers for
it and a Part\LiteralPart is returned.

Newline characters (CR and LF) are stripped entirely from the quoted part.
This is based on the example at:

https://tools.ietf.org/html/rfc822#section-3.1.1

And https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html in section 7.2.1
splitting the boundary.</long-description>
        <tag name="author" line="26" description="Zaahid Bateson"/>
        <tag name="package" line="26" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="34" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::getSubConsumers()</full_name>
        <docblock line="34">
          <description>QuotedStringConsumer doesn't have any sub-consumers.  This method returns
an empty array.</description>
          <long-description></long-description>
          <tag name="return" line="34" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getSubConsumers()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getSubConsumers"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="45" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::isStartToken()</full_name>
        <docblock line="45">
          <description>Returns true if the token is a double quote.</description>
          <long-description></long-description>
          <tag name="param" line="45" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="return" line="45" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isStartToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isStartToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::isEndToken()</full_name>
        <docblock line="56">
          <description>Returns true if the token is a double quote.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\type" variable="$token">
            <type>\ZBateson\MailMimeParser\Header\Consumer\type</type>
          </tag>
          <tag name="return" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\type">
            <type>\ZBateson\MailMimeParser\Header\Consumer\type</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isEndToken()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_isEndToken"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="66" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::getTokenSeparators()</full_name>
        <docblock line="66">
          <description>Returns a single regex pattern for a double quote.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="66" description="" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="79" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\QuotedStringConsumer::getPartForToken()</full_name>
        <docblock line="79">
          <description>Constructs a Part\LiteralPart and returns it.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;not used - everything in a quoted string is a&#10;literal&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="79" description="" type="\ZBateson\MailMimeParser\Header\Part\LiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\LiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJy1VV1P2zAUfe+vuGJIBUQTtUxigsH42NgeYGKUJyhCbnLbeEvszL6hVBP/fdeOU0q3wvaA1dSt7ftx7jm+ef+hzMpWvLHRgg24zKSFkcwReC6FIdAjoAzh6kgQWq0GZ0LmZ7LAc2EsGiiN/o4JRWzs7A9ymaCyCBlRuRPHuuR/ujIJRtqM47Br46FNO+FPxOHhqP+RzeOWEgXaUiRLAw6+oEh5OtbKVgWa3VaT+gWWBi0qsiDgZ6UJ0xkCAZk3gzuRVwiWeF2qMQjiLcu/GLA32QShUucNVRoOOPQK7+nJOYcX3HMYQnVKIU0dT6rHeNIlk0tCI/IIuLxoEAQ/SoOthp0kwOCia+P8SXIZsBHDpcFpbXnu3VowSJVRmDbV/oqTXCqEJBNGJOTcrB1feAenJ+s+jiUjy5JLwYWRBvMpjIwuPKi5GkUz7vkzFJaXtfKH8F4UJaMWtBOCOmYtU0ta5zaSSCNPbUZFHptR8q7Xe2NZEVKrzlbUjbrB7JCTakwnk0k02fJm50aTTtiTs+1uve3G27e927MqJ+kTc25dRYNL2I563iXYksvqSXRpDnWlUmGmMx2KijJt4EqITKYQtOQlluTCWvjmwfe5OmrcaInBEvNu4TMqNDJp1lu/WsDD68yNjb9bpxqtahNk4o7rpaZPCfbsc3UL5MTSQKVtHAoFWJQ0Zc6McCjq5WY+qI/Xu2Ex9nNZDfkewahSdX3GSP1q2ORk19b9qRqAG8HR9c2uX3rw34vwLurkgAxfFlk3ANI/UNV6TjUHfbwIC6kybaLwumNuVr3ZIowhS+cpClYBE8yymwGRtu9u6aWzX6vdLMESdmFvbw/aK+31V0ZG0xKX4HJbL+P6pNJXQjXrZQbHeM83m7gnKNdaXsQWota0Xd+8hIJl5jH00RWF9DNKaw9W2s+qzYmV+Uh84/6j7blmFi4LN8f/k1u959QGq9IGr9x6CSrX4jqAd2imlDlT37VDSwzenCQaX2GEVr5YtsELb6tFVP9QXnfsRJt5pWzOoVhS7VUGYzv7rnWe8BtBm2lnX+FkLnSjuoaRh9Zv/Hl3aQ==</source>
  </file>
  <file path="Header/Consumer/ParameterConsumer.php" generated-path="Header.Consumer.ParameterConsumer.html" hash="1134a1bf6cbb73fd23eeaddd7bd4d04a" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="Token">\ZBateson\MailMimeParser\Header\Part\Token</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header\Consumer" line="23" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</extends>
      <name>ParameterConsumer</name>
      <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer</full_name>
      <docblock line="23">
        <description>Reads headers separated into parameters consisting of a main value, and
subsequent name/value pairs - for example text/html; charset=utf-8.</description>
        <long-description>A ParameterConsumer's parts are separated by a semi-colon.  Its name/value
pairs are separated with an '=' character.

Parts may be mime-encoded entities.  Additionally, a value can be quoted and
comments may exist.</long-description>
        <tag name="author" line="23" description="Zaahid Bateson"/>
        <tag name="package" line="23" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>$consumerService</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::consumerService</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;used to&#10;get consumer instances for sub-consumers&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="36" package="MailMimeParser">
        <name>$partFactory</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::partFactory</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;used to construct&#10;HeaderPart objects&lt;/p&gt;" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="30" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::getTokenSeparators()</full_name>
        <docblock line="30">
          <description>Returns semi-colon and equals char as token separators.</description>
          <long-description>The whitespace character delimits mime-encoded parts for decoding.</long-description>
          <tag name="return" line="30" description="" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::getTokenSeparators()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_getTokenSeparators"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::getPartForToken()</full_name>
        <docblock line="44">
          <description>Creates and returns a \ZBateson\MailMimeParser\Header\Part\Token out of
the passed string token and returns it, unless the token is an escaped
literal, in which case a LiteralPart is returned.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="44" description="" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="61" package="MailMimeParser">
        <name>getPartFor</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::getPartFor()</full_name>
        <docblock line="61">
          <description>Instantiates and returns either a MimeLiteralPart if $strName is empty,
or a ParameterPart otherwise.</description>
          <long-description></long-description>
          <tag name="param" line="61" description="" type="string" variable="$strName">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="" type="string" variable="$strValue">
            <type>string</type>
          </tag>
          <tag name="return" line="61" description="\ZBateson\MailMimeParser\Header\Part\ParameterPart" type="\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart">
            <type>\ZBateson\MailMimeParser\Header\Part\MimeLiteralPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$strName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$strValue</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="84" package="MailMimeParser">
        <name>processTokenPart</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::processTokenPart()</full_name>
        <docblock line="84">
          <description>Handles parameter separator tokens during final processing.</description>
          <long-description>If the end token is found, a new HeaderPart is assigned to the passed
$combined array.  If an '=' character is found, $strCat is assigned to
$strName and emptied.

Returns true if the token was processed, and false otherwise.</long-description>
          <tag name="param" line="84" description="" type="string" variable="$tokenValue">
            <type>string</type>
          </tag>
          <tag name="param" line="84" description="" type="array" variable="$combined">
            <type>array</type>
          </tag>
          <tag name="param" line="84" description="" type="string" variable="$strName">
            <type>string</type>
          </tag>
          <tag name="param" line="84" description="" type="string" variable="$strCat">
            <type>string</type>
          </tag>
          <tag name="return" line="84" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokenValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$combined</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$strCat</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="106" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\ParameterConsumer::processParts()</full_name>
        <docblock line="106">
          <description>Post processing involves creating Part\LiteralPart or Part\ParameterPart
objects out of created Token and LiteralParts.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="106" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="106" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" refers="\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::processParts()" link="/classes/ZBateson.MailMimeParser.Header.Consumer.GenericConsumer.html#method_processParts"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="88" package="MailMimeParser">
        <name>getSubConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getSubConsumers()</full_name>
        <docblock line="88">
          <description>Called during construction to set up the list of sub-consumers that will
take control from this consumer should a token match a sub-consumer's
start token.</description>
          <long-description></long-description>
          <tag name="return" line="88" description="the array of consumers" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="140" package="MailMimeParser">
        <name>getTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSeparators()</full_name>
        <docblock line="140">
          <description>Returns an array of regular expression separators specific to this
consumer.  The returned patterns are used to split the header value into
tokens for the consumer to parse into parts.</description>
          <long-description>Each array element makes part of a generated regular expression that is
used in a call to preg_split().  RegEx patterns can be used, and care
should be taken to escape special characters.</long-description>
          <tag name="return" line="140" description="the array of patterns" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="205" package="MailMimeParser">
        <name>isEndToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isEndToken()</full_name>
        <docblock line="205">
          <description>Returns true if the passed string token marks the end marker for the
current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="197" package="MailMimeParser">
        <name>isStartToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::isStartToken()</full_name>
        <docblock line="197">
          <description>Returns true if the passed string token marks the beginning marker for
the current consumer.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;the current token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="86" package="MailMimeParser">
        <name>shouldAddSpace</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::shouldAddSpace()</full_name>
        <docblock line="86">
          <description>Returns true if a space should be added based on the passed last and next
parts.</description>
          <long-description></long-description>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$nextPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="86" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="86" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$nextPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="101" package="MailMimeParser">
        <name>addSpaceToRetParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaceToRetParts()</full_name>
        <docblock line="101">
          <description>Loops over the $parts array from the current position, checks if the
space should be added, then adds it to $retParts and returns.</description>
          <long-description></long-description>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="101" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="param" line="101" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$lastPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lastPart</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="131" package="MailMimeParser">
        <name>addSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::addSpaces()</full_name>
        <docblock line="131">
          <description>Checks if the passed space part should be added to the returned parts and
adds it.</description>
          <long-description>Never adds a space if it's the first part, otherwise only add it if
either part isn't set to ignore the space</long-description>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$retParts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="param" line="131" description="" type="integer" variable="$curIndex">
            <type>integer</type>
          </tag>
          <tag name="param" line="131" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$spacePart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$retParts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$curIndex</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$spacePart</name>
          <default>null</default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="145" package="MailMimeParser">
        <name>isSpaceToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::isSpaceToken()</full_name>
        <docblock line="145">
          <description>Returns true if the passed HeaderPart is a Token instance and a space.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart" variable="$part">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
          <tag name="return" line="145" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$part</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="161" package="MailMimeParser">
        <name>filterIgnoredSpaces</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer::filterIgnoredSpaces()</full_name>
        <docblock line="161">
          <description>Filters out ignorable spaces between parts in the passed array.</description>
          <long-description>Spaces with parts on either side of it that specify they can be ignored
are filtered out.  filterIgnoredSpaces is called from within
processParts, and if needed by an implementing class that overrides
processParts, must be specifically called.</long-description>
          <tag name="param" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="161" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\GenericConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="328" package="MailMimeParser">
        <name>processParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::processParts()</full_name>
        <docblock line="328">
          <description>Performs any final processing on the array of parsed parts before
returning it to the consumer client.</description>
          <long-description>The default implementation simply returns the passed array.</long-description>
          <tag name="param" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="$parts">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
          <tag name="return" line="328" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parts</name>
          <default></default>
          <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="44" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__construct()</full_name>
        <docblock line="44">
          <description>Initializes the instance.</description>
          <long-description></long-description>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="44" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="56" package="MailMimeParser">
        <name>getInstance</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getInstance()</full_name>
        <docblock line="56">
          <description>Returns the singleton instance for the class.</description>
          <long-description></long-description>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="56" description="" type="\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory" variable="$partFactory">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$partFactory</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Part\HeaderPartFactory</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header\Consumer" line="73" package="MailMimeParser">
        <name>__invoke</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::__invoke()</full_name>
        <docblock line="73">
          <description>Invokes parsing of a header's value into header parts.</description>
          <long-description></long-description>
          <tag name="param" line="73" description="&lt;p&gt;the raw header value&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="73" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="98" package="MailMimeParser">
        <name>getAllConsumers</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllConsumers()</full_name>
        <docblock line="98">
          <description>Returns this consumer and all unique sub consumers.</description>
          <long-description>Loops into the sub-consumers (and their sub-consumers, etc...) finding
all unique consumers, and returns them in an array.</long-description>
          <tag name="return" line="98" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\AbstractConsumer&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ZBateson\MailMimeParser\Header\Consumer" line="123" package="MailMimeParser">
        <name>parseRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseRawValue()</full_name>
        <docblock line="123">
          <description>Called by __invoke to parse the raw header value into header parts.</description>
          <long-description>Calls splitTokens to split the value into token part strings, then calls
parseParts to parse the returned array.</long-description>
          <tag name="param" line="123" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="the array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="148" package="MailMimeParser">
        <name>getAllTokenSeparators</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getAllTokenSeparators()</full_name>
        <docblock line="148">
          <description>Returns a list of regular expression markers for this consumer and all
sub-consumers by calling 'getTokenSeparators'.</description>
          <long-description>.</long-description>
          <tag name="return" line="148" description="an array of regular expression markers" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="165" package="MailMimeParser">
        <name>getTokenSplitPattern</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenSplitPattern()</full_name>
        <docblock line="165">
          <description>Returns a regex pattern used to split the input header string.  The
default implementation calls getAllTokenSeparators and implodes the
returned array with the regex OR '|' character as its glue.</description>
          <long-description></long-description>
          <tag name="return" line="165" description="the regex pattern" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="181" package="MailMimeParser">
        <name>splitRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::splitRawValue()</full_name>
        <docblock line="181">
          <description>Returns an array of split tokens from the input string.</description>
          <long-description>The method calls preg_split using getTokenSplitPattern.  The split
array will not contain any empty parts and will contain the markers.</long-description>
          <tag name="param" line="181" description="&lt;p&gt;the raw string&lt;/p&gt;" type="string" variable="$rawValue">
            <type>string</type>
          </tag>
          <tag name="return" line="181" description="the array of tokens" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rawValue</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="221" package="MailMimeParser">
        <name>getPartForToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getPartForToken()</full_name>
        <docblock line="221">
          <description>Constructs and returns a \ZBateson\MailMimeParser\Header\Part\HeaderPart
for the passed string token.  If the token should be ignored, the
function must return null.</description>
          <long-description>The default created part uses the instance's partFactory-&gt;newInstance
method.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;the token&lt;/p&gt;" type="string" variable="$token">
            <type>string</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;set to true if the token represents a literal -&#10;e.g. an escaped token&lt;/p&gt;" type="boolean" variable="$isLiteral">
            <type>boolean</type>
          </tag>
          <tag name="return" line="221" description="the constructed&#10;        header part or null if the token should be ignored" type="\ZBateson\MailMimeParser\Header\Part\HeaderPart">
            <type>\ZBateson\MailMimeParser\Header\Part\HeaderPart</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$token</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isLiteral</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="240" package="MailMimeParser">
        <name>getConsumerTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getConsumerTokenParts()</full_name>
        <docblock line="240">
          <description>Iterates through this consumer's sub-consumers checking if the current
token triggers a sub-consumer's start token and passes control onto that
sub-consumer's parseTokenIntoParts.  If no sub-consumer is responsible
for the current token, calls getPartForToken and returns it in an array.</description>
          <long-description></long-description>
          <tag name="param" line="240" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="240" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="263" package="MailMimeParser">
        <name>getTokenParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::getTokenParts()</full_name>
        <docblock line="263">
          <description>Returns an array of \ZBateson\MailMimeParser\Header\Part\HeaderPart for
the current token on the iterator.</description>
          <long-description>If the current token is a start token from a sub-consumer, the sub-
consumer's parseTokensIntoParts method is called.</long-description>
          <tag name="param" line="263" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="263" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;|array">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="283" package="MailMimeParser">
        <name>advanceToNextToken</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::advanceToNextToken()</full_name>
        <docblock line="283">
          <description>Determines if the iterator should be advanced to the next token after
reading tokens or finding a start token.</description>
          <long-description>The default implementation will advance for a start token, but not
advance on the end token of the current consumer, allowing the end token
to be passed up to a higher-level consumer.</long-description>
          <tag name="param" line="283" description="" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="param" line="283" description="" type="boolean" variable="$isStartToken">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isStartToken</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header\Consumer" line="309" package="MailMimeParser">
        <name>parseTokensIntoParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer::parseTokensIntoParts()</full_name>
        <docblock line="309">
          <description>Iterates over the passed token Iterator and returns an array of parsed
\ZBateson\MailMimeParser\Header\Part\HeaderPart objects.</description>
          <long-description>The method checks each token to see if the token matches a sub-consumer's
start token, or if it matches the current consumer's end token to stop
processing.

If a sub-consumer's start token is matched, the sub-consumer is invoked
and its returned parts are merged to the current consumer's header parts.

After all tokens are read and an array of Header\Parts are constructed,
the array is passed to AbstractConsumer::processParts for any final
processing.</long-description>
          <tag name="param" line="309" description="&lt;p&gt;an iterator over a string of tokens&lt;/p&gt;" type="\Iterator" variable="$tokens">
            <type>\Iterator</type>
          </tag>
          <tag name="return" line="309" description="an array of parsed&#10;        parts" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tokens</name>
          <default></default>
          <type>\Iterator</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</inherited_from>
      </method>
    </class>
    <source>eJylV0tz2zYQvutX7EFjKR49rp2qSp24k8YzTcdTe3KI7QNELk20JMAQoG1N4v/eXQB8iJT8SDhjkyKw7+/bBX/7vUiL0fL4eATHcJlKA4nMEOheiNKCTsCmCF/eC4tGq+tPQmafZI7nojRYQlHqfzGyCxJm+ZNMRqgMQmpt8etyqQv6pasywoUub5dh1Sw3Jp6HHwsyD+8v/iDx5UiJHE0hooMGrz+iiOl2qpWpcixXo1Flnt1Nv+z1pf4PFe0Pof5DSwZSt8GAQYqWdMQgldUcOnlieSUiS9JYqW45FwJyIRXciazCGQgVsypTbQx+rVBZ4ACWbpV0SBKfQ6JLwAeRF5RViw92mdo8W0GUsot2Xdlk/gvnD/jvHZzXpusQJ74SBkSJHT83W3LGYC7nkc60WgCc0Z7WPmvzLuzK3UubkuMwWU+cDyIiW439c2cpF1vYIOSUyDmqSMckR9FJK9GQoXdxTI9aiSzbUhJ8NiAipST0tdJsJqQm0nlOkl4lPlAiG1MnorIp5eaLEKmMIVTQwSDKhDHDTJACi4qq9icqLGVUvx99GwFdrrB8cXFtVSrTyQ87BFQkkRkXNggDlhFRp0aXZlGL1/eT0ukBY0uq/9VNeL90d4K+JehTrEmlIs4H3KJ1KLtoVE7fuL3eQb6CxqvJajLjGtys3NKj+98P47REzorzvQwhCbh+MdpBV8zgWh0TuaDMkss+opCBrnppZ1CpDCn/vN1vkOwCoIlEgXGtLZNUGpHNiDFwn8ooJQQQFQX85RfYDZb0mjEeZtexrHZl7Ez11jZaZzCWJqjs1+VFmfDP/PiC8vG2D7p02Zt6l2YdB/rVlAlMO6udlU6tx5a66vwtk/gDsU2X2/lbhfedNAVLb1aN+GMfMAeUdB198xSUzpSxgig8wBNSPyBqCeD07ZQugTHV5m/iIJcR88JuZ7U6zRINQd1+zXruJXX0ZwodlB5e/ez71w/UuhfD91pJfb1IyU5YPczIO5Lfh5hpHdasDWEvWuqUrtdrmExeB5leeNPW0uuRsxPlXu+fgtNHghA1iXZQtm3U9wwDceUKmkiaE8y2iHoKvRig48yfMKixt90m0ZWKebSQo9AS2DUi0nJL7YQ2dxparWxMA2cjeVmUpdjyVEwG065jgaM9FX3Fjba6WG54EAHknjZWzxpb0hCUSadt3tOMCYFj7E4LkND8wZdTxenZpYPf4KJro/1RplHofZ5xy0WhnsZ9iMp1n04D+xyORc65o8a7GT03+DoKdveSo9Xi+bEaEKRRenUD6xrbB2nIdla78g3/iH3DJcbCcCWkhivcIRog1XKv2+uh263ZYObnbPdJ7nD1FGHPtbEdFtLQvtPZHTE44jMGv3G9rzsAiMoH+yHoDZ/7TThheC3EncvmQNHRtOdg5ZH4yvlNJR+7o/BPngOubr47iD53HgjpciFMA+Oc/T52266zhqubtkz7q3oAgl51F9b7hz2TopWirwsUdPaajsNHgvGKBgAsAj79suOMezPtEcQB2n36SXdkiJDK68t6dNR4NuB/EbjfIf2Qin2n+KLvK4JfF9y7AO/mcbGu43h+3tFXLAHw7FZRguIL/qY008a5ZrY9jv4Hccea2g==</source>
  </file>
  <file path="Header/GenericHeader.php" generated-path="Header.GenericHeader.html" hash="bbb6cc0800b88818cea59bfcb7397a52" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <namespace-alias name="ConsumerService">\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</namespace-alias>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser\Header" line="19" package="MailMimeParser">
      <extends>\ZBateson\MailMimeParser\Header\AbstractHeader</extends>
      <name>GenericHeader</name>
      <full_name>\ZBateson\MailMimeParser\Header\GenericHeader</full_name>
      <docblock line="19">
        <description>Reads the header using GenericConsumer.</description>
        <long-description>Header's may contain mime-encoded parts, quoted parts, and comments.
GenericConsumer returns a single part value.</long-description>
        <tag name="author" line="19" description="Zaahid Bateson"/>
        <tag name="package" line="19" description="MailMimeParser"/>
        <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader" refers="\ZBateson\MailMimeParser\Header\AbstractHeader" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="30" package="MailMimeParser">
        <name>$name</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::name</full_name>
        <default></default>
        <docblock line="30">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="30" description="&lt;p&gt;the name of the header&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="36" package="MailMimeParser">
        <name>$parts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::parts</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="36" description="&lt;p&gt;the&#10;header's parts (as returned from the consumer)&lt;/p&gt;" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;" variable="">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="41" package="MailMimeParser">
        <name>$rawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::rawValue</full_name>
        <default></default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;the raw value&lt;/p&gt;" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="27" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\GenericHeader::getConsumer()</full_name>
        <docblock line="27">
          <description>Returns a GenericConsumer.</description>
          <long-description></long-description>
          <tag name="param" line="27" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="27" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
          <tag name="inherited_from" description="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" refers="\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()" link="/classes/ZBateson.MailMimeParser.Header.AbstractHeader.html#method_getConsumer"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="51" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__construct()</full_name>
        <docblock line="51">
          <description>Assigns the header's name and raw value, then calls getConsumer and
parseHeaderValue to extract a parsed value.</description>
          <long-description></long-description>
          <tag name="param" line="51" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="51" description="" type="string" variable="$value">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="66" package="MailMimeParser">
        <name>getConsumer</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getConsumer()</full_name>
        <docblock line="66">
          <description>Returns the header's Consumer</description>
          <long-description></long-description>
          <tag name="param" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\ConsumerService" variable="$consumerService">
            <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
          </tag>
          <tag name="return" line="66" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumerService</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\ConsumerService</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ZBateson\MailMimeParser\Header" line="75" package="MailMimeParser">
        <name>setParseHeaderValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::setParseHeaderValue()</full_name>
        <docblock line="75">
          <description>Calls the consumer and assigns the parsed parts to member variables.</description>
          <long-description>The default implementation assigns the returned value to $this-&gt;part.</long-description>
          <tag name="param" line="75" description="" type="\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer" variable="$consumer">
            <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$consumer</name>
          <default></default>
          <type>\ZBateson\MailMimeParser\Header\Consumer\AbstractConsumer</type>
        </argument>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="85" package="MailMimeParser">
        <name>getParts</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getParts()</full_name>
        <docblock line="85">
          <description>Returns an array of HeaderPart objects associated with this header.</description>
          <long-description></long-description>
          <tag name="return" line="85" description="" type="array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;">
            <type>array&lt;mixed,\ZBateson\MailMimeParser\Header\Part\HeaderPart&gt;</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="95" package="MailMimeParser">
        <name>getValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getValue()</full_name>
        <docblock line="95">
          <description>Returns the parsed value of the header -- calls getValue on $this-&gt;part</description>
          <long-description></long-description>
          <tag name="return" line="95" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="108" package="MailMimeParser">
        <name>getRawValue</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getRawValue()</full_name>
        <docblock line="108">
          <description>Returns the raw value of the header prior to any processing.</description>
          <long-description></long-description>
          <tag name="return" line="108" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="118" package="MailMimeParser">
        <name>getName</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::getName()</full_name>
        <docblock line="118">
          <description>Returns the name of the header.</description>
          <long-description></long-description>
          <tag name="return" line="118" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser\Header" line="133" package="MailMimeParser">
        <name>__toString</name>
        <full_name>\ZBateson\MailMimeParser\Header\AbstractHeader::__toString()</full_name>
        <docblock line="133">
          <description>Returns the string representation of the header.  At the moment this is
just in the form of:</description>
          <long-description>&lt;HeaderName&gt;: &lt;RawValue&gt;

No additional processing is performed (for instance to wrap long lines.)</long-description>
          <tag name="return" line="133" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <inherited_from>\ZBateson\MailMimeParser\Header\AbstractHeader</inherited_from>
      </method>
    </class>
    <source>eJyNUk1LxDAQvedXzEHQXdztXUXXD9CLIOpJ9jKms9tIk9RMsijif3eatqtWRAMlnfS9N/Nec3TSVI0qplMFU7ivDMPK1ASyNxgi+BXEiuDhDCOxd8trNPW1sXSDgSlAE/wT6TgXcstf1EaTY4IqxuagKHwjlU9B09yHddF/5eKRy1lfzKU9nN1dCL1QDi1xg/rXhssrwpLCoVKJ/wItz73jZL+83FHYSFdh935vBcjZYJUpkNi4NVySo2D0QGvdQft0ursMFl9BexfROLDSd0ZO+5LKnBnvw3Py8bNCVwraWnKRs9ZIHwLFFBwDQtte0s/Rb7BOtE0WU6x8gAfEypTQG8+h6RqZB81uRKCXSE6snT5yDKhjd6zeFMjK5tvVBjB0/um5Qwz7QmZCC6MoYUd/P9jCO0+w/O8/GiYdDnqhIu9yzaJcM4l0lZyOxjtY0xa699dQkyzSmW9XP9sYNjsW0VEOe5PDTHtX7+oDINMQ4A==</source>
  </file>
  <file path="MailMimeParser.php" generated-path="MailMimeParser.html" hash="580df03b4b3ea785aeae5eb6c5bde971" package="MailMimeParser">
    <docblock line="0">
      <description>This file is part of the ZBateson\MailMimeParser project.</description>
      <long-description></long-description>
      <tag name="license" line="0" description="BSD" link="http://opensource.org/licenses/bsd-license.php"/>
      <tag name="package" line="0" description="MailMimeParser"/>
    </docblock>
    <class final="false" abstract="false" namespace="ZBateson\MailMimeParser" line="21" package="MailMimeParser">
      <extends/>
      <name>MailMimeParser</name>
      <full_name>\ZBateson\MailMimeParser\MailMimeParser</full_name>
      <docblock line="21">
        <description>Parses a MIME message into a \ZBateson\MailMimeParser\Message object.</description>
        <long-description>To invoke, call parse on a MailMimeParser object.

$handle = fopen('path/to/file.txt');
$parser = new MailMimeParser();
$parser-&gt;parse($handle);
fclose($handle);</long-description>
        <tag name="author" line="21" description="Zaahid Bateson"/>
        <tag name="package" line="21" description="MailMimeParser"/>
      </docblock>
      <property static="false" visibility="protected" namespace="ZBateson\MailMimeParser" line="26" package="MailMimeParser">
        <name>$di</name>
        <full_name>\ZBateson\MailMimeParser\MailMimeParser::di</full_name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="26" description="&lt;p&gt;dependency injection container&lt;/p&gt;" type="\ZBateson\MailMimeParser\SimpleDi" variable="">
            <type>\ZBateson\MailMimeParser\SimpleDi</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="31" package="MailMimeParser">
        <name>__construct</name>
        <full_name>\ZBateson\MailMimeParser\MailMimeParser::__construct()</full_name>
        <docblock line="31">
          <description>Sets up the parser.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ZBateson\MailMimeParser" line="49" package="MailMimeParser">
        <name>parse</name>
        <full_name>\ZBateson\MailMimeParser\MailMimeParser::parse()</full_name>
        <docblock line="49">
          <description>Parses the passed stream handle into a ZBateson\MailMimeParser\Message
object and returns it.</description>
          <long-description>Internally, the message is first copied to a temp stream (with php://temp
which may keep it in memory or write it to disk) and its stream is used.
That way if the message is too large to hold in memory it can be written
to a temporary file if need be.</long-description>
          <tag name="param" line="49" description="&lt;p&gt;the resource handle to the input&#10;       stream of the mime message, or a string containing a mime message&lt;/p&gt;" type="resource|string" variable="$handleOrString">
            <type>resource</type>
            <type>string</type>
          </tag>
          <tag name="return" line="49" description="" type="\ZBateson\MailMimeParser\Message">
            <type>\ZBateson\MailMimeParser\Message</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$handleOrString</name>
          <default></default>
          <type>resource|string</type>
        </argument>
      </method>
    </class>
    <source>eJyFVE1v2zAMvedX8BAgTpfE93btiqID1kOwAelpKBAotlxrtSVBopsFW//7qC/HcdtVQCBLER8fyUd+/qJrPcnPziZwBve1sFCJhgPtmhkEVQHWHH7eMORWyYc1E81atPwHM5Yb0Eb94gWuyNjZXzei4NJyqBH1eZ4rTSfVmYKvlHnM478239lyGQ8rcg83m1syzyeStdxqVrzr8GKSqPqzBQbru/VXIDPLHom2REV3D++YP6zjO7Ub0r5XZPisnvgCCtY0LnKKQUmHfhrv0Q7cb1ozWVK2LqFyoWYzzbDOUeUuhyv8jbP5hX+ng/klSL4fYWYnT5ZXfs8icvivKho1vvPpZh3WysBPxmpRQozZZ7JomLUjT5M/E6DlE+gWATwz836yNqLVDb8VUHIKruSyOFCeXAIE5aZQEpmQBBvAcr+TIJAe8BKmpbjwV2OnG44WOu11FYJenUJ0O9IGVJ0MjrZbcmXRdAVmc/8ixOHWFEmxy6tSUGoT3fNzK+Rjw1FJn1taL28SiRIKPKwlzuSFsxZiVaOYPtBSQgvSADIFw7Ez0oLAFBmk/U4iN5JEdlh4x71wXd8Zi5RWLYiJ94y81YlTthdYAzULtZW7T4D7WhQ1tOwAT5xrckm0CbVV5gAkjb0RyN0tAZbCPs09QUEViLjkuKPQe6L3NUPYE5yoxgRRKWiYoQOB1aopB67IQ8Ek7Lj3iFwmvD4QZRi9C8Oloj6gIHf8VX6uSRHEyvAwNv4SSypmarTvZhPOjll6k8pFnty1kLrDBBdXjDUOs5ZqmOJauCQxiG6ipt0nO3nW0wul/XDA/FfQJx2eQhorO89J3JS2b1GLNOoQWVEHbUx7+q6cfjz4arjCljw0izKDNjkiHWdVr6XZAmbm0yw2i1tUoUzYbUjLK6rzAU+3Kq+ybOBlMa7YAPsFeEPj9RQiVIg6XR+2qLbhOHa8GAYyROy/DN8LWWZvPztO4X5sLK9oIMeaDcZxMkjiv3w1nt90EMWRzNLseZn8A9o6Tnk=</source>
  </file>
  <package name="MailMimeParser" full_name="MailMimeParser"/>
  <package name="global" full_name="global"/>
  <namespace name="ZBateson" full_name="ZBateson">
    <namespace name="MailMimeParser" full_name="ZBateson\MailMimeParser">
      <namespace name="Header" full_name="ZBateson\MailMimeParser\Header">
        <namespace name="Consumer" full_name="ZBateson\MailMimeParser\Header\Consumer"/>
        <namespace name="Part" full_name="ZBateson\MailMimeParser\Header\Part"/>
      </namespace>
      <namespace name="Message" full_name="ZBateson\MailMimeParser\Message">
        <namespace name="Writer" full_name="ZBateson\MailMimeParser\Message\Writer"/>
      </namespace>
      <namespace name="Stream" full_name="ZBateson\MailMimeParser\Stream">
        <namespace name="Helper" full_name="ZBateson\MailMimeParser\Stream\Helper"/>
      </namespace>
    </namespace>
  </namespace>
  <deprecated count="1"/>
</project>
